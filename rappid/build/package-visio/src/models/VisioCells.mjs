import {
    VisioValueType,
    VisioRowType,
    VisioSectionType,
    VisioUnitType,
} from '../types/enums.mjs';
import { debug } from '../helpers/debug.mjs';
import { VisioCellsBase } from './VisioCellsBase.mjs';
import { asNumber } from '../helpers/convert.mjs';

// autogenerated (server convertDocs.mjs, page convertDocs.html)

/**
 * @property _shape
 *
 * @property _a
 * @property _action
 * @property _active
 * @property _addMarkup
 * @property _address
 * @property _alignBottom
 * @property _alignCenter
 * @property _alignLeft
 * @property _alignment
 * @property _alignMiddle
 * @property _alignRight
 * @property _alignTop
 * @property _angle
 * @property _asianFont
 * @property _autoGen
 * @property _avenueSizeX
 * @property _avenueSizeY
 * @property _avoidPageBreaks
 * @property _b
 * @property _beginArrow
 * @property _beginArrowSize
 * @property _beginGroup
 * @property _beginX
 * @property _beginY
 * @property _begTrigger
 * @property _bevelBottomHeight
 * @property _bevelBottomType
 * @property _bevelBottomWidth
 * @property _bevelContourColor
 * @property _bevelContourSize
 * @property _bevelDepthColor
 * @property _bevelDepthSize
 * @property _bevelLightingAngle
 * @property _bevelLightingType
 * @property _bevelMaterialType
 * @property _bevelTopHeight
 * @property _bevelTopType
 * @property _bevelTopWidth
 * @property _blockSizeX
 * @property _blockSizeY
 * @property _blur
 * @property _bottomMargin
 * @property _brightness
 * @property _bullet
 * @property _bulletFont
 * @property _bulletFontSize
 * @property _bulletStr
 * @property _buttonFace
 * @property _c
 * @property _calendar
 * @property _canGlue
 * @property _uppercase
 * @property _centerX
 * @property _centerY
 * @property _checked
 * @property _clippingPath
 * @property _color
 * @property _colorSchemeIndex
 * @property _colorTrans
 * @property _comment
 * @property _complexScriptFont
 * @property _complexScriptSize
 * @property _compoundType
 * @property _conFixedCode
 * @property _conLineJumpCode
 * @property _conLineJumpDirX
 * @property _conLineJumpDirY
 * @property _conLineJumpStyle
 * @property _conLineRouteExt
 * @property _connectorSchemeIndex
 * @property _contrast
 * @property _copyright
 * @property _ctrlAsInput
 * @property _currentIndex
 * @property _d
 * @property _dataLinked
 * @property _dblUnderline
 * @property _default
 * @property _defaultTabStop
 * @property _denoise
 * @property _description
 * @property _dirX
 * @property _dirY
 * @property _disabled
 * @property _displayLevel
 * @property _displayMode
 * @property _distanceFromGround
 * @property _docLangID
 * @property _docLockDuplicatePage
 * @property _docLockReplace
 * @property _dontMoveChildren
 * @property _doubleStrikethrough
 * @property _drawingResizeType
 * @property _drawingScale
 * @property _drawingScaleType
 * @property _drawingSizeType
 * @property _dropOnPageScale
 * @property _dynamicsOff
 * @property _dynFeedback
 * @property _e
 * @property _effectSchemeIndex
 * @property _embellishmentIndex
 * @property _enableFillProps
 * @property _enableGrid
 * @property _enableLineProps
 * @property _enableTextProps
 * @property _endArrow
 * @property _endArrowSize
 * @property _endTrigger
 * @property _endX
 * @property _endY
 * @property _eventDblClick
 * @property _eventDrop
 * @property _eventMultiDrop
 * @property _eventXFMod
 * @property _extraInfo
 * @property _fillBkgnd
 * @property _fillBkgndTrans
 * @property _fillForegnd
 * @property _fillForegndTrans
 * @property _fillGradientAngle
 * @property _fillGradientDir
 * @property _fillGradientEnabled
 * @property _fillPattern
 * @property _flags
 * @property _flipX
 * @property _flipY
 * @property _flyoutChild
 * @property _font
 * @property _fontScale
 * @property _fontSchemeIndex
 * @property _format
 * @property _frame
 * @property _gamma
 * @property _glowColor
 * @property _glowColorTrans
 * @property _glowSize
 * @property _glue
 * @property _glueType
 * @property _gradientStopColor
 * @property _gradientStopColorTrans
 * @property _gradientStopPosition
 * @property _height
 * @property _helpTopic
 * @property _hideForApply
 * @property _hideText
 * @property _horzAlign
 * @property _imgHeight
 * @property _imgOffsetX
 * @property _imgOffsetY
 * @property _imgWidth
 * @property _indFirst
 * @property _indLeft
 * @property _indRight
 * @property _inhibitSnap
 * @property _initials
 * @property _invisible
 * @property _isDropSource
 * @property _isDropTarget
 * @property _isSnapTarget
 * @property _isTextEditTarget
 * @property _keepTextFlat
 * @property _label
 * @property _langID
 * @property _layerMember
 * @property _leftMargin
 * @property _letterspace
 * @property _lineAdjustFrom
 * @property _lineAdjustTo
 * @property _lineCap
 * @property _lineColor
 * @property _lineColorTrans
 * @property _lineGradientAngle
 * @property _lineGradientDir
 * @property _lineGradientEnabled
 * @property _lineJumpCode
 * @property _lineJumpFactorX
 * @property _lineJumpFactorY
 * @property _lineJumpStyle
 * @property _linePattern
 * @property _lineRouteExt
 * @property _lineToLineX
 * @property _lineToLineY
 * @property _lineToNodeX
 * @property _lineToNodeY
 * @property _lineWeight
 * @property _localizeMerge
 * @property _lock
 * @property _lockAspect
 * @property _lockBegin
 * @property _lockCalcWH
 * @property _lockCrop
 * @property _lockCustProp
 * @property _lockDelete
 * @property _lockEnd
 * @property _lockFormat
 * @property _lockFromGroupFormat
 * @property _lockGroup
 * @property _lockHeight
 * @property _lockMoveX
 * @property _lockMoveY
 * @property _lockPreview
 * @property _lockReplace
 * @property _lockRotate
 * @property _lockSelect
 * @property _lockTextEdit
 * @property _lockThemeColors
 * @property _lockThemeConnectors
 * @property _lockThemeEffects
 * @property _lockThemeFonts
 * @property _lockThemeIndex
 * @property _lockVariation
 * @property _lockVtxEdit
 * @property _lockWidth
 * @property _locPinX
 * @property _locPinY
 * @property _menu
 * @property _name
 * @property _nameUniv
 * @property _newWindow
 * @property _noAlignBox
 * @property _noCoauth
 * @property _noCtlHandles
 * @property _noFill
 * @property _noLine
 * @property _noLiveDynamics
 * @property _nonPrinting
 * @property _noObjHandles
 * @property _noProofing
 * @property _noQuickDrag
 * @property _noShow
 * @property _noSnap
 * @property _objectKind
 * @property _objType
 * @property _onPage
 * @property _outputFormat
 * @property _overline
 * @property _pageBottomMargin
 * @property _pageHeight
 * @property _pageLeftMargin
 * @property _pageLineJumpDirX
 * @property _pageLineJumpDirY
 * @property _pageLockDuplicate
 * @property _pageLockReplace
 * @property _pageRightMargin
 * @property _pageScale
 * @property _pageShapeSplit
 * @property _pagesX
 * @property _pagesY
 * @property _pageTopMargin
 * @property _pageWidth
 * @property _paperKind
 * @property _paperSource
 * @property _perspective
 * @property _pinX
 * @property _pinY
 * @property _placeDepth
 * @property _placeFlip
 * @property _placeStyle
 * @property _plowCode
 * @property _pos
 * @property _position
 * @property _previewQuality
 * @property _previewScope
 * @property _print
 * @property _printGrid
 * @property _printPageOrientation
 * @property _prompt
 * @property _quickStyleEffectsMatrix
 * @property _quickStyleFillColor
 * @property _quickStyleFillMatrix
 * @property _quickStyleFontColor
 * @property _quickStyleFontMatrix
 * @property _quickStyleLineColor
 * @property _quickStyleLineMatrix
 * @property _quickStyleShadowColor
 * @property _quickStyleType
 * @property _quickStyleVariation
 * @property _readOnly
 * @property _reflectionBlur
 * @property _reflectionDist
 * @property _reflectionSize
 * @property _reflectionTrans
 * @property _relationships
 * @property _replaceCopyCells
 * @property _replaceLockFormat
 * @property _replaceLockShapeData
 * @property _replaceLockText
 * @property _resizeMode
 * @property _resizePage
 * @property _reviewerID
 * @property _rightMargin
 * @property _rotateGradientWithShape
 * @property _rotationType
 * @property _rotationXAngle
 * @property _rotationYAngle
 * @property _rotationZAngle
 * @property _rounding
 * @property _routeStyle
 * @property _scaleX
 * @property _scaleY
 * @property _selectMode
 * @property _shapeFixedCode
 * @property _shapeKeywords
 * @property _shapePermeablePlace
 * @property _shapePermeableX
 * @property _shapePermeableY
 * @property _shapePlaceFlip
 * @property _shapePlaceStyle
 * @property _shapePlowCode
 * @property _shapeRouteStyle
 * @property _shapeShdwBlur
 * @property _shapeShdwObliqueAngle
 * @property _shapeShdwOffsetX
 * @property _shapeShdwOffsetY
 * @property _shapeShdwScaleFactor
 * @property _shapeShdwShow
 * @property _shapeShdwType
 * @property _shapeSplit
 * @property _shapeSplittable
 * @property _sharpen
 * @property _shdwForegnd
 * @property _shdwForegndTrans
 * @property _shdwObliqueAngle
 * @property _shdwOffsetX
 * @property _shdwOffsetY
 * @property _shdwPattern
 * @property _shdwScaleFactor
 * @property _shdwType
 * @property _size
 * @property _sketchAmount
 * @property _sketchEnabled
 * @property _sketchFillChange
 * @property _sketchLineChange
 * @property _sketchLineWeight
 * @property _sketchSeed
 * @property _snap
 * @property _softEdgesSize
 * @property _sortKey
 * @property _spAfter
 * @property _spBefore
 * @property _spLine
 * @property _status
 * @property _strikethru
 * @property _style
 * @property _subAddress
 * @property _tagName
 * @property _textBkgnd
 * @property _textBkgndTrans
 * @property _textDirection
 * @property _textPosAfterBullet
 * @property _theData
 * @property _themeIndex
 * @property _theText
 * @property _topMargin
 * @property _transparency
 * @property _txtAngle
 * @property _txtHeight
 * @property _txtLocPinX
 * @property _txtLocPinY
 * @property _txtPinX
 * @property _txtPinY
 * @property _txtWidth
 * @property _type
 * @property _uICat
 * @property _uICod
 * @property _uIFmt
 * @property _uIVisibility
 * @property _updateAlignBox
 * @property _useGroupGradient
 * @property _value
 * @property _variationColorIndex
 * @property _variationStyleIndex
 * @property _verify
 * @property _verticalAlign
 * @property _viewMarkup
 * @property _visible
 * @property _walkPreference
 * @property _width
 * @property _x
 * @property _xCon
 * @property _xDyn
 * @property _xGridDensity
 * @property _xGridOrigin
 * @property _xGridSpacing
 * @property _xJustify
 * @property _xRulerDensity
 * @property _xRulerOrigin
 * @property _y
 * @property _yCon
 * @property _yDyn
 * @property _yGridDensity
 * @property _yGridOrigin
 * @property _yGridSpacing
 * @property _yJustify
 * @property _yRulerDensity
 * @property _yRulerOrigin
 */
export class VisioCells extends VisioCellsBase {

    // autogenerated (server convertDocs.mjs, page convertDocs.html)

    /**
     * 2.4.4.1 A
     * @see {http://localhost/MS-VSDX.pdf#page=159}
     * @param {VisioCell} a
     */
    set a(a) {
        this.attributeSet('a');
        this._a = a;
    }

    /**
     * 2.4.4.1 A
     * @see {http://localhost/MS-VSDX.pdf#page=159}
     *
     * If A has an ArcTo, Ellipse, EllipticalArcTo, or InfiniteLine Row_Type parent
     * element, it is a vLength that specifies geometry path information according to
     * the Row_Type.
     *
     * If A has a NURBSTo, RelCubBezTo, RelEllipticalArcTo, RelQuadBezTo, SplineStart,
     * or SplineKnot Row_Type parent element, it is a vScalar that specifies geometry
     * path information according to the Row_Type.
     *
     * If A has a PolylineTo parent element, it is a formula expression that MUST
     * contain a polyline function.
     *
     * If A is a descendant element of a Scratch Section_Type element, it is a vAny that
     * is used during formula evaluation only.
     */
    get a() {
        let visioType;
        switch (this.getRowType()) {
            case VisioRowType.ArcTo:
            case VisioRowType.Ellipse:
            case VisioRowType.EllipticalArcTo:
            case VisioRowType.InfiniteLine:
                visioType = VisioValueType.vLength;
                break;
            case VisioRowType.NURBSTo:
            case VisioRowType.RelCubBezTo:
            case VisioRowType.RelEllipticalArcTo:
            case VisioRowType.RelQuadBezTo:
            case VisioRowType.SplineStart:
            case VisioRowType.SplineKnot:
                visioType = VisioValueType.vScalar;
                break;
            case VisioRowType.PolylineTo:
                visioType = VisioValueType.vAny;
                break;
            default:
                debug.log('Incorrect cell type',
                    { attributeName: 'a', cells: this });
        }

        let cell = this._a;
        if (cell === undefined)
            cell = this.getParentCell('a');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.2 Action
     * @see {http://localhost/MS-VSDX.pdf#page=159}
     * @param {VisioCell} action
     */
    set action(action) {
        this.attributeSet('action');
        this._action = action;
    }

    /**
     * 2.4.4.2 Action
     * @see {http://localhost/MS-VSDX.pdf#page=159}
     */
    get action() {
        const visioType = VisioValueType.vScalar;
        let cell = this._action;
        if (cell === undefined)
            cell = this.getParentCell('action');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.3 Active
     * @see {http://localhost/MS-VSDX.pdf#page=160}
     * @param {VisioCell} active
     */
    set active(active) {
        this.attributeSet('active');
        this._active = active;
    }

    /**
     * 2.4.4.3 Active
     * @see {http://localhost/MS-VSDX.pdf#page=160}
     */
    get active() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._active;
        if (cell === undefined)
            cell = this.getParentCell('active');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.4 AddMarkup
     * @see {http://localhost/MS-VSDX.pdf#page=160}
     * @param {VisioCell} addMarkup
     */
    set addMarkup(addMarkup) {
        this.attributeSet('addMarkup');
        this._addMarkup = addMarkup;
    }

    /**
     * 2.4.4.4 AddMarkup
     * @see {http://localhost/MS-VSDX.pdf#page=160}
     */
    get addMarkup() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._addMarkup;
        if (cell === undefined)
            cell = this.getParentCell('addMarkup');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.5 Address
     * @see {http://localhost/MS-VSDX.pdf#page=160}
     * @param {VisioCell} address
     */
    set address(address) {
        this.attributeSet('address');
        this._address = address;
    }

    /**
     * 2.4.4.5 Address
     * @see {http://localhost/MS-VSDX.pdf#page=160}
     */
    get address() {
        const visioType = VisioValueType.PtgString;
        let cell = this._address;
        if (cell === undefined)
            cell = this.getParentCell('address');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.6 AlignBottom
     * @see {http://localhost/MS-VSDX.pdf#page=160}
     * @param {VisioCell} alignBottom
     */
    set alignBottom(alignBottom) {
        this.attributeSet('alignBottom');
        this._alignBottom = alignBottom;
    }

    /**
     * 2.4.4.6 AlignBottom
     * @see {http://localhost/MS-VSDX.pdf#page=160}
     */
    get alignBottom() {
        const visioType = VisioValueType.vScalar;
        let cell = this._alignBottom;
        if (cell === undefined)
            cell = this.getParentCell('alignBottom');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.7 AlignCenter
     * @see {http://localhost/MS-VSDX.pdf#page=160}
     * @param {VisioCell} alignCenter
     */
    set alignCenter(alignCenter) {
        this.attributeSet('alignCenter');
        this._alignCenter = alignCenter;
    }

    /**
     * 2.4.4.7 AlignCenter
     * @see {http://localhost/MS-VSDX.pdf#page=160}
     */
    get alignCenter() {
        const visioType = VisioValueType.vScalar;
        let cell = this._alignCenter;
        if (cell === undefined)
            cell = this.getParentCell('alignCenter');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.8 AlignLeft
     * @see {http://localhost/MS-VSDX.pdf#page=160}
     * @param {VisioCell} alignLeft
     */
    set alignLeft(alignLeft) {
        this.attributeSet('alignLeft');
        this._alignLeft = alignLeft;
    }

    /**
     * 2.4.4.8 AlignLeft
     * @see {http://localhost/MS-VSDX.pdf#page=160}
     */
    get alignLeft() {
        const visioType = VisioValueType.vScalar;
        let cell = this._alignLeft;
        if (cell === undefined)
            cell = this.getParentCell('alignLeft');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.9 Alignment
     * @see {http://localhost/MS-VSDX.pdf#page=160}
     * @param {VisioCell} alignment
     */
    set alignment(alignment) {
        this.attributeSet('alignment');
        this._alignment = alignment;
    }

    /**
     * 2.4.4.9 Alignment
     * @see {http://localhost/MS-VSDX.pdf#page=160}
     */
    get alignment() {
        const visioType = VisioValueType.vScalar;
        let cell = this._alignment;
        if (cell === undefined)
            cell = this.getParentCell('alignment');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.10 AlignMiddle
     * @see {http://localhost/MS-VSDX.pdf#page=161}
     * @param {VisioCell} alignMiddle
     */
    set alignMiddle(alignMiddle) {
        this.attributeSet('alignMiddle');
        this._alignMiddle = alignMiddle;
    }

    /**
     * 2.4.4.10 AlignMiddle
     * @see {http://localhost/MS-VSDX.pdf#page=161}
     */
    get alignMiddle() {
        const visioType = VisioValueType.vScalar;
        let cell = this._alignMiddle;
        if (cell === undefined)
            cell = this.getParentCell('alignMiddle');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.11 AlignRight
     * @see {http://localhost/MS-VSDX.pdf#page=161}
     * @param {VisioCell} alignRight
     */
    set alignRight(alignRight) {
        this.attributeSet('alignRight');
        this._alignRight = alignRight;
    }

    /**
     * 2.4.4.11 AlignRight
     * @see {http://localhost/MS-VSDX.pdf#page=161}
     */
    get alignRight() {
        const visioType = VisioValueType.vScalar;
        let cell = this._alignRight;
        if (cell === undefined)
            cell = this.getParentCell('alignRight');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.12 AlignTop
     * @see {http://localhost/MS-VSDX.pdf#page=161}
     * @param {VisioCell} alignTop
     */
    set alignTop(alignTop) {
        this.attributeSet('alignTop');
        this._alignTop = alignTop;
    }

    /**
     * 2.4.4.12 AlignTop
     * @see {http://localhost/MS-VSDX.pdf#page=161}
     */
    get alignTop() {
        const visioType = VisioValueType.vScalar;
        let cell = this._alignTop;
        if (cell === undefined)
            cell = this.getParentCell('alignTop');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.13 Angle
     * @see {http://localhost/MS-VSDX.pdf#page=161}
     * @param {VisioCell} angle
     */
    set angle(angle) {
        this.attributeSet('angle');
        this._angle = angle;
    }

    /**
     * 2.4.4.13 Angle
     * @see {http://localhost/MS-VSDX.pdf#page=161}
     *
     * The Angle cell is a vAngle or vScalar custom token grouping that specifies the
     * angle of rotation of a shape. The value is defined in relation to the coordinate
     * system of the shape’s parent. It MUST have a ShapeSheet_Type parent element.
     *
     * If the structure is a vScalar, the value MUST be expressed as an
     * angleInternalUnitNumber custom internal unit number. Increasing numbers indicate
     * counterclockwise rotation.
     */
    get angle() {
        let cell = this._angle;
        if (cell === undefined)
            cell = this.getParentCell('angle');

        const visioType = VisioValueType.vAngle;

        // VisioValueType.vAngle,
        if (cell && cell.units &&
            cell.units !== VisioUnitType.DEG &&
            cell.value !== '0'
        ) {
            debug.log('vAngle unclear');
        }
        if (cell === undefined) return this.getDefaultCellValue(visioType);
        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.14 AsianFont
     * @see {http://localhost/MS-VSDX.pdf#page=161}
     * @param {VisioCell} asianFont
     */
    set asianFont(asianFont) {
        this.attributeSet('asianFont');
        this._asianFont = asianFont;
    }

    /**
     * 2.4.4.14 AsianFont
     * @see {http://localhost/MS-VSDX.pdf#page=161}
     */
    get asianFont() {
        const visioType = VisioValueType.vFont;
        let cell = this._asianFont;
        if (cell === undefined)
            cell = this.getParentCell('asianFont');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.15 AutoGen
     * @see {http://localhost/MS-VSDX.pdf#page=161}
     * @param {VisioCell} autoGen
     */
    set autoGen(autoGen) {
        this.attributeSet('autoGen');
        this._autoGen = autoGen;
    }

    /**
     * 2.4.4.15 AutoGen
     * @see {http://localhost/MS-VSDX.pdf#page=161}
     */
    get autoGen() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._autoGen;
        if (cell === undefined)
            cell = this.getParentCell('autoGen');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.16 AvenueSizeX
     * @see {http://localhost/MS-VSDX.pdf#page=161}
     * @param {VisioCell} avenueSizeX
     */
    set avenueSizeX(avenueSizeX) {
        this.attributeSet('avenueSizeX');
        this._avenueSizeX = avenueSizeX;
    }

    /**
     * 2.4.4.16 AvenueSizeX
     * @see {http://localhost/MS-VSDX.pdf#page=161}
     */
    get avenueSizeX() {
        const visioType = VisioValueType.vScalar;
        let cell = this._avenueSizeX;
        if (cell === undefined)
            cell = this.getParentCell('avenueSizeX');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.17 AvenueSizeY
     * @see {http://localhost/MS-VSDX.pdf#page=161}
     * @param {VisioCell} avenueSizeY
     */
    set avenueSizeY(avenueSizeY) {
        this.attributeSet('avenueSizeY');
        this._avenueSizeY = avenueSizeY;
    }

    /**
     * 2.4.4.17 AvenueSizeY
     * @see {http://localhost/MS-VSDX.pdf#page=161}
     */
    get avenueSizeY() {
        const visioType = VisioValueType.vScalar;
        let cell = this._avenueSizeY;
        if (cell === undefined)
            cell = this.getParentCell('avenueSizeY');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.18 AvoidPageBreaks
     * @see {http://localhost/MS-VSDX.pdf#page=161}
     * @param {VisioCell} avoidPageBreaks
     */
    set avoidPageBreaks(avoidPageBreaks) {
        this.attributeSet('avoidPageBreaks');
        this._avoidPageBreaks = avoidPageBreaks;
    }

    /**
     * 2.4.4.18 AvoidPageBreaks
     * @see {http://localhost/MS-VSDX.pdf#page=161}
     */
    get avoidPageBreaks() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._avoidPageBreaks;
        if (cell === undefined)
            cell = this.getParentCell('avoidPageBreaks');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.19 B
     * @see {http://localhost/MS-VSDX.pdf#page=162}
     * @param {VisioCell} b
     */
    set b(b) {
        this.attributeSet('b');
        this._b = b;
    }

    /**
     * 2.4.4.19 B
     * @see {http://localhost/MS-VSDX.pdf#page=162}
     */
    get b() {

        let visioType;

        if (this.isDescendantOfSectionType([VisioSectionType.Scratch]))
            visioType = VisioValueType.vAny;
        else
            switch (this.getRowType()) {
                case VisioRowType.Ellipse:
                case VisioRowType.EllipticalArcTo:
                case VisioRowType.InfiniteLine:
                    visioType = VisioValueType.vLength;
                    break;
                case VisioRowType.NURBSTo:
                case VisioRowType.RelCubBezTo:
                case VisioRowType.RelEllipticalArcTo:
                case VisioRowType.RelQuadBezTo:
                case VisioRowType.SplineStart:
                    visioType = VisioValueType.vScalar;
                    break;
                default:
                    debug.log('Incorrect cell type',
                        { attributeName: 'a', cells: this });
            }

        let cell = this._b;
        if (cell === undefined)
            cell = this.getParentCell('b');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.20 BeginArrow
     * @see {http://localhost/MS-VSDX.pdf#page=162}
     * @param {VisioCell} beginArrow
     */
    set beginArrow(beginArrow) {
        this.attributeSet('beginArrow');
        this._beginArrow = beginArrow;
    }

    /**
     * 2.4.4.20 BeginArrow
     * @see {http://localhost/MS-VSDX.pdf#page=162}
     */
    get beginArrow() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._beginArrow;
        if (cell === undefined)
            cell = this.getParentCell('beginArrow');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.21 BeginArrowSize
     * @see {http://localhost/MS-VSDX.pdf#page=164}
     * @param {VisioCell} beginArrowSize
     */
    set beginArrowSize(beginArrowSize) {
        this.attributeSet('beginArrowSize');
        this._beginArrowSize = beginArrowSize;
    }

    /**
     * 2.4.4.21 BeginArrowSize
     * @see {http://localhost/MS-VSDX.pdf#page=164}
     */
    get beginArrowSize() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._beginArrowSize;
        if (cell === undefined)
            cell = this.getParentCell('beginArrowSize');

        // default size
        if (cell === undefined) return 2;

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.22 BeginGroup
     * @see {http://localhost/MS-VSDX.pdf#page=165}
     * @param {VisioCell} beginGroup
     */
    set beginGroup(beginGroup) {
        this.attributeSet('beginGroup');
        this._beginGroup = beginGroup;
    }

    /**
     * 2.4.4.22 BeginGroup
     * @see {http://localhost/MS-VSDX.pdf#page=165}
     */
    get beginGroup() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._beginGroup;
        if (cell === undefined)
            cell = this.getParentCell('beginGroup');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.23 BeginX
     * @see {http://localhost/MS-VSDX.pdf#page=165}
     * @param {VisioCell} beginX
     */
    set beginX(beginX) {
        this.attributeSet('beginX');
        this._beginX = beginX;
    }

    /**
     * 2.4.4.23 BeginX
     * @see {http://localhost/MS-VSDX.pdf#page=165}
     */
    get beginX() {
        const visioType = VisioValueType.vLength;
        let cell = this._beginX;
        if (cell === undefined)
            cell = this.getParentCell('beginX');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.24 BeginY
     * @see {http://localhost/MS-VSDX.pdf#page=165}
     * @param {VisioCell} beginY
     */
    set beginY(beginY) {
        this.attributeSet('beginY');
        this._beginY = beginY;
    }

    /**
     * 2.4.4.24 BeginY
     * @see {http://localhost/MS-VSDX.pdf#page=165}
     */
    get beginY() {
        const visioType = VisioValueType.vLength;
        let cell = this._beginY;
        if (cell === undefined)
            cell = this.getParentCell('beginY');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.25 BegTrigger
     * @see {http://localhost/MS-VSDX.pdf#page=165}
     * @param {VisioCell} begTrigger
     */
    set begTrigger(begTrigger) {
        this.attributeSet('begTrigger');
        this._begTrigger = begTrigger;
    }

    /**
     * 2.4.4.25 BegTrigger
     * @see {http://localhost/MS-VSDX.pdf#page=165}
     */
    get begTrigger() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._begTrigger;
        if (cell === undefined)
            cell = this.getParentCell('begTrigger');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.26 BevelBottomHeight
     * @see {http://localhost/MS-VSDX.pdf#page=165}
     * @param {VisioCell} bevelBottomHeight
     */
    set bevelBottomHeight(bevelBottomHeight) {
        this.attributeSet('bevelBottomHeight');
        this._bevelBottomHeight = bevelBottomHeight;
    }

    /**
     * 2.4.4.26 BevelBottomHeight
     * @see {http://localhost/MS-VSDX.pdf#page=165}
     */
    get bevelBottomHeight() {
        const visioType = VisioValueType.vLength;
        let cell = this._bevelBottomHeight;
        if (cell === undefined)
            cell = this.getParentCell('bevelBottomHeight');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.27 BevelBottomType
     * @see {http://localhost/MS-VSDX.pdf#page=165}
     * @param {VisioCell} bevelBottomType
     */
    set bevelBottomType(bevelBottomType) {
        this.attributeSet('bevelBottomType');
        this._bevelBottomType = bevelBottomType;
    }

    /**
     * 2.4.4.27 BevelBottomType
     * @see {http://localhost/MS-VSDX.pdf#page=165}
     */
    get bevelBottomType() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._bevelBottomType;
        if (cell === undefined)
            cell = this.getParentCell('bevelBottomType');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.28 BevelBottomWidth
     * @see {http://localhost/MS-VSDX.pdf#page=166}
     * @param {VisioCell} bevelBottomWidth
     */
    set bevelBottomWidth(bevelBottomWidth) {
        this.attributeSet('bevelBottomWidth');
        this._bevelBottomWidth = bevelBottomWidth;
    }

    /**
     * 2.4.4.28 BevelBottomWidth
     * @see {http://localhost/MS-VSDX.pdf#page=166}
     */
    get bevelBottomWidth() {
        const visioType = VisioValueType.vLength;
        let cell = this._bevelBottomWidth;
        if (cell === undefined)
            cell = this.getParentCell('bevelBottomWidth');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.29 BevelContourColor
     * @see {http://localhost/MS-VSDX.pdf#page=166}
     * @param {VisioCell} bevelContourColor
     */
    set bevelContourColor(bevelContourColor) {
        this.attributeSet('bevelContourColor');
        this._bevelContourColor = bevelContourColor;
    }

    /**
     * 2.4.4.29 BevelContourColor
     * @see {http://localhost/MS-VSDX.pdf#page=166}
     */
    get bevelContourColor() {
        const visioType = VisioValueType.PtgColorRGB;
        let cell = this._bevelContourColor;
        if (cell === undefined)
            cell = this.getParentCell('bevelContourColor');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.30 BevelContourSize
     * @see {http://localhost/MS-VSDX.pdf#page=166}
     * @param {VisioCell} bevelContourSize
     */
    set bevelContourSize(bevelContourSize) {
        this.attributeSet('bevelContourSize');
        this._bevelContourSize = bevelContourSize;
    }

    /**
     * 2.4.4.30 BevelContourSize
     * @see {http://localhost/MS-VSDX.pdf#page=166}
     */
    get bevelContourSize() {
        const visioType = VisioValueType.vLength;
        let cell = this._bevelContourSize;
        if (cell === undefined)
            cell = this.getParentCell('bevelContourSize');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.31 BevelDepthColor
     * @see {http://localhost/MS-VSDX.pdf#page=166}
     * @param {VisioCell} bevelDepthColor
     */
    set bevelDepthColor(bevelDepthColor) {
        this.attributeSet('bevelDepthColor');
        this._bevelDepthColor = bevelDepthColor;
    }

    /**
     * 2.4.4.31 BevelDepthColor
     * @see {http://localhost/MS-VSDX.pdf#page=166}
     */
    get bevelDepthColor() {
        const visioType = VisioValueType.PtgColorRGB;
        let cell = this._bevelDepthColor;
        if (cell === undefined)
            cell = this.getParentCell('bevelDepthColor');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.32 BevelDepthSize
     * @see {http://localhost/MS-VSDX.pdf#page=166}
     * @param {VisioCell} bevelDepthSize
     */
    set bevelDepthSize(bevelDepthSize) {
        this.attributeSet('bevelDepthSize');
        this._bevelDepthSize = bevelDepthSize;
    }

    /**
     * 2.4.4.32 BevelDepthSize
     * @see {http://localhost/MS-VSDX.pdf#page=166}
     */
    get bevelDepthSize() {
        const visioType = VisioValueType.vLength;
        let cell = this._bevelDepthSize;
        if (cell === undefined)
            cell = this.getParentCell('bevelDepthSize');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.33 BevelLightingAngle
     * @see {http://localhost/MS-VSDX.pdf#page=166}
     * @param {VisioCell} bevelLightingAngle
     */
    set bevelLightingAngle(bevelLightingAngle) {
        this.attributeSet('bevelLightingAngle');
        this._bevelLightingAngle = bevelLightingAngle;
    }

    /**
     * 2.4.4.33 BevelLightingAngle
     * @see {http://localhost/MS-VSDX.pdf#page=166}
     */
    get bevelLightingAngle() {
        const visioType = VisioValueType.vScalar;
        let cell = this._bevelLightingAngle;
        if (cell === undefined)
            cell = this.getParentCell('bevelLightingAngle');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.34 BevelLightingType
     * @see {http://localhost/MS-VSDX.pdf#page=167}
     * @param {VisioCell} bevelLightingType
     */
    set bevelLightingType(bevelLightingType) {
        this.attributeSet('bevelLightingType');
        this._bevelLightingType = bevelLightingType;
    }

    /**
     * 2.4.4.34 BevelLightingType
     * @see {http://localhost/MS-VSDX.pdf#page=167}
     */
    get bevelLightingType() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._bevelLightingType;
        if (cell === undefined)
            cell = this.getParentCell('bevelLightingType');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.35 BevelMaterialType
     * @see {http://localhost/MS-VSDX.pdf#page=167}
     * @param {VisioCell} bevelMaterialType
     */
    set bevelMaterialType(bevelMaterialType) {
        this.attributeSet('bevelMaterialType');
        this._bevelMaterialType = bevelMaterialType;
    }

    /**
     * 2.4.4.35 BevelMaterialType
     * @see {http://localhost/MS-VSDX.pdf#page=167}
     */
    get bevelMaterialType() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._bevelMaterialType;
        if (cell === undefined)
            cell = this.getParentCell('bevelMaterialType');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.36 BevelTopHeight
     * @see {http://localhost/MS-VSDX.pdf#page=168}
     * @param {VisioCell} bevelTopHeight
     */
    set bevelTopHeight(bevelTopHeight) {
        this.attributeSet('bevelTopHeight');
        this._bevelTopHeight = bevelTopHeight;
    }

    /**
     * 2.4.4.36 BevelTopHeight
     * @see {http://localhost/MS-VSDX.pdf#page=168}
     */
    get bevelTopHeight() {
        const visioType = VisioValueType.vLength;
        let cell = this._bevelTopHeight;
        if (cell === undefined)
            cell = this.getParentCell('bevelTopHeight');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.37 BevelTopType
     * @see {http://localhost/MS-VSDX.pdf#page=168}
     * @param {VisioCell} bevelTopType
     */
    set bevelTopType(bevelTopType) {
        this.attributeSet('bevelTopType');
        this._bevelTopType = bevelTopType;
    }

    /**
     * 2.4.4.37 BevelTopType
     * @see {http://localhost/MS-VSDX.pdf#page=168}
     */
    get bevelTopType() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._bevelTopType;
        if (cell === undefined)
            cell = this.getParentCell('bevelTopType');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.38 BevelTopWidth
     * @see {http://localhost/MS-VSDX.pdf#page=169}
     * @param {VisioCell} bevelTopWidth
     */
    set bevelTopWidth(bevelTopWidth) {
        this.attributeSet('bevelTopWidth');
        this._bevelTopWidth = bevelTopWidth;
    }

    /**
     * 2.4.4.38 BevelTopWidth
     * @see {http://localhost/MS-VSDX.pdf#page=169}
     */
    get bevelTopWidth() {
        const visioType = VisioValueType.vLength;
        let cell = this._bevelTopWidth;
        if (cell === undefined)
            cell = this.getParentCell('bevelTopWidth');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.39 BlockSizeX
     * @see {http://localhost/MS-VSDX.pdf#page=169}
     * @param {VisioCell} blockSizeX
     */
    set blockSizeX(blockSizeX) {
        this.attributeSet('blockSizeX');
        this._blockSizeX = blockSizeX;
    }

    /**
     * 2.4.4.39 BlockSizeX
     * @see {http://localhost/MS-VSDX.pdf#page=169}
     */
    get blockSizeX() {
        const visioType = VisioValueType.vScalar;
        let cell = this._blockSizeX;
        if (cell === undefined)
            cell = this.getParentCell('blockSizeX');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.40 BlockSizeY
     * @see {http://localhost/MS-VSDX.pdf#page=169}
     * @param {VisioCell} blockSizeY
     */
    set blockSizeY(blockSizeY) {
        this.attributeSet('blockSizeY');
        this._blockSizeY = blockSizeY;
    }

    /**
     * 2.4.4.40 BlockSizeY
     * @see {http://localhost/MS-VSDX.pdf#page=169}
     */
    get blockSizeY() {
        const visioType = VisioValueType.vScalar;
        let cell = this._blockSizeY;
        if (cell === undefined)
            cell = this.getParentCell('blockSizeY');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.41 Blur
     * @see {http://localhost/MS-VSDX.pdf#page=169}
     * @param {VisioCell} blur
     */
    set blur(blur) {
        this.attributeSet('blur');
        this._blur = blur;
    }

    /**
     * 2.4.4.41 Blur
     * @see {http://localhost/MS-VSDX.pdf#page=169}
     */
    get blur() {
        const visioType = VisioValueType.vScalar;
        let cell = this._blur;
        if (cell === undefined)
            cell = this.getParentCell('blur');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.42 BottomMargin
     * @see {http://localhost/MS-VSDX.pdf#page=169}
     * @param {VisioCell} bottomMargin
     */
    set bottomMargin(bottomMargin) {
        this.attributeSet('bottomMargin');
        this._bottomMargin = bottomMargin;
    }

    /**
     * 2.4.4.42 BottomMargin
     * @see {http://localhost/MS-VSDX.pdf#page=169}
     */
    get bottomMargin() {
        const visioType = VisioValueType.vLength;
        let cell = this._bottomMargin;
        if (cell === undefined)
            cell = this.getParentCell('bottomMargin');
        if (cell === undefined)
            cell = this.getStylesheetTextStyleCell('bottomMargin');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.43 Brightness
     * @see {http://localhost/MS-VSDX.pdf#page=169}
     * @param {VisioCell} brightness
     */
    set brightness(brightness) {
        this.attributeSet('brightness');
        this._brightness = brightness;
    }

    /**
     * 2.4.4.43 Brightness
     * @see {http://localhost/MS-VSDX.pdf#page=169}
     */
    get brightness() {
        const visioType = VisioValueType.vScalar;
        let cell = this._brightness;
        if (cell === undefined)
            cell = this.getParentCell('brightness');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.44 Bullet
     * @see {http://localhost/MS-VSDX.pdf#page=170}
     * @param {VisioCell} bullet
     */
    set bullet(bullet) {
        this.attributeSet('bullet');
        this._bullet = bullet;
    }

    /**
     * 2.4.4.44 Bullet
     * @see {http://localhost/MS-VSDX.pdf#page=170}
     */
    get bullet() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._bullet;
        if (cell === undefined)
            cell = this.getParentCell('bullet');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.45 BulletFont
     * @see {http://localhost/MS-VSDX.pdf#page=170}
     * @param {VisioCell} bulletFont
     */
    set bulletFont(bulletFont) {
        this.attributeSet('bulletFont');
        this._bulletFont = bulletFont;
    }

    /**
     * 2.4.4.45 BulletFont
     * @see {http://localhost/MS-VSDX.pdf#page=170}
     */
    get bulletFont() {
        const visioType = VisioValueType.vFont;
        let cell = this._bulletFont;
        if (cell === undefined)
            cell = this.getParentCell('bulletFont');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.46 BulletFontSize
     * @see {http://localhost/MS-VSDX.pdf#page=170}
     * @param {VisioCell} bulletFontSize
     */
    set bulletFontSize(bulletFontSize) {
        this.attributeSet('bulletFontSize');
        this._bulletFontSize = bulletFontSize;
    }

    /**
     * 2.4.4.46 BulletFontSize
     * @see {http://localhost/MS-VSDX.pdf#page=170}
     */
    get bulletFontSize() {
        const visioType = VisioValueType.vLength;
        let cell = this._bulletFontSize;
        if (cell === undefined)
            cell = this.getParentCell('bulletFontSize');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.47 BulletStr
     * @see {http://localhost/MS-VSDX.pdf#page=170}
     * @param {VisioCell} bulletStr
     */
    set bulletStr(bulletStr) {
        this.attributeSet('bulletStr');
        this._bulletStr = bulletStr;
    }

    /**
     * 2.4.4.47 BulletStr
     * @see {http://localhost/MS-VSDX.pdf#page=170}
     */
    get bulletStr() {
        const visioType = VisioValueType.PtgString;
        let cell = this._bulletStr;
        if (cell === undefined)
            cell = this.getParentCell('bulletStr');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.48 ButtonFace
     * @see {http://localhost/MS-VSDX.pdf#page=171}
     * @param {VisioCell} buttonFace
     */
    set buttonFace(buttonFace) {
        this.attributeSet('buttonFace');
        this._buttonFace = buttonFace;
    }

    /**
     * 2.4.4.48 ButtonFace
     * @see {http://localhost/MS-VSDX.pdf#page=171}
     */
    get buttonFace() {
        const visioType = VisioValueType.PtgString;
        let cell = this._buttonFace;
        if (cell === undefined)
            cell = this.getParentCell('buttonFace');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.49 C
     * @see {http://localhost/MS-VSDX.pdf#page=171}
     * @param {VisioCell} c
     */
    set c(c) {
        this.attributeSet('c');
        this._c = c;
    }

    /**
     * 2.4.4.49 C
     * @see {http://localhost/MS-VSDX.pdf#page=171}
     */
    get c() {
        let visioType;
        if (this.isDescendantOfSectionType([VisioSectionType.Scratch]))
            visioType = VisioValueType.vAny;
        else
            switch (this.getRowType()) {
                case VisioRowType.Ellipse:
                    visioType = VisioValueType.vLength;
                    break;
                case VisioRowType.EllipticalArcTo:
                case VisioRowType.RelEllipticalArcTo:
                    visioType = VisioValueType.vAngle;
                    break;
                case VisioRowType.NURBSTo:
                case VisioRowType.RelCubBezTo:
                case VisioRowType.SplineStart:
                    visioType = VisioValueType.vScalar;
                    break;
                default:
                    debug.log('Incorrect cell type',
                        { attributeName: 'c', cells: this });
            }

        let cell = this._c;
        if (cell === undefined)
            cell = this.getParentCell('c');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.50 Calendar
     * @see {http://localhost/MS-VSDX.pdf#page=171}
     * @param {VisioCell} calendar
     */
    set calendar(calendar) {
        this.attributeSet('calendar');
        this._calendar = calendar;
    }

    /**
     * 2.4.4.50 Calendar
     * @see {http://localhost/MS-VSDX.pdf#page=171}
     */
    get calendar() {
        const visioType = VisioValueType.vScalar;
        let cell = this._calendar;
        if (cell === undefined)
            cell = this.getParentCell('calendar');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.51 CanGlue
     * @see {http://localhost/MS-VSDX.pdf#page=171}
     * @param {VisioCell} canGlue
     */
    set canGlue(canGlue) {
        this.attributeSet('canGlue');
        this._canGlue = canGlue;
    }

    /**
     * 2.4.4.51 CanGlue
     * @see {http://localhost/MS-VSDX.pdf#page=171}
     */
    get canGlue() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._canGlue;
        if (cell === undefined)
            cell = this.getParentCell('canGlue');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.52 Case
     * @see {http://localhost/MS-VSDX.pdf#page=171}
     * @param {VisioCell} uppercase
     */
    set uppercase(uppercase) {
        this.attributeSet('uppercase');
        this._uppercase = uppercase;
    }

    /**
     * 2.4.4.52 Case
     * @see {http://localhost/MS-VSDX.pdf#page=171}
     */
    get uppercase() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._uppercase;
        if (cell === undefined)
            cell = this.getParentCell('uppercase');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.53 CenterX
     * @see {http://localhost/MS-VSDX.pdf#page=172}
     * @param {VisioCell} centerX
     */
    set centerX(centerX) {
        this.attributeSet('centerX');
        this._centerX = centerX;
    }

    /**
     * 2.4.4.53 CenterX
     * @see {http://localhost/MS-VSDX.pdf#page=172}
     */
    get centerX() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._centerX;
        if (cell === undefined)
            cell = this.getParentCell('centerX');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.54 CenterY
     * @see {http://localhost/MS-VSDX.pdf#page=172}
     * @param {VisioCell} centerY
     */
    set centerY(centerY) {
        this.attributeSet('centerY');
        this._centerY = centerY;
    }

    /**
     * 2.4.4.54 CenterY
     * @see {http://localhost/MS-VSDX.pdf#page=172}
     */
    get centerY() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._centerY;
        if (cell === undefined)
            cell = this.getParentCell('centerY');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.55 Checked
     * @see {http://localhost/MS-VSDX.pdf#page=172}
     * @param {VisioCell} checked
     */
    set checked(checked) {
        this.attributeSet('checked');
        this._checked = checked;
    }

    /**
     * 2.4.4.55 Checked
     * @see {http://localhost/MS-VSDX.pdf#page=172}
     */
    get checked() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._checked;
        if (cell === undefined)
            cell = this.getParentCell('checked');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.56 ClippingPath
     * @see {http://localhost/MS-VSDX.pdf#page=172}
     * @param {VisioCell} clippingPath
     */
    set clippingPath(clippingPath) {
        this.attributeSet('clippingPath');
        this._clippingPath = clippingPath;
    }

    /**
     * 2.4.4.56 ClippingPath
     * @see {http://localhost/MS-VSDX.pdf#page=172}
     */
    get clippingPath() {
        const visioType = VisioValueType.PtgString;
        let cell = this._clippingPath;
        if (cell === undefined)
            cell = this.getParentCell('clippingPath');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.57 Color
     * @see {http://localhost/MS-VSDX.pdf#page=172}
     * @param {VisioCell} color
     */
    set color(color) {
        this.attributeSet('color');
        this._color = color;
    }

    /**
     * 2.4.4.57 Color
     * @see {http://localhost/MS-VSDX.pdf#page=172}
     */
    get color() {
        const visioType = VisioValueType.PtgColorRGB;
        let cell = this._color;
        if (cell === undefined)
            cell = this.getParentCell('color');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.58 ColorSchemeIndex
     * @see {http://localhost/MS-VSDX.pdf#page=173}
     * @param {VisioCell} colorSchemeIndex
     */
    set colorSchemeIndex(colorSchemeIndex) {
        this.attributeSet('colorSchemeIndex');
        this._colorSchemeIndex = colorSchemeIndex;
    }

    /**
     * 2.4.4.58 ColorSchemeIndex
     * @see {http://localhost/MS-VSDX.pdf#page=173}
     */
    get colorSchemeIndex() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._colorSchemeIndex;
        if (cell === undefined)
            cell = this.getParentCell('colorSchemeIndex');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.59 ColorTrans
     * @see {http://localhost/MS-VSDX.pdf#page=173}
     * @param {VisioCell} colorTrans
     */
    set colorTrans(colorTrans) {
        this.attributeSet('colorTrans');
        this._colorTrans = colorTrans;
    }

    /**
     * 2.4.4.59 ColorTrans
     * @see {http://localhost/MS-VSDX.pdf#page=173}
     */
    get colorTrans() {
        const visioType = VisioValueType.vScalar;
        let cell = this._colorTrans;
        if (cell === undefined)
            cell = this.getParentCell('colorTrans');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.60 Comment
     * @see {http://localhost/MS-VSDX.pdf#page=174}
     * @param {VisioCell} comment
     */
    set comment(comment) {
        this.attributeSet('comment');
        this._comment = comment;
    }

    /**
     * 2.4.4.60 Comment
     * @see {http://localhost/MS-VSDX.pdf#page=174}
     */
    get comment() {
        const visioType = VisioValueType.PtgString;
        let cell = this._comment;
        if (cell === undefined)
            cell = this.getParentCell('comment');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.61 ComplexScriptFont
     * @see {http://localhost/MS-VSDX.pdf#page=174}
     * @param {VisioCell} complexScriptFont
     */
    set complexScriptFont(complexScriptFont) {
        this.attributeSet('complexScriptFont');
        this._complexScriptFont = complexScriptFont;
    }

    /**
     * 2.4.4.61 ComplexScriptFont
     * @see {http://localhost/MS-VSDX.pdf#page=174}
     */
    get complexScriptFont() {
        const visioType = VisioValueType.vFont;
        let cell = this._complexScriptFont;
        if (cell === undefined)
            cell = this.getParentCell('complexScriptFont');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.62 ComplexScriptSize
     * @see {http://localhost/MS-VSDX.pdf#page=174}
     * @param {VisioCell} complexScriptSize
     */
    set complexScriptSize(complexScriptSize) {
        this.attributeSet('complexScriptSize');
        this._complexScriptSize = complexScriptSize;
    }

    /**
     * 2.4.4.62 ComplexScriptSize
     * @see {http://localhost/MS-VSDX.pdf#page=174}
     */
    get complexScriptSize() {
        const visioType = VisioValueType.vLength;
        let cell = this._complexScriptSize;
        if (cell === undefined)
            cell = this.getParentCell('complexScriptSize');

        if (cell === undefined) return undefined;

        const valueAsNumber = asNumber(cell.value);
        if (valueAsNumber === 0) return this.size;
        if (valueAsNumber < 0) return -valueAsNumber * this.size;

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.63 CompoundType
     * @see {http://localhost/MS-VSDX.pdf#page=174}
     * @param {VisioCell} compoundType
     */
    set compoundType(compoundType) {
        this.attributeSet('compoundType');
        this._compoundType = compoundType;
    }

    /**
     * 2.4.4.63 CompoundType
     * @see {http://localhost/MS-VSDX.pdf#page=174}
     */
    get compoundType() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._compoundType;
        if (cell === undefined)
            cell = this.getParentCell('compoundType');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.64 ConFixedCode
     * @see {http://localhost/MS-VSDX.pdf#page=175}
     * @param {VisioCell} conFixedCode
     */
    set conFixedCode(conFixedCode) {
        this.attributeSet('conFixedCode');
        this._conFixedCode = conFixedCode;
    }

    /**
     * 2.4.4.64 ConFixedCode
     * @see {http://localhost/MS-VSDX.pdf#page=175}
     */
    get conFixedCode() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._conFixedCode;
        if (cell === undefined)
            cell = this.getParentCell('conFixedCode');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.65 ConLineJumpCode
     * @see {http://localhost/MS-VSDX.pdf#page=175}
     * @param {VisioCell} conLineJumpCode
     */
    set conLineJumpCode(conLineJumpCode) {
        this.attributeSet('conLineJumpCode');
        this._conLineJumpCode = conLineJumpCode;
    }

    /**
     * 2.4.4.65 ConLineJumpCode
     * @see {http://localhost/MS-VSDX.pdf#page=175}
     */
    get conLineJumpCode() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._conLineJumpCode;
        if (cell === undefined)
            cell = this.getParentCell('conLineJumpCode');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.66 ConLineJumpDirX
     * @see {http://localhost/MS-VSDX.pdf#page=175}
     * @param {VisioCell} conLineJumpDirX
     */
    set conLineJumpDirX(conLineJumpDirX) {
        this.attributeSet('conLineJumpDirX');
        this._conLineJumpDirX = conLineJumpDirX;
    }

    /**
     * 2.4.4.66 ConLineJumpDirX
     * @see {http://localhost/MS-VSDX.pdf#page=175}
     */
    get conLineJumpDirX() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._conLineJumpDirX;
        if (cell === undefined)
            cell = this.getParentCell('conLineJumpDirX');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.67 ConLineJumpDirY
     * @see {http://localhost/MS-VSDX.pdf#page=175}
     * @param {VisioCell} conLineJumpDirY
     */
    set conLineJumpDirY(conLineJumpDirY) {
        this.attributeSet('conLineJumpDirY');
        this._conLineJumpDirY = conLineJumpDirY;
    }

    /**
     * 2.4.4.67 ConLineJumpDirY
     * @see {http://localhost/MS-VSDX.pdf#page=175}
     */
    get conLineJumpDirY() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._conLineJumpDirY;
        if (cell === undefined)
            cell = this.getParentCell('conLineJumpDirY');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.68 ConLineJumpStyle
     * @see {http://localhost/MS-VSDX.pdf#page=175}
     * @param {VisioCell} conLineJumpStyle
     */
    set conLineJumpStyle(conLineJumpStyle) {
        this.attributeSet('conLineJumpStyle');
        this._conLineJumpStyle = conLineJumpStyle;
    }

    /**
     * 2.4.4.68 ConLineJumpStyle
     * @see {http://localhost/MS-VSDX.pdf#page=175}
     */
    get conLineJumpStyle() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._conLineJumpStyle;
        if (cell === undefined)
            cell = this.getParentCell('conLineJumpStyle');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.69 ConLineRouteExt
     * @see {http://localhost/MS-VSDX.pdf#page=175}
     * @param {VisioCell} conLineRouteExt
     */
    set conLineRouteExt(conLineRouteExt) {
        this.attributeSet('conLineRouteExt');
        this._conLineRouteExt = conLineRouteExt;
    }

    /**
     * 2.4.4.69 ConLineRouteExt
     * @see {http://localhost/MS-VSDX.pdf#page=175}
     */
    get conLineRouteExt() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._conLineRouteExt;
        if (cell === undefined)
            cell = this.getParentCell('conLineRouteExt');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.70 ConnectorSchemeIndex
     * @see {http://localhost/MS-VSDX.pdf#page=175}
     * @param {VisioCell} connectorSchemeIndex
     */
    set connectorSchemeIndex(connectorSchemeIndex) {
        this.attributeSet('connectorSchemeIndex');
        this._connectorSchemeIndex = connectorSchemeIndex;
    }

    /**
     * 2.4.4.70 ConnectorSchemeIndex
     * @see {http://localhost/MS-VSDX.pdf#page=175}
     */
    get connectorSchemeIndex() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._connectorSchemeIndex;
        if (cell === undefined)
            cell = this.getParentCell('connectorSchemeIndex');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.71 Contrast
     * @see {http://localhost/MS-VSDX.pdf#page=175}
     * @param {VisioCell} contrast
     */
    set contrast(contrast) {
        this.attributeSet('contrast');
        this._contrast = contrast;
    }

    /**
     * 2.4.4.71 Contrast
     * @see {http://localhost/MS-VSDX.pdf#page=175}
     */
    get contrast() {
        const visioType = VisioValueType.vScalar;
        let cell = this._contrast;
        if (cell === undefined)
            cell = this.getParentCell('contrast');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.72 Copyright
     * @see {http://localhost/MS-VSDX.pdf#page=176}
     * @param {VisioCell} copyright
     */
    set copyright(copyright) {
        this.attributeSet('copyright');
        this._copyright = copyright;
    }

    /**
     * 2.4.4.72 Copyright
     * @see {http://localhost/MS-VSDX.pdf#page=176}
     */
    get copyright() {
        const visioType = VisioValueType.PtgString;
        let cell = this._copyright;
        if (cell === undefined)
            cell = this.getParentCell('copyright');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.73 CtrlAsInput
     * @see {http://localhost/MS-VSDX.pdf#page=176}
     * @param {VisioCell} ctrlAsInput
     */
    set ctrlAsInput(ctrlAsInput) {
        this.attributeSet('ctrlAsInput');
        this._ctrlAsInput = ctrlAsInput;
    }

    /**
     * 2.4.4.73 CtrlAsInput
     * @see {http://localhost/MS-VSDX.pdf#page=176}
     */
    get ctrlAsInput() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._ctrlAsInput;
        if (cell === undefined)
            cell = this.getParentCell('ctrlAsInput');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.74 CurrentIndex
     * @see {http://localhost/MS-VSDX.pdf#page=176}
     * @param {VisioCell} currentIndex
     */
    set currentIndex(currentIndex) {
        this.attributeSet('currentIndex');
        this._currentIndex = currentIndex;
    }

    /**
     * 2.4.4.74 CurrentIndex
     * @see {http://localhost/MS-VSDX.pdf#page=176}
     */
    get currentIndex() {
        const visioType = VisioValueType.PtgShort;
        let cell = this._currentIndex;
        if (cell === undefined)
            cell = this.getParentCell('currentIndex');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.75 D
     * @see {http://localhost/MS-VSDX.pdf#page=176}
     * @param {VisioCell} d
     */
    set d(d) {
        this.attributeSet('d');
        this._d = d;
    }

    /**
     * 2.4.4.75 D
     * @see {http://localhost/MS-VSDX.pdf#page=176}
     */
    get d() {
        let visioType;

        if (this.isDescendantOfSectionType([VisioSectionType.Scratch]))
            visioType = VisioValueType.vAny;
        else
            switch (this.getRowType()) {
                case VisioRowType.Ellipse:
                    visioType = VisioValueType.vLength;
                    break;
                case VisioRowType.EllipticalArcTo:
                case VisioRowType.RelCubBezTo:
                case VisioRowType.RelEllipticalArcTo:
                case VisioRowType.NURBSTo:
                case VisioRowType.SplineStart:
                    visioType = VisioValueType.vScalar;
                    break;
                default:
                    debug.log('Incorrect cell type',
                        { attributeName: 'd', cells: this });
            }

        let cell = this._d;
        if (cell === undefined)
            cell = this.getParentCell('d');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.76 DataLinked
     * @see {http://localhost/MS-VSDX.pdf#page=176}
     * @param {VisioCell} dataLinked
     */
    set dataLinked(dataLinked) {
        this.attributeSet('dataLinked');
        this._dataLinked = dataLinked;
    }

    /**
     * 2.4.4.76 DataLinked
     * @see {http://localhost/MS-VSDX.pdf#page=176}
     */
    get dataLinked() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._dataLinked;
        if (cell === undefined)
            cell = this.getParentCell('dataLinked');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.77 DblUnderline
     * @see {http://localhost/MS-VSDX.pdf#page=176}
     * @param {VisioCell} dblUnderline
     */
    set dblUnderline(dblUnderline) {
        this.attributeSet('dblUnderline');
        this._dblUnderline = dblUnderline;
    }

    /**
     * 2.4.4.77 DblUnderline
     * @see {http://localhost/MS-VSDX.pdf#page=176}
     */
    get dblUnderline() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._dblUnderline;
        if (cell === undefined)
            cell = this.getParentCell('dblUnderline');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.78 Default
     * @see {http://localhost/MS-VSDX.pdf#page=176}
     * @param {VisioCell} __default
     */
    set __default(__default) {
        this.attributeSet('__default');
        this.___default = __default;
    }

    /**
     * 2.4.4.78 Default
     * @see {http://localhost/MS-VSDX.pdf#page=176}
     */
    get __default() {
        const visioType = VisioValueType.PtgBool;
        let cell = this.___default;
        if (cell === undefined)
            cell = this.getParentCell('__default');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.79 DefaultTabStop
     * @see {http://localhost/MS-VSDX.pdf#page=177}
     * @param {VisioCell} defaultTabStop
     */
    set defaultTabStop(defaultTabStop) {
        this.attributeSet('defaultTabStop');
        this._defaultTabStop = defaultTabStop;
    }

    /**
     * 2.4.4.79 DefaultTabStop
     * @see {http://localhost/MS-VSDX.pdf#page=177}
     */
    get defaultTabStop() {
        const visioType = VisioValueType.vLength;
        let cell = this._defaultTabStop;
        if (cell === undefined)
            cell = this.getParentCell('defaultTabStop');
        if (cell === undefined)
            cell = this.getStylesheetTextStyleCell('defaultTabStop');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.80 Denoise
     * @see {http://localhost/MS-VSDX.pdf#page=177}
     * @param {VisioCell} denoise
     */
    set denoise(denoise) {
        this.attributeSet('denoise');
        this._denoise = denoise;
    }

    /**
     * 2.4.4.80 Denoise
     * @see {http://localhost/MS-VSDX.pdf#page=177}
     */
    get denoise() {
        const visioType = VisioValueType.vScalar;
        let cell = this._denoise;
        if (cell === undefined)
            cell = this.getParentCell('denoise');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.81 Description
     * @see {http://localhost/MS-VSDX.pdf#page=177}
     * @param {VisioCell} description
     */
    set description(description) {
        this.attributeSet('description');
        this._description = description;
    }

    /**
     * 2.4.4.81 Description
     * @see {http://localhost/MS-VSDX.pdf#page=177}
     */
    get description() {
        const visioType = VisioValueType.PtgString;
        let cell = this._description;
        if (cell === undefined)
            cell = this.getParentCell('description');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.82 DirX
     * @see {http://localhost/MS-VSDX.pdf#page=177}
     * @param {VisioCell} dirX
     */
    set dirX(dirX) {
        this.attributeSet('dirX');
        this._dirX = dirX;
    }

    /**
     * 2.4.4.82 DirX
     * @see {http://localhost/MS-VSDX.pdf#page=177}
     */
    get dirX() {
        const visioType = VisioValueType.vLength;
        let cell = this._dirX;
        if (cell === undefined)
            cell = this.getParentCell('dirX');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.83 DirY
     * @see {http://localhost/MS-VSDX.pdf#page=177}
     * @param {VisioCell} dirY
     */
    set dirY(dirY) {
        this.attributeSet('dirY');
        this._dirY = dirY;
    }

    /**
     * 2.4.4.83 DirY
     * @see {http://localhost/MS-VSDX.pdf#page=177}
     */
    get dirY() {
        const visioType = VisioValueType.vLength;
        let cell = this._dirY;
        if (cell === undefined)
            cell = this.getParentCell('dirY');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.84 Disabled
     * @see {http://localhost/MS-VSDX.pdf#page=177}
     * @param {VisioCell} disabled
     */
    set disabled(disabled) {
        this.attributeSet('disabled');
        this._disabled = disabled;
    }

    /**
     * 2.4.4.84 Disabled
     * @see {http://localhost/MS-VSDX.pdf#page=177}
     */
    get disabled() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._disabled;
        if (cell === undefined)
            cell = this.getParentCell('disabled');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.85 DisplayLevel
     * @see {http://localhost/MS-VSDX.pdf#page=177}
     * @param {VisioCell} displayLevel
     */
    set displayLevel(displayLevel) {
        this.attributeSet('displayLevel');
        this._displayLevel = displayLevel;
    }

    /**
     * 2.4.4.85 DisplayLevel
     * @see {http://localhost/MS-VSDX.pdf#page=177}
     */
    get displayLevel() {
        const visioType = VisioValueType.PtgInt;
        let cell = this._displayLevel;
        if (cell === undefined)
            cell = this.getParentCell('displayLevel');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.86 DisplayMode
     * @see {http://localhost/MS-VSDX.pdf#page=177}
     * @param {VisioCell} displayMode
     */
    set displayMode(displayMode) {
        this.attributeSet('displayMode');
        this._displayMode = displayMode;
    }

    /**
     * 2.4.4.86 DisplayMode
     * @see {http://localhost/MS-VSDX.pdf#page=177}
     */
    get displayMode() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._displayMode;
        if (cell === undefined)
            cell = this.getParentCell('displayMode');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.87 DistanceFromGround
     * @see {http://localhost/MS-VSDX.pdf#page=178}
     * @param {VisioCell} distanceFromGround
     */
    set distanceFromGround(distanceFromGround) {
        this.attributeSet('distanceFromGround');
        this._distanceFromGround = distanceFromGround;
    }

    /**
     * 2.4.4.87 DistanceFromGround
     * @see {http://localhost/MS-VSDX.pdf#page=178}
     */
    get distanceFromGround() {
        const visioType = VisioValueType.vLength;
        let cell = this._distanceFromGround;
        if (cell === undefined)
            cell = this.getParentCell('distanceFromGround');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.88 DocLangID
     * @see {http://localhost/MS-VSDX.pdf#page=178}
     * @param {VisioCell} docLangID
     */
    set docLangID(docLangID) {
        this.attributeSet('docLangID');
        this._docLangID = docLangID;
    }

    /**
     * 2.4.4.88 DocLangID
     * @see {http://localhost/MS-VSDX.pdf#page=178}
     */
    get docLangID() {
        const visioType = VisioValueType.vLanguageString;
        let cell = this._docLangID;
        if (cell === undefined)
            cell = this.getParentCell('docLangID');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.89 DocLockDuplicatePage
     * @see {http://localhost/MS-VSDX.pdf#page=178}
     * @param {VisioCell} docLockDuplicatePage
     */
    set docLockDuplicatePage(docLockDuplicatePage) {
        this.attributeSet('docLockDuplicatePage');
        this._docLockDuplicatePage = docLockDuplicatePage;
    }

    /**
     * 2.4.4.89 DocLockDuplicatePage
     * @see {http://localhost/MS-VSDX.pdf#page=178}
     */
    get docLockDuplicatePage() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._docLockDuplicatePage;
        if (cell === undefined)
            cell = this.getParentCell('docLockDuplicatePage');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.90 DocLockReplace
     * @see {http://localhost/MS-VSDX.pdf#page=178}
     * @param {VisioCell} docLockReplace
     */
    set docLockReplace(docLockReplace) {
        this.attributeSet('docLockReplace');
        this._docLockReplace = docLockReplace;
    }

    /**
     * 2.4.4.90 DocLockReplace
     * @see {http://localhost/MS-VSDX.pdf#page=178}
     */
    get docLockReplace() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._docLockReplace;
        if (cell === undefined)
            cell = this.getParentCell('docLockReplace');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.91 DontMoveChildren
     * @see {http://localhost/MS-VSDX.pdf#page=178}
     * @param {VisioCell} dontMoveChildren
     */
    set dontMoveChildren(dontMoveChildren) {
        this.attributeSet('dontMoveChildren');
        this._dontMoveChildren = dontMoveChildren;
    }

    /**
     * 2.4.4.91 DontMoveChildren
     * @see {http://localhost/MS-VSDX.pdf#page=178}
     */
    get dontMoveChildren() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._dontMoveChildren;
        if (cell === undefined)
            cell = this.getParentCell('dontMoveChildren');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.92 DoubleStrikethrough
     * @see {http://localhost/MS-VSDX.pdf#page=178}
     * @param {VisioCell} doubleStrikethrough
     */
    set doubleStrikethrough(doubleStrikethrough) {
        this.attributeSet('doubleStrikethrough');
        this._doubleStrikethrough = doubleStrikethrough;
    }

    /**
     * 2.4.4.92 DoubleStrikethrough
     * @see {http://localhost/MS-VSDX.pdf#page=178}
     */
    get doubleStrikethrough() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._doubleStrikethrough;
        if (cell === undefined)
            cell = this.getParentCell('doubleStrikethrough');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.93 DrawingResizeType
     * @see {http://localhost/MS-VSDX.pdf#page=179}
     * @param {VisioCell} drawingResizeType
     */
    set drawingResizeType(drawingResizeType) {
        this.attributeSet('drawingResizeType');
        this._drawingResizeType = drawingResizeType;
    }

    /**
     * 2.4.4.93 DrawingResizeType
     * @see {http://localhost/MS-VSDX.pdf#page=179}
     */
    get drawingResizeType() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._drawingResizeType;
        if (cell === undefined)
            cell = this.getParentCell('drawingResizeType');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.94 DrawingScale
     * @see {http://localhost/MS-VSDX.pdf#page=179}
     * @param {VisioCell} drawingScale
     */
    set drawingScale(drawingScale) {
        this.attributeSet('drawingScale');
        this._drawingScale = drawingScale;
    }

    /**
     * 2.4.4.94 DrawingScale
     * @see {http://localhost/MS-VSDX.pdf#page=179}
     */
    get drawingScale() {
        const visioType = VisioValueType.vLength;
        let cell = this._drawingScale;
        if (cell === undefined)
            cell = this.getParentCell('drawingScale');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.95 DrawingScaleType
     * @see {http://localhost/MS-VSDX.pdf#page=179}
     * @param {VisioCell} drawingScaleType
     */
    set drawingScaleType(drawingScaleType) {
        this.attributeSet('drawingScaleType');
        this._drawingScaleType = drawingScaleType;
    }

    /**
     * 2.4.4.95 DrawingScaleType
     * @see {http://localhost/MS-VSDX.pdf#page=179}
     */
    get drawingScaleType() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._drawingScaleType;
        if (cell === undefined)
            cell = this.getParentCell('drawingScaleType');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.96 DrawingSizeType
     * @see {http://localhost/MS-VSDX.pdf#page=179}
     * @param {VisioCell} drawingSizeType
     */
    set drawingSizeType(drawingSizeType) {
        this.attributeSet('drawingSizeType');
        this._drawingSizeType = drawingSizeType;
    }

    /**
     * 2.4.4.96 DrawingSizeType
     * @see {http://localhost/MS-VSDX.pdf#page=179}
     */
    get drawingSizeType() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._drawingSizeType;
        if (cell === undefined)
            cell = this.getParentCell('drawingSizeType');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.97 DropOnPageScale
     * @see {http://localhost/MS-VSDX.pdf#page=180}
     * @param {VisioCell} dropOnPageScale
     */
    set dropOnPageScale(dropOnPageScale) {
        this.attributeSet('dropOnPageScale');
        this._dropOnPageScale = dropOnPageScale;
    }

    /**
     * 2.4.4.97 DropOnPageScale
     * @see {http://localhost/MS-VSDX.pdf#page=180}
     */
    get dropOnPageScale() {
        const visioType = VisioValueType.vScalar;
        let cell = this._dropOnPageScale;
        if (cell === undefined)
            cell = this.getParentCell('dropOnPageScale');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.98 DynamicsOff
     * @see {http://localhost/MS-VSDX.pdf#page=180}
     * @param {VisioCell} dynamicsOff
     */
    set dynamicsOff(dynamicsOff) {
        this.attributeSet('dynamicsOff');
        this._dynamicsOff = dynamicsOff;
    }

    /**
     * 2.4.4.98 DynamicsOff
     * @see {http://localhost/MS-VSDX.pdf#page=180}
     */
    get dynamicsOff() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._dynamicsOff;
        if (cell === undefined)
            cell = this.getParentCell('dynamicsOff');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.99 DynFeedback
     * @see {http://localhost/MS-VSDX.pdf#page=180}
     * @param {VisioCell} dynFeedback
     */
    set dynFeedback(dynFeedback) {
        this.attributeSet('dynFeedback');
        this._dynFeedback = dynFeedback;
    }

    /**
     * 2.4.4.99 DynFeedback
     * @see {http://localhost/MS-VSDX.pdf#page=180}
     */
    get dynFeedback() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._dynFeedback;
        if (cell === undefined)
            cell = this.getParentCell('dynFeedback');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.100 E
     * @see {http://localhost/MS-VSDX.pdf#page=180}
     * @param {VisioCell} e
     */
    set e(e) {
        this.attributeSet('e');
        this._e = e;
    }

    /**
     * 2.4.4.100 E
     * @see {http://localhost/MS-VSDX.pdf#page=180}
     */
    get e() {
        const visioType = VisioValueType.formulaExpression;
        let cell = this._e;
        if (cell === undefined)
            cell = this.getParentCell('e');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.101 EffectSchemeIndex
     * @see {http://localhost/MS-VSDX.pdf#page=180}
     * @param {VisioCell} effectSchemeIndex
     */
    set effectSchemeIndex(effectSchemeIndex) {
        this.attributeSet('effectSchemeIndex');
        this._effectSchemeIndex = effectSchemeIndex;
    }

    /**
     * 2.4.4.101 EffectSchemeIndex
     * @see {http://localhost/MS-VSDX.pdf#page=180}
     */
    get effectSchemeIndex() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._effectSchemeIndex;
        if (cell === undefined)
            cell = this.getParentCell('effectSchemeIndex');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.102 EmbellishmentIndex
     * @see {http://localhost/MS-VSDX.pdf#page=180}
     * @param {VisioCell} embellishmentIndex
     */
    set embellishmentIndex(embellishmentIndex) {
        this.attributeSet('embellishmentIndex');
        this._embellishmentIndex = embellishmentIndex;
    }

    /**
     * 2.4.4.102 EmbellishmentIndex
     * @see {http://localhost/MS-VSDX.pdf#page=180}
     */
    get embellishmentIndex() {
        const visioType = VisioValueType.PtgInt;
        let cell = this._embellishmentIndex;
        if (cell === undefined)
            cell = this.getParentCell('embellishmentIndex');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.103 EnableFillProps
     * @see {http://localhost/MS-VSDX.pdf#page=180}
     * @param {VisioCell} enableFillProps
     */
    set enableFillProps(enableFillProps) {
        this.attributeSet('enableFillProps');
        this._enableFillProps = enableFillProps;
    }

    /**
     * 2.4.4.103 EnableFillProps
     * @see {http://localhost/MS-VSDX.pdf#page=180}
     */
    get enableFillProps() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._enableFillProps;
        if (cell === undefined)
            cell = this.getParentCell('enableFillProps');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.104 EnableGrid
     * @see {http://localhost/MS-VSDX.pdf#page=181}
     * @param {VisioCell} enableGrid
     */
    set enableGrid(enableGrid) {
        this.attributeSet('enableGrid');
        this._enableGrid = enableGrid;
    }

    /**
     * 2.4.4.104 EnableGrid
     * @see {http://localhost/MS-VSDX.pdf#page=181}
     */
    get enableGrid() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._enableGrid;
        if (cell === undefined)
            cell = this.getParentCell('enableGrid');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.105 EnableLineProps
     * @see {http://localhost/MS-VSDX.pdf#page=181}
     * @param {VisioCell} enableLineProps
     */
    set enableLineProps(enableLineProps) {
        this.attributeSet('enableLineProps');
        this._enableLineProps = enableLineProps;
    }

    /**
     * 2.4.4.105 EnableLineProps
     * @see {http://localhost/MS-VSDX.pdf#page=181}
     */
    get enableLineProps() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._enableLineProps;
        if (cell === undefined)
            cell = this.getParentCell('enableLineProps');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.106 EnableTextProps
     * @see {http://localhost/MS-VSDX.pdf#page=181}
     * @param {VisioCell} enableTextProps
     */
    set enableTextProps(enableTextProps) {
        this.attributeSet('enableTextProps');
        this._enableTextProps = enableTextProps;
    }

    /**
     * 2.4.4.106 EnableTextProps
     * @see {http://localhost/MS-VSDX.pdf#page=181}
     */
    get enableTextProps() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._enableTextProps;
        if (cell === undefined)
            cell = this.getParentCell('enableTextProps');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.107 EndArrow
     * @see {http://localhost/MS-VSDX.pdf#page=181}
     * @param {VisioCell} endArrow
     */
    set endArrow(endArrow) {
        this.attributeSet('endArrow');
        this._endArrow = endArrow;
    }

    /**
     * 2.4.4.107 EndArrow
     * @see {http://localhost/MS-VSDX.pdf#page=181}
     */
    get endArrow() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._endArrow;
        if (cell === undefined)
            cell = this.getParentCell('endArrow');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.108 EndArrowSize
     * @see {http://localhost/MS-VSDX.pdf#page=181}
     * @param {VisioCell} endArrowSize
     */
    set endArrowSize(endArrowSize) {
        this.attributeSet('endArrowSize');
        this._endArrowSize = endArrowSize;
    }

    /**
     * 2.4.4.108 EndArrowSize
     * @see {http://localhost/MS-VSDX.pdf#page=181}
     */
    get endArrowSize() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._endArrowSize;
        if (cell === undefined)
            cell = this.getParentCell('endArrowSize');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.109 EndTrigger
     * @see {http://localhost/MS-VSDX.pdf#page=182}
     * @param {VisioCell} endTrigger
     */
    set endTrigger(endTrigger) {
        this.attributeSet('endTrigger');
        this._endTrigger = endTrigger;
    }

    /**
     * 2.4.4.109 EndTrigger
     * @see {http://localhost/MS-VSDX.pdf#page=182}
     */
    get endTrigger() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._endTrigger;
        if (cell === undefined)
            cell = this.getParentCell('endTrigger');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.110 EndX
     * @see {http://localhost/MS-VSDX.pdf#page=182}
     * @param {VisioCell} endX
     */
    set endX(endX) {
        this.attributeSet('endX');
        this._endX = endX;
    }

    /**
     * 2.4.4.110 EndX
     * @see {http://localhost/MS-VSDX.pdf#page=182}
     */
    get endX() {
        const visioType = VisioValueType.vLength;
        let cell = this._endX;
        if (cell === undefined)
            cell = this.getParentCell('endX');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.111 EndY
     * @see {http://localhost/MS-VSDX.pdf#page=182}
     * @param {VisioCell} endY
     */
    set endY(endY) {
        this.attributeSet('endY');
        this._endY = endY;
    }

    /**
     * 2.4.4.111 EndY
     * @see {http://localhost/MS-VSDX.pdf#page=182}
     */
    get endY() {
        const visioType = VisioValueType.vLength;
        let cell = this._endY;
        if (cell === undefined)
            cell = this.getParentCell('endY');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.112 EventDblClick
     * @see {http://localhost/MS-VSDX.pdf#page=182}
     * @param {VisioCell} eventDblClick
     */
    set eventDblClick(eventDblClick) {
        this.attributeSet('eventDblClick');
        this._eventDblClick = eventDblClick;
    }

    /**
     * 2.4.4.112 EventDblClick
     * @see {http://localhost/MS-VSDX.pdf#page=182}
     */
    get eventDblClick() {
        const visioType = VisioValueType.vScalar;
        let cell = this._eventDblClick;
        if (cell === undefined)
            cell = this.getParentCell('eventDblClick');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.113 EventDrop
     * @see {http://localhost/MS-VSDX.pdf#page=182}
     * @param {VisioCell} eventDrop
     */
    set eventDrop(eventDrop) {
        this.attributeSet('eventDrop');
        this._eventDrop = eventDrop;
    }

    /**
     * 2.4.4.113 EventDrop
     * @see {http://localhost/MS-VSDX.pdf#page=182}
     */
    get eventDrop() {
        const visioType = VisioValueType.vScalar;
        let cell = this._eventDrop;
        if (cell === undefined)
            cell = this.getParentCell('eventDrop');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.114 EventMultiDrop
     * @see {http://localhost/MS-VSDX.pdf#page=182}
     * @param {VisioCell} eventMultiDrop
     */
    set eventMultiDrop(eventMultiDrop) {
        this.attributeSet('eventMultiDrop');
        this._eventMultiDrop = eventMultiDrop;
    }

    /**
     * 2.4.4.114 EventMultiDrop
     * @see {http://localhost/MS-VSDX.pdf#page=182}
     */
    get eventMultiDrop() {
        const visioType = VisioValueType.vScalar;
        let cell = this._eventMultiDrop;
        if (cell === undefined)
            cell = this.getParentCell('eventMultiDrop');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.115 EventXFMod
     * @see {http://localhost/MS-VSDX.pdf#page=182}
     * @param {VisioCell} eventXFMod
     */
    set eventXFMod(eventXFMod) {
        this.attributeSet('eventXFMod');
        this._eventXFMod = eventXFMod;
    }

    /**
     * 2.4.4.115 EventXFMod
     * @see {http://localhost/MS-VSDX.pdf#page=182}
     */
    get eventXFMod() {
        const visioType = VisioValueType.vScalar;
        let cell = this._eventXFMod;
        if (cell === undefined)
            cell = this.getParentCell('eventXFMod');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.116 ExtraInfo
     * @see {http://localhost/MS-VSDX.pdf#page=182}
     * @param {VisioCell} extraInfo
     */
    set extraInfo(extraInfo) {
        this.attributeSet('extraInfo');
        this._extraInfo = extraInfo;
    }

    /**
     * 2.4.4.116 ExtraInfo
     * @see {http://localhost/MS-VSDX.pdf#page=182}
     */
    get extraInfo() {
        const visioType = VisioValueType.PtgString;
        let cell = this._extraInfo;
        if (cell === undefined)
            cell = this.getParentCell('extraInfo');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.117 FillBkgnd
     * @see {http://localhost/MS-VSDX.pdf#page=183}
     * @param {VisioCell} fillBkgnd
     */
    set fillBkgnd(fillBkgnd) {
        this.attributeSet('fillBkgnd');
        this._fillBkgnd = fillBkgnd;
    }

    /**
     * 2.4.4.117 FillBkgnd
     * @see {http://localhost/MS-VSDX.pdf#page=183}
     */
    get fillBkgnd() {
        const visioType = VisioValueType.vColor;
        let cell = this._fillBkgnd;
        if (cell === undefined)
            cell = this.getParentCell('fillBkgnd');
        if (cell === undefined)
            cell = this.getStylesheetFillStyleCell('fillBkgnd');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.118 FillBkgndTrans
     * @see {http://localhost/MS-VSDX.pdf#page=183}
     * @param {VisioCell} fillBkgndTrans
     */
    set fillBkgndTrans(fillBkgndTrans) {
        this.attributeSet('fillBkgndTrans');
        this._fillBkgndTrans = fillBkgndTrans;
    }

    /**
     * 2.4.4.118 FillBkgndTrans
     * @see {http://localhost/MS-VSDX.pdf#page=183}
     */
    get fillBkgndTrans() {
        const visioType = VisioValueType.vScalar;
        let cell = this._fillBkgndTrans;
        if (cell === undefined)
            cell = this.getParentCell('fillBkgndTrans');
        if (cell === undefined)
            cell = this.getStylesheetFillStyleCell('fillBkgndTrans');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.119 FillForegnd
     * @see {http://localhost/MS-VSDX.pdf#page=183}
     * @param {VisioCell} fillForegnd
     */
    set fillForegnd(fillForegnd) {
        this.attributeSet('fillForegnd');
        this._fillForegnd = fillForegnd;
    }

    /**
     * 2.4.4.119 FillForegnd
     * @see {http://localhost/MS-VSDX.pdf#page=183}
     */
    get fillForegnd() {
        const visioType = VisioValueType.vColor;
        let cell = this._fillForegnd;
        if (cell === undefined)
            cell = this.getParentCell('fillForegnd');
        if (cell === undefined)
            cell = this.getStylesheetFillStyleCell('fillForegnd');


        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.120 FillForegndTrans
     * @see {http://localhost/MS-VSDX.pdf#page=183}
     * @param {VisioCell} fillForegndTrans
     */
    set fillForegndTrans(fillForegndTrans) {
        this.attributeSet('fillForegndTrans');
        this._fillForegndTrans = fillForegndTrans;
    }

    /**
     * 2.4.4.120 FillForegndTrans
     * @see {http://localhost/MS-VSDX.pdf#page=183}
     */
    get fillForegndTrans() {
        const visioType = VisioValueType.vScalar;
        let cell = this._fillForegndTrans;
        if (cell === undefined)
            cell = this.getParentCell('fillForegndTrans');
        if (cell === undefined)
            cell = this.getStylesheetFillStyleCell('fillForegndTrans');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.121 FillGradientAngle
     * @see {http://localhost/MS-VSDX.pdf#page=183}
     * @param {VisioCell} fillGradientAngle
     */
    set fillGradientAngle(fillGradientAngle) {
        this.attributeSet('fillGradientAngle');
        this._fillGradientAngle = fillGradientAngle;
    }

    /**
     * 2.4.4.121 FillGradientAngle
     * @see {http://localhost/MS-VSDX.pdf#page=183}
     */
    get fillGradientAngle() {
        const visioType = VisioValueType.vAngle;
        let cell = this._fillGradientAngle;
        if (cell === undefined)
            cell = this.getParentCell('fillGradientAngle');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.122 FillGradientDir
     * @see {http://localhost/MS-VSDX.pdf#page=183}
     * @param {VisioCell} fillGradientDir
     */
    set fillGradientDir(fillGradientDir) {
        this.attributeSet('fillGradientDir');
        this._fillGradientDir = fillGradientDir;
    }

    /**
     * 2.4.4.122 FillGradientDir
     * @see {http://localhost/MS-VSDX.pdf#page=183}
     */
    get fillGradientDir() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._fillGradientDir;
        if (cell === undefined)
            cell = this.getParentCell('fillGradientDir');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.123 FillGradientEnabled
     * @see {http://localhost/MS-VSDX.pdf#page=184}
     * @param {VisioCell} fillGradientEnabled
     */
    set fillGradientEnabled(fillGradientEnabled) {
        this.attributeSet('fillGradientEnabled');
        this._fillGradientEnabled = fillGradientEnabled;
    }

    /**
     * 2.4.4.123 FillGradientEnabled
     * @see {http://localhost/MS-VSDX.pdf#page=184}
     */
    get fillGradientEnabled() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._fillGradientEnabled;
        if (cell === undefined)
            cell = this.getParentCell('fillGradientEnabled');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.124 FillPattern
     * @see {http://localhost/MS-VSDX.pdf#page=184}
     * @param {VisioCell} fillPattern
     */
    set fillPattern(fillPattern) {
        this.attributeSet('fillPattern');
        this._fillPattern = fillPattern;
    }

    /**
     * 2.4.4.124 FillPattern
     * @see {http://localhost/MS-VSDX.pdf#page=184}
     */
    get fillPattern() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._fillPattern;
        if (cell === undefined)
            cell = this.getParentCell('fillPattern');
        if (cell === undefined)
            cell = this.getStylesheetFillStyleCell('fillPattern');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.125 Flags
     * @see {http://localhost/MS-VSDX.pdf#page=187}
     * @param {VisioCell} flags
     */
    set flags(flags) {
        this.attributeSet('flags');
        this._flags = flags;
    }

    /**
     * 2.4.4.125 Flags
     * @see {http://localhost/MS-VSDX.pdf#page=187}
     */
    get flags() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._flags;
        if (cell === undefined)
            cell = this.getParentCell('flags');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.126 FlipX
     * @see {http://localhost/MS-VSDX.pdf#page=187}
     * @param {VisioCell} flipX
     */
    set flipX(flipX) {
        this.attributeSet('flipX');
        this._flipX = flipX;
    }

    /**
     * 2.4.4.126 FlipX
     * @see {http://localhost/MS-VSDX.pdf#page=187}
     */
    get flipX() {
        const visioType = VisioValueType.vScalar;
        let cell = this._flipX;
        if (cell === undefined)
            cell = this.getParentCell('flipX');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.127 FlipY
     * @see {http://localhost/MS-VSDX.pdf#page=187}
     * @param {VisioCell} flipY
     */
    set flipY(flipY) {
        this.attributeSet('flipY');
        this._flipY = flipY;
    }

    /**
     * 2.4.4.127 FlipY
     * @see {http://localhost/MS-VSDX.pdf#page=187}
     */
    get flipY() {
        const visioType = VisioValueType.vScalar;
        let cell = this._flipY;
        if (cell === undefined)
            cell = this.getParentCell('flipY');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.128 FlyoutChild
     * @see {http://localhost/MS-VSDX.pdf#page=187}
     * @param {VisioCell} flyoutChild
     */
    set flyoutChild(flyoutChild) {
        this.attributeSet('flyoutChild');
        this._flyoutChild = flyoutChild;
    }

    /**
     * 2.4.4.128 FlyoutChild
     * @see {http://localhost/MS-VSDX.pdf#page=187}
     */
    get flyoutChild() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._flyoutChild;
        if (cell === undefined)
            cell = this.getParentCell('flyoutChild');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.129 Font
     * @see {http://localhost/MS-VSDX.pdf#page=187}
     * @param {VisioCell} font
     */
    set font(font) {
        this.attributeSet('font');
        this._font = font;
    }

    /**
     * 2.4.4.129 Font
     * @see {http://localhost/MS-VSDX.pdf#page=187}
     */
    get font() {
        const visioType = VisioValueType.vFont;
        let cell = this._font;
        if (cell === undefined)
            cell = this.getParentCell('font');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.130 FontScale
     * @see {http://localhost/MS-VSDX.pdf#page=187}
     * @param {VisioCell} fontScale
     */
    set fontScale(fontScale) {
        this.attributeSet('fontScale');
        this._fontScale = fontScale;
    }

    /**
     * 2.4.4.130 FontScale
     * @see {http://localhost/MS-VSDX.pdf#page=187}
     */
    get fontScale() {
        const visioType = VisioValueType.vScalar;
        let cell = this._fontScale;
        if (cell === undefined)
            cell = this.getParentCell('fontScale');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.131 FontSchemeIndex
     * @see {http://localhost/MS-VSDX.pdf#page=188}
     * @param {VisioCell} fontSchemeIndex
     */
    set fontSchemeIndex(fontSchemeIndex) {
        this.attributeSet('fontSchemeIndex');
        this._fontSchemeIndex = fontSchemeIndex;
    }

    /**
     * 2.4.4.131 FontSchemeIndex
     * @see {http://localhost/MS-VSDX.pdf#page=188}
     */
    get fontSchemeIndex() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._fontSchemeIndex;
        if (cell === undefined)
            cell = this.getParentCell('fontSchemeIndex');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.132 Format
     * @see {http://localhost/MS-VSDX.pdf#page=188}
     * @param {VisioCell} format
     */
    set format(format) {
        this.attributeSet('format');
        this._format = format;
    }

    /**
     * 2.4.4.132 Format
     * @see {http://localhost/MS-VSDX.pdf#page=188}
     */
    get format() {
        const visioType = VisioValueType.vFormatString;
        let cell = this._format;
        if (cell === undefined)
            cell = this.getParentCell('format');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.133 Frame
     * @see {http://localhost/MS-VSDX.pdf#page=188}
     * @param {VisioCell} frame
     */
    set frame(frame) {
        this.attributeSet('frame');
        this._frame = frame;
    }

    /**
     * 2.4.4.133 Frame
     * @see {http://localhost/MS-VSDX.pdf#page=188}
     */
    get frame() {
        const visioType = VisioValueType.PtgString;
        let cell = this._frame;
        if (cell === undefined)
            cell = this.getParentCell('frame');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.134 Gamma
     * @see {http://localhost/MS-VSDX.pdf#page=188}
     * @param {VisioCell} gamma
     */
    set gamma(gamma) {
        this.attributeSet('gamma');
        this._gamma = gamma;
    }

    /**
     * 2.4.4.134 Gamma
     * @see {http://localhost/MS-VSDX.pdf#page=188}
     */
    get gamma() {
        const visioType = VisioValueType.vScalar;
        let cell = this._gamma;
        if (cell === undefined)
            cell = this.getParentCell('gamma');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.135 GlowColor
     * @see {http://localhost/MS-VSDX.pdf#page=188}
     * @param {VisioCell} glowColor
     */
    set glowColor(glowColor) {
        this.attributeSet('glowColor');
        this._glowColor = glowColor;
    }

    /**
     * 2.4.4.135 GlowColor
     * @see {http://localhost/MS-VSDX.pdf#page=188}
     */
    get glowColor() {
        const visioType = VisioValueType.vColor;
        let cell = this._glowColor;
        if (cell === undefined)
            cell = this.getParentCell('glowColor');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.136 GlowColorTrans
     * @see {http://localhost/MS-VSDX.pdf#page=188}
     * @param {VisioCell} glowColorTrans
     */
    set glowColorTrans(glowColorTrans) {
        this.attributeSet('glowColorTrans');
        this._glowColorTrans = glowColorTrans;
    }

    /**
     * 2.4.4.136 GlowColorTrans
     * @see {http://localhost/MS-VSDX.pdf#page=188}
     */
    get glowColorTrans() {
        const visioType = VisioValueType.vScalar;
        let cell = this._glowColorTrans;
        if (cell === undefined)
            cell = this.getParentCell('glowColorTrans');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.137 GlowSize
     * @see {http://localhost/MS-VSDX.pdf#page=188}
     * @param {VisioCell} glowSize
     */
    set glowSize(glowSize) {
        this.attributeSet('glowSize');
        this._glowSize = glowSize;
    }

    /**
     * 2.4.4.137 GlowSize
     * @see {http://localhost/MS-VSDX.pdf#page=188}
     */
    get glowSize() {
        const visioType = VisioValueType.vLength;
        let cell = this._glowSize;
        if (cell === undefined)
            cell = this.getParentCell('glowSize');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.138 Glue
     * @see {http://localhost/MS-VSDX.pdf#page=189}
     * @param {VisioCell} glue
     */
    set glue(glue) {
        this.attributeSet('glue');
        this._glue = glue;
    }

    /**
     * 2.4.4.138 Glue
     * @see {http://localhost/MS-VSDX.pdf#page=189}
     */
    get glue() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._glue;
        if (cell === undefined)
            cell = this.getParentCell('glue');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.139 GlueType
     * @see {http://localhost/MS-VSDX.pdf#page=189}
     * @param {VisioCell} glueType
     */
    set glueType(glueType) {
        this.attributeSet('glueType');
        this._glueType = glueType;
    }

    /**
     * 2.4.4.139 GlueType
     * @see {http://localhost/MS-VSDX.pdf#page=189}
     */
    get glueType() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._glueType;
        if (cell === undefined)
            cell = this.getParentCell('glueType');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.140 GradientStopColor
     * @see {http://localhost/MS-VSDX.pdf#page=189}
     * @param {VisioCell} gradientStopColor
     */
    set gradientStopColor(gradientStopColor) {
        this.attributeSet('gradientStopColor');
        this._gradientStopColor = gradientStopColor;
    }

    /**
     * 2.4.4.140 GradientStopColor
     * @see {http://localhost/MS-VSDX.pdf#page=189}
     */
    get gradientStopColor() {
        const visioType = VisioValueType.vColor;
        let cell = this._gradientStopColor;
        if (cell === undefined)
            cell = this.getParentCell('gradientStopColor');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.141 GradientStopColorTrans
     * @see {http://localhost/MS-VSDX.pdf#page=189}
     * @param {VisioCell} gradientStopColorTrans
     */
    set gradientStopColorTrans(gradientStopColorTrans) {
        this.attributeSet('gradientStopColorTrans');
        this._gradientStopColorTrans = gradientStopColorTrans;
    }

    /**
     * 2.4.4.141 GradientStopColorTrans
     * @see {http://localhost/MS-VSDX.pdf#page=189}
     */
    get gradientStopColorTrans() {
        const visioType = VisioValueType.vScalar;
        let cell = this._gradientStopColorTrans;
        if (cell === undefined)
            cell = this.getParentCell('gradientStopColorTrans');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.142 GradientStopPosition
     * @see {http://localhost/MS-VSDX.pdf#page=189}
     * @param {VisioCell} gradientStopPosition
     */
    set gradientStopPosition(gradientStopPosition) {
        this.attributeSet('gradientStopPosition');
        this._gradientStopPosition = gradientStopPosition;
    }

    /**
     * 2.4.4.142 GradientStopPosition
     * @see {http://localhost/MS-VSDX.pdf#page=189}
     */
    get gradientStopPosition() {
        const visioType = VisioValueType.vScalar;
        let cell = this._gradientStopPosition;
        if (cell === undefined)
            cell = this.getParentCell('gradientStopPosition');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.143 Height
     * @see {http://localhost/MS-VSDX.pdf#page=189}
     * @param {VisioCell} height
     */
    set height(height) {
        this.attributeSet('height');
        this._height = height;
    }

    /**
     * 2.4.4.143 Height
     * @see {http://localhost/MS-VSDX.pdf#page=189}
     */
    get height() {
        const visioType = VisioValueType.vLength;
        let cell = this._height;
        if (cell === undefined)
            cell = this.getParentCell('height');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.144 HelpTopic
     * @see {http://localhost/MS-VSDX.pdf#page=189}
     * @param {VisioCell} helpTopic
     */
    set helpTopic(helpTopic) {
        this.attributeSet('helpTopic');
        this._helpTopic = helpTopic;
    }

    /**
     * 2.4.4.144 HelpTopic
     * @see {http://localhost/MS-VSDX.pdf#page=189}
     */
    get helpTopic() {
        const visioType = VisioValueType.PtgString;
        let cell = this._helpTopic;
        if (cell === undefined)
            cell = this.getParentCell('helpTopic');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.145 HideForApply
     * @see {http://localhost/MS-VSDX.pdf#page=190}
     * @param {VisioCell} hideForApply
     */
    set hideForApply(hideForApply) {
        this.attributeSet('hideForApply');
        this._hideForApply = hideForApply;
    }

    /**
     * 2.4.4.145 HideForApply
     * @see {http://localhost/MS-VSDX.pdf#page=190}
     */
    get hideForApply() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._hideForApply;
        if (cell === undefined)
            cell = this.getParentCell('hideForApply');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.146 HideText
     * @see {http://localhost/MS-VSDX.pdf#page=190}
     * @param {VisioCell} hideText
     */
    set hideText(hideText) {
        this.attributeSet('hideText');
        this._hideText = hideText;
    }

    /**
     * 2.4.4.146 HideText
     * @see {http://localhost/MS-VSDX.pdf#page=190}
     */
    get hideText() {
        const visioType = VisioValueType.vScalar;
        let cell = this._hideText;
        if (cell === undefined)
            cell = this.getParentCell('hideText');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.147 HorzAlign
     * @see {http://localhost/MS-VSDX.pdf#page=190}
     * @param {VisioCell} horzAlign
     */
    set horzAlign(horzAlign) {
        this.attributeSet('horzAlign');
        this._horzAlign = horzAlign;
    }

    /**
     * 2.4.4.147 HorzAlign
     * @see {http://localhost/MS-VSDX.pdf#page=190}
     */
    get horzAlign() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._horzAlign;
        if (cell === undefined)
            cell = this.getParentCell('horzAlign');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.148 ImgHeight
     * @see {http://localhost/MS-VSDX.pdf#page=190}
     * @param {VisioCell} imgHeight
     */
    set imgHeight(imgHeight) {
        this.attributeSet('imgHeight');
        this._imgHeight = imgHeight;
    }

    /**
     * 2.4.4.148 ImgHeight
     * @see {http://localhost/MS-VSDX.pdf#page=190}
     */
    get imgHeight() {
        const visioType = VisioValueType.vLength;
        let cell = this._imgHeight;
        if (cell === undefined)
            cell = this.getParentCell('imgHeight');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.149 ImgOffsetX
     * @see {http://localhost/MS-VSDX.pdf#page=190}
     * @param {VisioCell} imgOffsetX
     */
    set imgOffsetX(imgOffsetX) {
        this.attributeSet('imgOffsetX');
        this._imgOffsetX = imgOffsetX;
    }

    /**
     * 2.4.4.149 ImgOffsetX
     * @see {http://localhost/MS-VSDX.pdf#page=190}
     */
    get imgOffsetX() {
        const visioType = VisioValueType.vLength;
        let cell = this._imgOffsetX;
        if (cell === undefined)
            cell = this.getParentCell('imgOffsetX');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.150 ImgOffsetY
     * @see {http://localhost/MS-VSDX.pdf#page=190}
     * @param {VisioCell} imgOffsetY
     */
    set imgOffsetY(imgOffsetY) {
        this.attributeSet('imgOffsetY');
        this._imgOffsetY = imgOffsetY;
    }

    /**
     * 2.4.4.150 ImgOffsetY
     * @see {http://localhost/MS-VSDX.pdf#page=190}
     */
    get imgOffsetY() {
        const visioType = VisioValueType.vLength;
        let cell = this._imgOffsetY;
        if (cell === undefined)
            cell = this.getParentCell('imgOffsetY');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.151 ImgWidth
     * @see {http://localhost/MS-VSDX.pdf#page=190}
     * @param {VisioCell} imgWidth
     */
    set imgWidth(imgWidth) {
        this.attributeSet('imgWidth');
        this._imgWidth = imgWidth;
    }

    /**
     * 2.4.4.151 ImgWidth
     * @see {http://localhost/MS-VSDX.pdf#page=190}
     */
    get imgWidth() {
        const visioType = VisioValueType.vLength;
        let cell = this._imgWidth;
        if (cell === undefined)
            cell = this.getParentCell('imgWidth');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.152 IndFirst
     * @see {http://localhost/MS-VSDX.pdf#page=191}
     * @param {VisioCell} indFirst
     */
    set indFirst(indFirst) {
        this.attributeSet('indFirst');
        this._indFirst = indFirst;
    }

    /**
     * 2.4.4.152 IndFirst
     * @see {http://localhost/MS-VSDX.pdf#page=191}
     */
    get indFirst() {
        const visioType = VisioValueType.vLength;
        let cell = this._indFirst;
        if (cell === undefined)
            cell = this.getParentCell('indFirst');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.153 IndLeft
     * @see {http://localhost/MS-VSDX.pdf#page=191}
     * @param {VisioCell} indLeft
     */
    set indLeft(indLeft) {
        this.attributeSet('indLeft');
        this._indLeft = indLeft;
    }

    /**
     * 2.4.4.153 IndLeft
     * @see {http://localhost/MS-VSDX.pdf#page=191}
     */
    get indLeft() {
        const visioType = VisioValueType.vLength;
        let cell = this._indLeft;
        if (cell === undefined)
            cell = this.getParentCell('indLeft');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.154 IndRight
     * @see {http://localhost/MS-VSDX.pdf#page=191}
     * @param {VisioCell} indRight
     */
    set indRight(indRight) {
        this.attributeSet('indRight');
        this._indRight = indRight;
    }

    /**
     * 2.4.4.154 IndRight
     * @see {http://localhost/MS-VSDX.pdf#page=191}
     */
    get indRight() {
        const visioType = VisioValueType.vLength;
        let cell = this._indRight;
        if (cell === undefined)
            cell = this.getParentCell('indRight');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.155 InhibitSnap
     * @see {http://localhost/MS-VSDX.pdf#page=191}
     * @param {VisioCell} inhibitSnap
     */
    set inhibitSnap(inhibitSnap) {
        this.attributeSet('inhibitSnap');
        this._inhibitSnap = inhibitSnap;
    }

    /**
     * 2.4.4.155 InhibitSnap
     * @see {http://localhost/MS-VSDX.pdf#page=191}
     */
    get inhibitSnap() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._inhibitSnap;
        if (cell === undefined)
            cell = this.getParentCell('inhibitSnap');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.156 Initials
     * @see {http://localhost/MS-VSDX.pdf#page=191}
     * @param {VisioCell} initials
     */
    set initials(initials) {
        this.attributeSet('initials');
        this._initials = initials;
    }

    /**
     * 2.4.4.156 Initials
     * @see {http://localhost/MS-VSDX.pdf#page=191}
     */
    get initials() {
        const visioType = VisioValueType.PtgString;
        let cell = this._initials;
        if (cell === undefined)
            cell = this.getParentCell('initials');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.157 Invisible
     * @see {http://localhost/MS-VSDX.pdf#page=191}
     * @param {VisioCell} invisible
     */
    set invisible(invisible) {
        this.attributeSet('invisible');
        this._invisible = invisible;
    }

    /**
     * 2.4.4.157 Invisible
     * @see {http://localhost/MS-VSDX.pdf#page=191}
     */
    get invisible() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._invisible;
        if (cell === undefined)
            cell = this.getParentCell('invisible');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.158 IsDropSource
     * @see {http://localhost/MS-VSDX.pdf#page=191}
     * @param {VisioCell} isDropSource
     */
    set isDropSource(isDropSource) {
        this.attributeSet('isDropSource');
        this._isDropSource = isDropSource;
    }

    /**
     * 2.4.4.158 IsDropSource
     * @see {http://localhost/MS-VSDX.pdf#page=191}
     */
    get isDropSource() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._isDropSource;
        if (cell === undefined)
            cell = this.getParentCell('isDropSource');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.159 IsDropTarget
     * @see {http://localhost/MS-VSDX.pdf#page=192}
     * @param {VisioCell} isDropTarget
     */
    set isDropTarget(isDropTarget) {
        this.attributeSet('isDropTarget');
        this._isDropTarget = isDropTarget;
    }

    /**
     * 2.4.4.159 IsDropTarget
     * @see {http://localhost/MS-VSDX.pdf#page=192}
     */
    get isDropTarget() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._isDropTarget;
        if (cell === undefined)
            cell = this.getParentCell('isDropTarget');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.160 IsSnapTarget
     * @see {http://localhost/MS-VSDX.pdf#page=192}
     * @param {VisioCell} isSnapTarget
     */
    set isSnapTarget(isSnapTarget) {
        this.attributeSet('isSnapTarget');
        this._isSnapTarget = isSnapTarget;
    }

    /**
     * 2.4.4.160 IsSnapTarget
     * @see {http://localhost/MS-VSDX.pdf#page=192}
     */
    get isSnapTarget() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._isSnapTarget;
        if (cell === undefined)
            cell = this.getParentCell('isSnapTarget');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.161 IsTextEditTarget
     * @see {http://localhost/MS-VSDX.pdf#page=192}
     * @param {VisioCell} isTextEditTarget
     */
    set isTextEditTarget(isTextEditTarget) {
        this.attributeSet('isTextEditTarget');
        this._isTextEditTarget = isTextEditTarget;
    }

    /**
     * 2.4.4.161 IsTextEditTarget
     * @see {http://localhost/MS-VSDX.pdf#page=192}
     */
    get isTextEditTarget() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._isTextEditTarget;
        if (cell === undefined)
            cell = this.getParentCell('isTextEditTarget');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.162 KeepTextFlat
     * @see {http://localhost/MS-VSDX.pdf#page=192}
     * @param {VisioCell} keepTextFlat
     */
    set keepTextFlat(keepTextFlat) {
        this.attributeSet('keepTextFlat');
        this._keepTextFlat = keepTextFlat;
    }

    /**
     * 2.4.4.162 KeepTextFlat
     * @see {http://localhost/MS-VSDX.pdf#page=192}
     */
    get keepTextFlat() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._keepTextFlat;
        if (cell === undefined)
            cell = this.getParentCell('keepTextFlat');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.163 Label
     * @see {http://localhost/MS-VSDX.pdf#page=192}
     * @param {VisioCell} label
     */
    set label(label) {
        this.attributeSet('label');
        this._label = label;
    }

    /**
     * 2.4.4.163 Label
     * @see {http://localhost/MS-VSDX.pdf#page=192}
     */
    get label() {
        const visioType = VisioValueType.PtgString;
        let cell = this._label;
        if (cell === undefined)
            cell = this.getParentCell('label');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.164 LangID
     * @see {http://localhost/MS-VSDX.pdf#page=192}
     * @param {VisioCell} langID
     */
    set langID(langID) {
        this.attributeSet('langID');
        this._langID = langID;
    }

    /**
     * 2.4.4.164 LangID
     * @see {http://localhost/MS-VSDX.pdf#page=192}
     */
    get langID() {
        const visioType = VisioValueType.vLanguageString;
        let cell = this._langID;
        if (cell === undefined)
            cell = this.getParentCell('langID');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.165 LayerMember
     * @see {http://localhost/MS-VSDX.pdf#page=192}
     * @param {VisioCell} layerMember
     */
    set layerMember(layerMember) {
        this.attributeSet('layerMember');
        this._layerMember = layerMember;
    }

    /**
     * 2.4.4.165 LayerMember
     * @see {http://localhost/MS-VSDX.pdf#page=192}
     */
    get layerMember() {
        const visioType = VisioValueType.PtgString;
        let cell = this._layerMember;
        if (cell === undefined)
            cell = this.getParentCell('layerMember');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.166 LeftMargin
     * @see {http://localhost/MS-VSDX.pdf#page=192}
     * @param {VisioCell} leftMargin
     */
    set leftMargin(leftMargin) {
        this.attributeSet('leftMargin');
        this._leftMargin = leftMargin;
    }

    /**
     * 2.4.4.166 LeftMargin
     * @see {http://localhost/MS-VSDX.pdf#page=192}
     */
    get leftMargin() {
        const visioType = VisioValueType.vLength;
        let cell = this._leftMargin;
        if (cell === undefined)
            cell = this.getParentCell('leftMargin');
        if (cell === undefined)
            cell = this.getStylesheetTextStyleCell('leftMargin');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.167 Letterspace
     * @see {http://localhost/MS-VSDX.pdf#page=193}
     * @param {VisioCell} letterspace
     */
    set letterspace(letterspace) {
        this.attributeSet('letterspace');
        this._letterspace = letterspace;
    }

    /**
     * 2.4.4.167 Letterspace
     * @see {http://localhost/MS-VSDX.pdf#page=193}
     */
    get letterspace() {
        const visioType = VisioValueType.vLength;
        let cell = this._letterspace;
        if (cell === undefined)
            cell = this.getParentCell('letterspace');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.168 LineAdjustFrom
     * @see {http://localhost/MS-VSDX.pdf#page=193}
     * @param {VisioCell} lineAdjustFrom
     */
    set lineAdjustFrom(lineAdjustFrom) {
        this.attributeSet('lineAdjustFrom');
        this._lineAdjustFrom = lineAdjustFrom;
    }

    /**
     * 2.4.4.168 LineAdjustFrom
     * @see {http://localhost/MS-VSDX.pdf#page=193}
     */
    get lineAdjustFrom() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._lineAdjustFrom;
        if (cell === undefined)
            cell = this.getParentCell('lineAdjustFrom');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.169 LineAdjustTo
     * @see {http://localhost/MS-VSDX.pdf#page=193}
     * @param {VisioCell} lineAdjustTo
     */
    set lineAdjustTo(lineAdjustTo) {
        this.attributeSet('lineAdjustTo');
        this._lineAdjustTo = lineAdjustTo;
    }

    /**
     * 2.4.4.169 LineAdjustTo
     * @see {http://localhost/MS-VSDX.pdf#page=193}
     */
    get lineAdjustTo() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._lineAdjustTo;
        if (cell === undefined)
            cell = this.getParentCell('lineAdjustTo');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.170 LineCap
     * @see {http://localhost/MS-VSDX.pdf#page=193}
     * @param {VisioCell} lineCap
     */
    set lineCap(lineCap) {
        this.attributeSet('lineCap');
        this._lineCap = lineCap;
    }

    /**
     * 2.4.4.170 LineCap
     * @see {http://localhost/MS-VSDX.pdf#page=193}
     */
    get lineCap() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._lineCap;
        if (cell === undefined)
            cell = this.getParentCell('lineCap');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.171 LineColor
     * @see {http://localhost/MS-VSDX.pdf#page=193}
     * @param {VisioCell} lineColor
     */
    set lineColor(lineColor) {
        this.attributeSet('lineColor');
        this._lineColor = lineColor;
    }

    /**
     * 2.4.4.171 LineColor
     * @see {http://localhost/MS-VSDX.pdf#page=193}
     */
    get lineColor() {
        const visioType = VisioValueType.vColor;
        let cell = this._lineColor;

        // if (this.shape && this.shape.id === 51) {
        //     cell.value = '#ff0000';
        // }

        if (cell === undefined)
            cell = this.getParentCell('lineColor');
        if (cell === undefined)
            cell = this.getStylesheetLineStyleCell('lineColor');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.172 LineColorTrans
     * @see {http://localhost/MS-VSDX.pdf#page=193}
     * @param {VisioCell} lineColorTrans
     */
    set lineColorTrans(lineColorTrans) {
        this.attributeSet('lineColorTrans');
        this._lineColorTrans = lineColorTrans;
    }

    /**
     * 2.4.4.172 LineColorTrans
     * @see {http://localhost/MS-VSDX.pdf#page=193}
     */
    get lineColorTrans() {
        const visioType = VisioValueType.vScalar;
        let cell = this._lineColorTrans;
        if (cell === undefined)
            cell = this.getParentCell('lineColorTrans');
        if (cell === undefined)
            cell = this.getStylesheetLineStyleCell('lineColorTrans');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.173 LineGradientAngle
     * @see {http://localhost/MS-VSDX.pdf#page=193}
     * @param {VisioCell} lineGradientAngle
     */
    set lineGradientAngle(lineGradientAngle) {
        this.attributeSet('lineGradientAngle');
        this._lineGradientAngle = lineGradientAngle;
    }

    /**
     * 2.4.4.173 LineGradientAngle
     * @see {http://localhost/MS-VSDX.pdf#page=193}
     */
    get lineGradientAngle() {
        const visioType = VisioValueType.vAngle;
        let cell = this._lineGradientAngle;
        if (cell === undefined)
            cell = this.getParentCell('lineGradientAngle');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.174 LineGradientDir
     * @see {http://localhost/MS-VSDX.pdf#page=194}
     * @param {VisioCell} lineGradientDir
     */
    set lineGradientDir(lineGradientDir) {
        this.attributeSet('lineGradientDir');
        this._lineGradientDir = lineGradientDir;
    }

    /**
     * 2.4.4.174 LineGradientDir
     * @see {http://localhost/MS-VSDX.pdf#page=194}
     */
    get lineGradientDir() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._lineGradientDir;
        if (cell === undefined)
            cell = this.getParentCell('lineGradientDir');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.175 LineGradientEnabled
     * @see {http://localhost/MS-VSDX.pdf#page=194}
     * @param {VisioCell} lineGradientEnabled
     */
    set lineGradientEnabled(lineGradientEnabled) {
        this.attributeSet('lineGradientEnabled');
        this._lineGradientEnabled = lineGradientEnabled;
    }

    /**
     * 2.4.4.175 LineGradientEnabled
     * @see {http://localhost/MS-VSDX.pdf#page=194}
     */
    get lineGradientEnabled() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._lineGradientEnabled;
        if (cell === undefined)
            cell = this.getParentCell('lineGradientEnabled');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.176 LineJumpCode
     * @see {http://localhost/MS-VSDX.pdf#page=194}
     * @param {VisioCell} lineJumpCode
     */
    set lineJumpCode(lineJumpCode) {
        this.attributeSet('lineJumpCode');
        this._lineJumpCode = lineJumpCode;
    }

    /**
     * 2.4.4.176 LineJumpCode
     * @see {http://localhost/MS-VSDX.pdf#page=194}
     */
    get lineJumpCode() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._lineJumpCode;
        if (cell === undefined)
            cell = this.getParentCell('lineJumpCode');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.177 LineJumpFactorX
     * @see {http://localhost/MS-VSDX.pdf#page=194}
     * @param {VisioCell} lineJumpFactorX
     */
    set lineJumpFactorX(lineJumpFactorX) {
        this.attributeSet('lineJumpFactorX');
        this._lineJumpFactorX = lineJumpFactorX;
    }

    /**
     * 2.4.4.177 LineJumpFactorX
     * @see {http://localhost/MS-VSDX.pdf#page=194}
     */
    get lineJumpFactorX() {
        const visioType = VisioValueType.vScalar;
        let cell = this._lineJumpFactorX;
        if (cell === undefined)
            cell = this.getParentCell('lineJumpFactorX');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.178 LineJumpFactorY
     * @see {http://localhost/MS-VSDX.pdf#page=195}
     * @param {VisioCell} lineJumpFactorY
     */
    set lineJumpFactorY(lineJumpFactorY) {
        this.attributeSet('lineJumpFactorY');
        this._lineJumpFactorY = lineJumpFactorY;
    }

    /**
     * 2.4.4.178 LineJumpFactorY
     * @see {http://localhost/MS-VSDX.pdf#page=195}
     */
    get lineJumpFactorY() {
        const visioType = VisioValueType.vScalar;
        let cell = this._lineJumpFactorY;
        if (cell === undefined)
            cell = this.getParentCell('lineJumpFactorY');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.179 LineJumpStyle
     * @see {http://localhost/MS-VSDX.pdf#page=195}
     * @param {VisioCell} lineJumpStyle
     */
    set lineJumpStyle(lineJumpStyle) {
        this.attributeSet('lineJumpStyle');
        this._lineJumpStyle = lineJumpStyle;
    }

    /**
     * 2.4.4.179 LineJumpStyle
     * @see {http://localhost/MS-VSDX.pdf#page=195}
     */
    get lineJumpStyle() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._lineJumpStyle;
        if (cell === undefined)
            cell = this.getParentCell('lineJumpStyle');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.180 LinePattern
     * @see {http://localhost/MS-VSDX.pdf#page=195}
     * @param {VisioCell} linePattern
     */
    set linePattern(linePattern) {
        this.attributeSet('linePattern');
        this._linePattern = linePattern;
    }

    /**
     * 2.4.4.180 LinePattern
     * @see {http://localhost/MS-VSDX.pdf#page=195}
     */
    get linePattern() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._linePattern;
        if (cell === undefined)
            cell = this.getParentCell('linePattern');
        if (cell === undefined)
            cell = this.getStylesheetLineStyleCell('linePattern');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.181 LineRouteExt
     * @see {http://localhost/MS-VSDX.pdf#page=196}
     * @param {VisioCell} lineRouteExt
     */
    set lineRouteExt(lineRouteExt) {
        this.attributeSet('lineRouteExt');
        this._lineRouteExt = lineRouteExt;
    }

    /**
     * 2.4.4.181 LineRouteExt
     * @see {http://localhost/MS-VSDX.pdf#page=196}
     */
    get lineRouteExt() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._lineRouteExt;
        if (cell === undefined)
            cell = this.getParentCell('lineRouteExt');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.182 LineToLineX
     * @see {http://localhost/MS-VSDX.pdf#page=196}
     * @param {VisioCell} lineToLineX
     */
    set lineToLineX(lineToLineX) {
        this.attributeSet('lineToLineX');
        this._lineToLineX = lineToLineX;
    }

    /**
     * 2.4.4.182 LineToLineX
     * @see {http://localhost/MS-VSDX.pdf#page=196}
     */
    get lineToLineX() {
        const visioType = VisioValueType.vScalar;
        let cell = this._lineToLineX;
        if (cell === undefined)
            cell = this.getParentCell('lineToLineX');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.183 LineToLineY
     * @see {http://localhost/MS-VSDX.pdf#page=196}
     * @param {VisioCell} lineToLineY
     */
    set lineToLineY(lineToLineY) {
        this.attributeSet('lineToLineY');
        this._lineToLineY = lineToLineY;
    }

    /**
     * 2.4.4.183 LineToLineY
     * @see {http://localhost/MS-VSDX.pdf#page=196}
     */
    get lineToLineY() {
        const visioType = VisioValueType.vScalar;
        let cell = this._lineToLineY;
        if (cell === undefined)
            cell = this.getParentCell('lineToLineY');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.184 LineToNodeX
     * @see {http://localhost/MS-VSDX.pdf#page=196}
     * @param {VisioCell} lineToNodeX
     */
    set lineToNodeX(lineToNodeX) {
        this.attributeSet('lineToNodeX');
        this._lineToNodeX = lineToNodeX;
    }

    /**
     * 2.4.4.184 LineToNodeX
     * @see {http://localhost/MS-VSDX.pdf#page=196}
     */
    get lineToNodeX() {
        const visioType = VisioValueType.vScalar;
        let cell = this._lineToNodeX;
        if (cell === undefined)
            cell = this.getParentCell('lineToNodeX');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.185 LineToNodeY
     * @see {http://localhost/MS-VSDX.pdf#page=197}
     * @param {VisioCell} lineToNodeY
     */
    set lineToNodeY(lineToNodeY) {
        this.attributeSet('lineToNodeY');
        this._lineToNodeY = lineToNodeY;
    }

    /**
     * 2.4.4.185 LineToNodeY
     * @see {http://localhost/MS-VSDX.pdf#page=197}
     */
    get lineToNodeY() {
        const visioType = VisioValueType.vScalar;
        let cell = this._lineToNodeY;
        if (cell === undefined)
            cell = this.getParentCell('lineToNodeY');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.186 LineWeight
     * @see {http://localhost/MS-VSDX.pdf#page=197}
     * @param {VisioCell} lineWeight
     */
    set lineWeight(lineWeight) {
        this.attributeSet('lineWeight');
        this._lineWeight = lineWeight;
    }

    /**
     * 2.4.4.186 LineWeight
     * @see {http://localhost/MS-VSDX.pdf#page=197}
     */
    get lineWeight() {
        const visioType = VisioValueType.vLength;
        let cell = this._lineWeight;
        if (cell === undefined)
            cell = this.getParentCell('lineWeight');
        if (cell === undefined)
            cell = this.getStylesheetLineStyleCell('lineWeight');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.187 LocalizeMerge
     * @see {http://localhost/MS-VSDX.pdf#page=197}
     * @param {VisioCell} localizeMerge
     */
    set localizeMerge(localizeMerge) {
        this.attributeSet('localizeMerge');
        this._localizeMerge = localizeMerge;
    }

    /**
     * 2.4.4.187 LocalizeMerge
     * @see {http://localhost/MS-VSDX.pdf#page=197}
     */
    get localizeMerge() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._localizeMerge;
        if (cell === undefined)
            cell = this.getParentCell('localizeMerge');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.188 Lock
     * @see {http://localhost/MS-VSDX.pdf#page=197}
     * @param {VisioCell} lock
     */
    set lock(lock) {
        this.attributeSet('lock');
        this._lock = lock;
    }

    /**
     * 2.4.4.188 Lock
     * @see {http://localhost/MS-VSDX.pdf#page=197}
     */
    get lock() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._lock;
        if (cell === undefined)
            cell = this.getParentCell('lock');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.189 LockAspect
     * @see {http://localhost/MS-VSDX.pdf#page=197}
     * @param {VisioCell} lockAspect
     */
    set lockAspect(lockAspect) {
        this.attributeSet('lockAspect');
        this._lockAspect = lockAspect;
    }

    /**
     * 2.4.4.189 LockAspect
     * @see {http://localhost/MS-VSDX.pdf#page=197}
     */
    get lockAspect() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._lockAspect;
        if (cell === undefined)
            cell = this.getParentCell('lockAspect');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.190 LockBegin
     * @see {http://localhost/MS-VSDX.pdf#page=197}
     * @param {VisioCell} lockBegin
     */
    set lockBegin(lockBegin) {
        this.attributeSet('lockBegin');
        this._lockBegin = lockBegin;
    }

    /**
     * 2.4.4.190 LockBegin
     * @see {http://localhost/MS-VSDX.pdf#page=197}
     */
    get lockBegin() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._lockBegin;
        if (cell === undefined)
            cell = this.getParentCell('lockBegin');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.191 LockCalcWH
     * @see {http://localhost/MS-VSDX.pdf#page=197}
     * @param {VisioCell} lockCalcWH
     */
    set lockCalcWH(lockCalcWH) {
        this.attributeSet('lockCalcWH');
        this._lockCalcWH = lockCalcWH;
    }

    /**
     * 2.4.4.191 LockCalcWH
     * @see {http://localhost/MS-VSDX.pdf#page=197}
     */
    get lockCalcWH() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._lockCalcWH;
        if (cell === undefined)
            cell = this.getParentCell('lockCalcWH');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.192 LockCrop
     * @see {http://localhost/MS-VSDX.pdf#page=197}
     * @param {VisioCell} lockCrop
     */
    set lockCrop(lockCrop) {
        this.attributeSet('lockCrop');
        this._lockCrop = lockCrop;
    }

    /**
     * 2.4.4.192 LockCrop
     * @see {http://localhost/MS-VSDX.pdf#page=197}
     */
    get lockCrop() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._lockCrop;
        if (cell === undefined)
            cell = this.getParentCell('lockCrop');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.193 LockCustProp
     * @see {http://localhost/MS-VSDX.pdf#page=197}
     * @param {VisioCell} lockCustProp
     */
    set lockCustProp(lockCustProp) {
        this.attributeSet('lockCustProp');
        this._lockCustProp = lockCustProp;
    }

    /**
     * 2.4.4.193 LockCustProp
     * @see {http://localhost/MS-VSDX.pdf#page=197}
     */
    get lockCustProp() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._lockCustProp;
        if (cell === undefined)
            cell = this.getParentCell('lockCustProp');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.194 LockDelete
     * @see {http://localhost/MS-VSDX.pdf#page=197}
     * @param {VisioCell} lockDelete
     */
    set lockDelete(lockDelete) {
        this.attributeSet('lockDelete');
        this._lockDelete = lockDelete;
    }

    /**
     * 2.4.4.194 LockDelete
     * @see {http://localhost/MS-VSDX.pdf#page=197}
     */
    get lockDelete() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._lockDelete;
        if (cell === undefined)
            cell = this.getParentCell('lockDelete');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.195 LockEnd
     * @see {http://localhost/MS-VSDX.pdf#page=198}
     * @param {VisioCell} lockEnd
     */
    set lockEnd(lockEnd) {
        this.attributeSet('lockEnd');
        this._lockEnd = lockEnd;
    }

    /**
     * 2.4.4.195 LockEnd
     * @see {http://localhost/MS-VSDX.pdf#page=198}
     */
    get lockEnd() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._lockEnd;
        if (cell === undefined)
            cell = this.getParentCell('lockEnd');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.196 LockFormat
     * @see {http://localhost/MS-VSDX.pdf#page=198}
     * @param {VisioCell} lockFormat
     */
    set lockFormat(lockFormat) {
        this.attributeSet('lockFormat');
        this._lockFormat = lockFormat;
    }

    /**
     * 2.4.4.196 LockFormat
     * @see {http://localhost/MS-VSDX.pdf#page=198}
     */
    get lockFormat() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._lockFormat;
        if (cell === undefined)
            cell = this.getParentCell('lockFormat');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.197 LockFromGroupFormat
     * @see {http://localhost/MS-VSDX.pdf#page=198}
     * @param {VisioCell} lockFromGroupFormat
     */
    set lockFromGroupFormat(lockFromGroupFormat) {
        this.attributeSet('lockFromGroupFormat');
        this._lockFromGroupFormat = lockFromGroupFormat;
    }

    /**
     * 2.4.4.197 LockFromGroupFormat
     * @see {http://localhost/MS-VSDX.pdf#page=198}
     */
    get lockFromGroupFormat() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._lockFromGroupFormat;
        if (cell === undefined)
            cell = this.getParentCell('lockFromGroupFormat');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.198 LockGroup
     * @see {http://localhost/MS-VSDX.pdf#page=198}
     * @param {VisioCell} lockGroup
     */
    set lockGroup(lockGroup) {
        this.attributeSet('lockGroup');
        this._lockGroup = lockGroup;
    }

    /**
     * 2.4.4.198 LockGroup
     * @see {http://localhost/MS-VSDX.pdf#page=198}
     */
    get lockGroup() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._lockGroup;
        if (cell === undefined)
            cell = this.getParentCell('lockGroup');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.199 LockHeight
     * @see {http://localhost/MS-VSDX.pdf#page=198}
     * @param {VisioCell} lockHeight
     */
    set lockHeight(lockHeight) {
        this.attributeSet('lockHeight');
        this._lockHeight = lockHeight;
    }

    /**
     * 2.4.4.199 LockHeight
     * @see {http://localhost/MS-VSDX.pdf#page=198}
     */
    get lockHeight() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._lockHeight;
        if (cell === undefined)
            cell = this.getParentCell('lockHeight');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.200 LockMoveX
     * @see {http://localhost/MS-VSDX.pdf#page=198}
     * @param {VisioCell} lockMoveX
     */
    set lockMoveX(lockMoveX) {
        this.attributeSet('lockMoveX');
        this._lockMoveX = lockMoveX;
    }

    /**
     * 2.4.4.200 LockMoveX
     * @see {http://localhost/MS-VSDX.pdf#page=198}
     */
    get lockMoveX() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._lockMoveX;
        if (cell === undefined)
            cell = this.getParentCell('lockMoveX');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.201 LockMoveY
     * @see {http://localhost/MS-VSDX.pdf#page=198}
     * @param {VisioCell} lockMoveY
     */
    set lockMoveY(lockMoveY) {
        this.attributeSet('lockMoveY');
        this._lockMoveY = lockMoveY;
    }

    /**
     * 2.4.4.201 LockMoveY
     * @see {http://localhost/MS-VSDX.pdf#page=198}
     */
    get lockMoveY() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._lockMoveY;
        if (cell === undefined)
            cell = this.getParentCell('lockMoveY');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.202 LockPreview
     * @see {http://localhost/MS-VSDX.pdf#page=198}
     * @param {VisioCell} lockPreview
     */
    set lockPreview(lockPreview) {
        this.attributeSet('lockPreview');
        this._lockPreview = lockPreview;
    }

    /**
     * 2.4.4.202 LockPreview
     * @see {http://localhost/MS-VSDX.pdf#page=198}
     */
    get lockPreview() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._lockPreview;
        if (cell === undefined)
            cell = this.getParentCell('lockPreview');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.203 LockReplace
     * @see {http://localhost/MS-VSDX.pdf#page=198}
     * @param {VisioCell} lockReplace
     */
    set lockReplace(lockReplace) {
        this.attributeSet('lockReplace');
        this._lockReplace = lockReplace;
    }

    /**
     * 2.4.4.203 LockReplace
     * @see {http://localhost/MS-VSDX.pdf#page=198}
     */
    get lockReplace() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._lockReplace;
        if (cell === undefined)
            cell = this.getParentCell('lockReplace');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.204 LockRotate
     * @see {http://localhost/MS-VSDX.pdf#page=198}
     * @param {VisioCell} lockRotate
     */
    set lockRotate(lockRotate) {
        this.attributeSet('lockRotate');
        this._lockRotate = lockRotate;
    }

    /**
     * 2.4.4.204 LockRotate
     * @see {http://localhost/MS-VSDX.pdf#page=198}
     */
    get lockRotate() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._lockRotate;
        if (cell === undefined)
            cell = this.getParentCell('lockRotate');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.205 LockSelect
     * @see {http://localhost/MS-VSDX.pdf#page=199}
     * @param {VisioCell} lockSelect
     */
    set lockSelect(lockSelect) {
        this.attributeSet('lockSelect');
        this._lockSelect = lockSelect;
    }

    /**
     * 2.4.4.205 LockSelect
     * @see {http://localhost/MS-VSDX.pdf#page=199}
     */
    get lockSelect() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._lockSelect;
        if (cell === undefined)
            cell = this.getParentCell('lockSelect');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.206 LockTextEdit
     * @see {http://localhost/MS-VSDX.pdf#page=199}
     * @param {VisioCell} lockTextEdit
     */
    set lockTextEdit(lockTextEdit) {
        this.attributeSet('lockTextEdit');
        this._lockTextEdit = lockTextEdit;
    }

    /**
     * 2.4.4.206 LockTextEdit
     * @see {http://localhost/MS-VSDX.pdf#page=199}
     */
    get lockTextEdit() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._lockTextEdit;
        if (cell === undefined)
            cell = this.getParentCell('lockTextEdit');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.207 LockThemeColors
     * @see {http://localhost/MS-VSDX.pdf#page=199}
     * @param {VisioCell} lockThemeColors
     */
    set lockThemeColors(lockThemeColors) {
        this.attributeSet('lockThemeColors');
        this._lockThemeColors = lockThemeColors;
    }

    /**
     * 2.4.4.207 LockThemeColors
     * @see {http://localhost/MS-VSDX.pdf#page=199}
     */
    get lockThemeColors() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._lockThemeColors;
        if (cell === undefined)
            cell = this.getParentCell('lockThemeColors');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.208 LockThemeConnectors
     * @see {http://localhost/MS-VSDX.pdf#page=199}
     * @param {VisioCell} lockThemeConnectors
     */
    set lockThemeConnectors(lockThemeConnectors) {
        this.attributeSet('lockThemeConnectors');
        this._lockThemeConnectors = lockThemeConnectors;
    }

    /**
     * 2.4.4.208 LockThemeConnectors
     * @see {http://localhost/MS-VSDX.pdf#page=199}
     */
    get lockThemeConnectors() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._lockThemeConnectors;
        if (cell === undefined)
            cell = this.getParentCell('lockThemeConnectors');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.209 LockThemeEffects
     * @see {http://localhost/MS-VSDX.pdf#page=199}
     * @param {VisioCell} lockThemeEffects
     */
    set lockThemeEffects(lockThemeEffects) {
        this.attributeSet('lockThemeEffects');
        this._lockThemeEffects = lockThemeEffects;
    }

    /**
     * 2.4.4.209 LockThemeEffects
     * @see {http://localhost/MS-VSDX.pdf#page=199}
     */
    get lockThemeEffects() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._lockThemeEffects;
        if (cell === undefined)
            cell = this.getParentCell('lockThemeEffects');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.210 LockThemeFonts
     * @see {http://localhost/MS-VSDX.pdf#page=199}
     * @param {VisioCell} lockThemeFonts
     */
    set lockThemeFonts(lockThemeFonts) {
        this.attributeSet('lockThemeFonts');
        this._lockThemeFonts = lockThemeFonts;
    }

    /**
     * 2.4.4.210 LockThemeFonts
     * @see {http://localhost/MS-VSDX.pdf#page=199}
     */
    get lockThemeFonts() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._lockThemeFonts;
        if (cell === undefined)
            cell = this.getParentCell('lockThemeFonts');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.211 LockThemeIndex
     * @see {http://localhost/MS-VSDX.pdf#page=199}
     * @param {VisioCell} lockThemeIndex
     */
    set lockThemeIndex(lockThemeIndex) {
        this.attributeSet('lockThemeIndex');
        this._lockThemeIndex = lockThemeIndex;
    }

    /**
     * 2.4.4.211 LockThemeIndex
     * @see {http://localhost/MS-VSDX.pdf#page=199}
     */
    get lockThemeIndex() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._lockThemeIndex;
        if (cell === undefined)
            cell = this.getParentCell('lockThemeIndex');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.212 LockVariation
     * @see {http://localhost/MS-VSDX.pdf#page=199}
     * @param {VisioCell} lockVariation
     */
    set lockVariation(lockVariation) {
        this.attributeSet('lockVariation');
        this._lockVariation = lockVariation;
    }

    /**
     * 2.4.4.212 LockVariation
     * @see {http://localhost/MS-VSDX.pdf#page=199}
     */
    get lockVariation() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._lockVariation;
        if (cell === undefined)
            cell = this.getParentCell('lockVariation');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.213 LockVtxEdit
     * @see {http://localhost/MS-VSDX.pdf#page=199}
     * @param {VisioCell} lockVtxEdit
     */
    set lockVtxEdit(lockVtxEdit) {
        this.attributeSet('lockVtxEdit');
        this._lockVtxEdit = lockVtxEdit;
    }

    /**
     * 2.4.4.213 LockVtxEdit
     * @see {http://localhost/MS-VSDX.pdf#page=199}
     */
    get lockVtxEdit() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._lockVtxEdit;
        if (cell === undefined)
            cell = this.getParentCell('lockVtxEdit');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.214 LockWidth
     * @see {http://localhost/MS-VSDX.pdf#page=199}
     * @param {VisioCell} lockWidth
     */
    set lockWidth(lockWidth) {
        this.attributeSet('lockWidth');
        this._lockWidth = lockWidth;
    }

    /**
     * 2.4.4.214 LockWidth
     * @see {http://localhost/MS-VSDX.pdf#page=199}
     */
    get lockWidth() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._lockWidth;
        if (cell === undefined)
            cell = this.getParentCell('lockWidth');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.215 LocPinX
     * @see {http://localhost/MS-VSDX.pdf#page=200}
     * @param {VisioCell} locPinX
     */
    set locPinX(locPinX) {
        this.attributeSet('locPinX');
        this._locPinX = locPinX;
    }

    /**
     * 2.4.4.215 LocPinX
     * @see {http://localhost/MS-VSDX.pdf#page=200}
     */
    get locPinX() {
        const visioType = VisioValueType.vLength;
        let cell = this._locPinX;
        if (cell === undefined)
            cell = this.getParentCell('locPinX');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.216 LocPinY
     * @see {http://localhost/MS-VSDX.pdf#page=200}
     * @param {VisioCell} locPinY
     */
    set locPinY(locPinY) {
        this.attributeSet('locPinY');
        this._locPinY = locPinY;
    }

    /**
     * 2.4.4.216 LocPinY
     * @see {http://localhost/MS-VSDX.pdf#page=200}
     */
    get locPinY() {
        const visioType = VisioValueType.vLength;
        let cell = this._locPinY;
        if (cell === undefined)
            cell = this.getParentCell('locPinY');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.217 Menu
     * @see {http://localhost/MS-VSDX.pdf#page=200}
     * @param {VisioCell} menu
     */
    set menu(menu) {
        this.attributeSet('menu');
        this._menu = menu;
    }

    /**
     * 2.4.4.217 Menu
     * @see {http://localhost/MS-VSDX.pdf#page=200}
     */
    get menu() {
        const visioType = VisioValueType.PtgString;
        let cell = this._menu;
        if (cell === undefined)
            cell = this.getParentCell('menu');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.218 Name
     * @see {http://localhost/MS-VSDX.pdf#page=200}
     * @param {VisioCell} name
     */
    set name(name) {
        this.attributeSet('name');
        this._name = name;
    }

    /**
     * 2.4.4.218 Name
     * @see {http://localhost/MS-VSDX.pdf#page=200}
     */
    get name() {
        const visioType = VisioValueType.PtgString;
        let cell = this._name;
        if (cell === undefined)
            cell = this.getParentCell('name');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.219 NameUniv
     * @see {http://localhost/MS-VSDX.pdf#page=200}
     * @param {VisioCell} nameUniv
     */
    set nameUniv(nameUniv) {
        this.attributeSet('nameUniv');
        this._nameUniv = nameUniv;
    }

    /**
     * 2.4.4.219 NameUniv
     * @see {http://localhost/MS-VSDX.pdf#page=200}
     */
    get nameUniv() {
        const visioType = VisioValueType.PtgString;
        let cell = this._nameUniv;
        if (cell === undefined)
            cell = this.getParentCell('nameUniv');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.220 NewWindow
     * @see {http://localhost/MS-VSDX.pdf#page=200}
     * @param {VisioCell} newWindow
     */
    set newWindow(newWindow) {
        this.attributeSet('newWindow');
        this._newWindow = newWindow;
    }

    /**
     * 2.4.4.220 NewWindow
     * @see {http://localhost/MS-VSDX.pdf#page=200}
     */
    get newWindow() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._newWindow;
        if (cell === undefined)
            cell = this.getParentCell('newWindow');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.221 NoAlignBox
     * @see {http://localhost/MS-VSDX.pdf#page=200}
     * @param {VisioCell} noAlignBox
     */
    set noAlignBox(noAlignBox) {
        this.attributeSet('noAlignBox');
        this._noAlignBox = noAlignBox;
    }

    /**
     * 2.4.4.221 NoAlignBox
     * @see {http://localhost/MS-VSDX.pdf#page=200}
     */
    get noAlignBox() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._noAlignBox;
        if (cell === undefined)
            cell = this.getParentCell('noAlignBox');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.222 NoCoauth
     * @see {http://localhost/MS-VSDX.pdf#page=200}
     * @param {VisioCell} noCoauth
     */
    set noCoauth(noCoauth) {
        this.attributeSet('noCoauth');
        this._noCoauth = noCoauth;
    }

    /**
     * 2.4.4.222 NoCoauth
     * @see {http://localhost/MS-VSDX.pdf#page=200}
     */
    get noCoauth() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._noCoauth;
        if (cell === undefined)
            cell = this.getParentCell('noCoauth');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.223 NoCtlHandles
     * @see {http://localhost/MS-VSDX.pdf#page=200}
     * @param {VisioCell} noCtlHandles
     */
    set noCtlHandles(noCtlHandles) {
        this.attributeSet('noCtlHandles');
        this._noCtlHandles = noCtlHandles;
    }

    /**
     * 2.4.4.223 NoCtlHandles
     * @see {http://localhost/MS-VSDX.pdf#page=200}
     */
    get noCtlHandles() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._noCtlHandles;
        if (cell === undefined)
            cell = this.getParentCell('noCtlHandles');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.224 NoFill
     * @see {http://localhost/MS-VSDX.pdf#page=200}
     * @param {VisioCell} noFill
     */
    set noFill(noFill) {
        this.attributeSet('noFill');
        this._noFill = noFill;
    }

    /**
     * 2.4.4.224 NoFill
     * @see {http://localhost/MS-VSDX.pdf#page=200}
     */
    get noFill() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._noFill;
        if (cell === undefined)
            cell = this.getParentCell('noFill');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.225 NoLine
     * @see {http://localhost/MS-VSDX.pdf#page=201}
     * @param {VisioCell} noLine
     */
    set noLine(noLine) {
        this.attributeSet('noLine');
        this._noLine = noLine;
    }

    /**
     * 2.4.4.225 NoLine
     * @see {http://localhost/MS-VSDX.pdf#page=201}
     */
    get noLine() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._noLine;
        if (cell === undefined)
            cell = this.getParentCell('noLine');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.226 NoLiveDynamics
     * @see {http://localhost/MS-VSDX.pdf#page=201}
     * @param {VisioCell} noLiveDynamics
     */
    set noLiveDynamics(noLiveDynamics) {
        this.attributeSet('noLiveDynamics');
        this._noLiveDynamics = noLiveDynamics;
    }

    /**
     * 2.4.4.226 NoLiveDynamics
     * @see {http://localhost/MS-VSDX.pdf#page=201}
     */
    get noLiveDynamics() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._noLiveDynamics;
        if (cell === undefined)
            cell = this.getParentCell('noLiveDynamics');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.227 NonPrinting
     * @see {http://localhost/MS-VSDX.pdf#page=201}
     * @param {VisioCell} nonPrinting
     */
    set nonPrinting(nonPrinting) {
        this.attributeSet('nonPrinting');
        this._nonPrinting = nonPrinting;
    }

    /**
     * 2.4.4.227 NonPrinting
     * @see {http://localhost/MS-VSDX.pdf#page=201}
     */
    get nonPrinting() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._nonPrinting;
        if (cell === undefined)
            cell = this.getParentCell('nonPrinting');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.228 NoObjHandles
     * @see {http://localhost/MS-VSDX.pdf#page=201}
     * @param {VisioCell} noObjHandles
     */
    set noObjHandles(noObjHandles) {
        this.attributeSet('noObjHandles');
        this._noObjHandles = noObjHandles;
    }

    /**
     * 2.4.4.228 NoObjHandles
     * @see {http://localhost/MS-VSDX.pdf#page=201}
     */
    get noObjHandles() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._noObjHandles;
        if (cell === undefined)
            cell = this.getParentCell('noObjHandles');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.229 NoProofing
     * @see {http://localhost/MS-VSDX.pdf#page=201}
     * @param {VisioCell} noProofing
     */
    set noProofing(noProofing) {
        this.attributeSet('noProofing');
        this._noProofing = noProofing;
    }

    /**
     * 2.4.4.229 NoProofing
     * @see {http://localhost/MS-VSDX.pdf#page=201}
     */
    get noProofing() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._noProofing;
        if (cell === undefined)
            cell = this.getParentCell('noProofing');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.230 NoQuickDrag
     * @see {http://localhost/MS-VSDX.pdf#page=201}
     * @param {VisioCell} noQuickDrag
     */
    set noQuickDrag(noQuickDrag) {
        this.attributeSet('noQuickDrag');
        this._noQuickDrag = noQuickDrag;
    }

    /**
     * 2.4.4.230 NoQuickDrag
     * @see {http://localhost/MS-VSDX.pdf#page=201}
     */
    get noQuickDrag() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._noQuickDrag;
        if (cell === undefined)
            cell = this.getParentCell('noQuickDrag');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.231 NoShow
     * @see {http://localhost/MS-VSDX.pdf#page=201}
     * @param {VisioCell} noShow
     */
    set noShow(noShow) {
        this.attributeSet('noShow');
        this._noShow = noShow;
    }

    /**
     * 2.4.4.231 NoShow
     * @see {http://localhost/MS-VSDX.pdf#page=201}
     */
    get noShow() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._noShow;
        if (cell === undefined)
            cell = this.getParentCell('noShow');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.232 NoSnap
     * @see {http://localhost/MS-VSDX.pdf#page=201}
     * @param {VisioCell} noSnap
     */
    set noSnap(noSnap) {
        this.attributeSet('noSnap');
        this._noSnap = noSnap;
    }

    /**
     * 2.4.4.232 NoSnap
     * @see {http://localhost/MS-VSDX.pdf#page=201}
     */
    get noSnap() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._noSnap;
        if (cell === undefined)
            cell = this.getParentCell('noSnap');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.233 ObjectKind
     * @see {http://localhost/MS-VSDX.pdf#page=201}
     * @param {VisioCell} objectKind
     */
    set objectKind(objectKind) {
        this.attributeSet('objectKind');
        this._objectKind = objectKind;
    }

    /**
     * 2.4.4.233 ObjectKind
     * @see {http://localhost/MS-VSDX.pdf#page=201}
     */
    get objectKind() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._objectKind;
        if (cell === undefined)
            cell = this.getParentCell('objectKind');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.234 ObjType
     * @see {http://localhost/MS-VSDX.pdf#page=202}
     * @param {VisioCell} objType
     */
    set objType(objType) {
        this.attributeSet('objType');
        this._objType = objType;
    }

    /**
     * 2.4.4.234 ObjType
     * @see {http://localhost/MS-VSDX.pdf#page=202}
     */
    get objType() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._objType;
        if (cell === undefined)
            cell = this.getParentCell('objType');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.235 OnPage
     * @see {http://localhost/MS-VSDX.pdf#page=202}
     * @param {VisioCell} onPage
     */
    set onPage(onPage) {
        this.attributeSet('onPage');
        this._onPage = onPage;
    }

    /**
     * 2.4.4.235 OnPage
     * @see {http://localhost/MS-VSDX.pdf#page=202}
     */
    get onPage() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._onPage;
        if (cell === undefined)
            cell = this.getParentCell('onPage');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.236 OutputFormat
     * @see {http://localhost/MS-VSDX.pdf#page=202}
     * @param {VisioCell} outputFormat
     */
    set outputFormat(outputFormat) {
        this.attributeSet('outputFormat');
        this._outputFormat = outputFormat;
    }

    /**
     * 2.4.4.236 OutputFormat
     * @see {http://localhost/MS-VSDX.pdf#page=202}
     */
    get outputFormat() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._outputFormat;
        if (cell === undefined)
            cell = this.getParentCell('outputFormat');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.237 Overline
     * @see {http://localhost/MS-VSDX.pdf#page=202}
     * @param {VisioCell} overline
     */
    set overline(overline) {
        this.attributeSet('overline');
        this._overline = overline;
    }

    /**
     * 2.4.4.237 Overline
     * @see {http://localhost/MS-VSDX.pdf#page=202}
     */
    get overline() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._overline;
        if (cell === undefined)
            cell = this.getParentCell('overline');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.238 PageBottomMargin
     * @see {http://localhost/MS-VSDX.pdf#page=202}
     * @param {VisioCell} pageBottomMargin
     */
    set pageBottomMargin(pageBottomMargin) {
        this.attributeSet('pageBottomMargin');
        this._pageBottomMargin = pageBottomMargin;
    }

    /**
     * 2.4.4.238 PageBottomMargin
     * @see {http://localhost/MS-VSDX.pdf#page=202}
     */
    get pageBottomMargin() {
        const visioType = VisioValueType.vScalar;
        let cell = this._pageBottomMargin;
        if (cell === undefined)
            cell = this.getParentCell('pageBottomMargin');
        if (cell === undefined) return this.getDefaultCellValue(visioType);
        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.239 PageHeight
     * @see {http://localhost/MS-VSDX.pdf#page=202}
     * @param {VisioCell} pageHeight
     */
    set pageHeight(pageHeight) {
        this.attributeSet('pageHeight');
        this._pageHeight = pageHeight;
    }

    /**
     * 2.4.4.239 PageHeight
     * @see {http://localhost/MS-VSDX.pdf#page=202}
     */
    get pageHeight() {
        const visioType = VisioValueType.vLength;
        let cell = this._pageHeight;
        if (cell === undefined)
            cell = this.getParentCell('pageHeight');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.240 PageLeftMargin
     * @see {http://localhost/MS-VSDX.pdf#page=202}
     * @param {VisioCell} pageLeftMargin
     */
    set pageLeftMargin(pageLeftMargin) {
        this.attributeSet('pageLeftMargin');
        this._pageLeftMargin = pageLeftMargin;
    }

    /**
     * 2.4.4.240 PageLeftMargin
     * @see {http://localhost/MS-VSDX.pdf#page=202}
     */
    get pageLeftMargin() {
        const visioType = VisioValueType.vScalar;
        let cell = this._pageLeftMargin;
        if (cell === undefined)
            cell = this.getParentCell('pageLeftMargin');
        if (cell === undefined) return this.getDefaultCellValue(visioType);
        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.241 PageLineJumpDirX
     * @see {http://localhost/MS-VSDX.pdf#page=202}
     * @param {VisioCell} pageLineJumpDirX
     */
    set pageLineJumpDirX(pageLineJumpDirX) {
        this.attributeSet('pageLineJumpDirX');
        this._pageLineJumpDirX = pageLineJumpDirX;
    }

    /**
     * 2.4.4.241 PageLineJumpDirX
     * @see {http://localhost/MS-VSDX.pdf#page=202}
     */
    get pageLineJumpDirX() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._pageLineJumpDirX;
        if (cell === undefined)
            cell = this.getParentCell('pageLineJumpDirX');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.242 PageLineJumpDirY
     * @see {http://localhost/MS-VSDX.pdf#page=203}
     * @param {VisioCell} pageLineJumpDirY
     */
    set pageLineJumpDirY(pageLineJumpDirY) {
        this.attributeSet('pageLineJumpDirY');
        this._pageLineJumpDirY = pageLineJumpDirY;
    }

    /**
     * 2.4.4.242 PageLineJumpDirY
     * @see {http://localhost/MS-VSDX.pdf#page=203}
     */
    get pageLineJumpDirY() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._pageLineJumpDirY;
        if (cell === undefined)
            cell = this.getParentCell('pageLineJumpDirY');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.243 PageLockDuplicate
     * @see {http://localhost/MS-VSDX.pdf#page=203}
     * @param {VisioCell} pageLockDuplicate
     */
    set pageLockDuplicate(pageLockDuplicate) {
        this.attributeSet('pageLockDuplicate');
        this._pageLockDuplicate = pageLockDuplicate;
    }

    /**
     * 2.4.4.243 PageLockDuplicate
     * @see {http://localhost/MS-VSDX.pdf#page=203}
     */
    get pageLockDuplicate() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._pageLockDuplicate;
        if (cell === undefined)
            cell = this.getParentCell('pageLockDuplicate');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.244 PageLockReplace
     * @see {http://localhost/MS-VSDX.pdf#page=203}
     * @param {VisioCell} pageLockReplace
     */
    set pageLockReplace(pageLockReplace) {
        this.attributeSet('pageLockReplace');
        this._pageLockReplace = pageLockReplace;
    }

    /**
     * 2.4.4.244 PageLockReplace
     * @see {http://localhost/MS-VSDX.pdf#page=203}
     */
    get pageLockReplace() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._pageLockReplace;
        if (cell === undefined)
            cell = this.getParentCell('pageLockReplace');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.245 PageRightMargin
     * @see {http://localhost/MS-VSDX.pdf#page=203}
     * @param {VisioCell} pageRightMargin
     */
    set pageRightMargin(pageRightMargin) {
        this.attributeSet('pageRightMargin');
        this._pageRightMargin = pageRightMargin;
    }

    /**
     * 2.4.4.245 PageRightMargin
     * @see {http://localhost/MS-VSDX.pdf#page=203}
     */
    get pageRightMargin() {
        const visioType = VisioValueType.vScalar;
        let cell = this._pageRightMargin;
        if (cell === undefined)
            cell = this.getParentCell('pageRightMargin');
        if (cell === undefined) return this.getDefaultCellValue(visioType);
        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.246 PageScale
     * @see {http://localhost/MS-VSDX.pdf#page=203}
     * @param {VisioCell} pageScale
     */
    set pageScale(pageScale) {
        this.attributeSet('pageScale');
        this._pageScale = pageScale;
    }

    /**
     * 2.4.4.246 PageScale
     * @see {http://localhost/MS-VSDX.pdf#page=203}
     */
    get pageScale() {
        const visioType = VisioValueType.vLength;
        let cell = this._pageScale;
        if (cell === undefined)
            cell = this.getParentCell('pageScale');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.247 PageShapeSplit
     * @see {http://localhost/MS-VSDX.pdf#page=203}
     * @param {VisioCell} pageShapeSplit
     */
    set pageShapeSplit(pageShapeSplit) {
        this.attributeSet('pageShapeSplit');
        this._pageShapeSplit = pageShapeSplit;
    }

    /**
     * 2.4.4.247 PageShapeSplit
     * @see {http://localhost/MS-VSDX.pdf#page=203}
     */
    get pageShapeSplit() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._pageShapeSplit;
        if (cell === undefined)
            cell = this.getParentCell('pageShapeSplit');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.248 PagesX
     * @see {http://localhost/MS-VSDX.pdf#page=203}
     * @param {VisioCell} pagesX
     */
    set pagesX(pagesX) {
        this.attributeSet('pagesX');
        this._pagesX = pagesX;
    }

    /**
     * 2.4.4.248 PagesX
     * @see {http://localhost/MS-VSDX.pdf#page=203}
     */
    get pagesX() {
        const visioType = VisioValueType.PtgUnsShort;
        let cell = this._pagesX;
        if (cell === undefined)
            cell = this.getParentCell('pagesX');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.249 PagesY
     * @see {http://localhost/MS-VSDX.pdf#page=203}
     * @param {VisioCell} pagesY
     */
    set pagesY(pagesY) {
        this.attributeSet('pagesY');
        this._pagesY = pagesY;
    }

    /**
     * 2.4.4.249 PagesY
     * @see {http://localhost/MS-VSDX.pdf#page=203}
     */
    get pagesY() {
        const visioType = VisioValueType.PtgUnsShort;
        let cell = this._pagesY;
        if (cell === undefined)
            cell = this.getParentCell('pagesY');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.250 PageTopMargin
     * @see {http://localhost/MS-VSDX.pdf#page=203}
     * @param {VisioCell} pageTopMargin
     */
    set pageTopMargin(pageTopMargin) {
        this.attributeSet('pageTopMargin');
        this._pageTopMargin = pageTopMargin;
    }

    /**
     * 2.4.4.250 PageTopMargin
     * @see {http://localhost/MS-VSDX.pdf#page=203}
     */
    get pageTopMargin() {
        const visioType = VisioValueType.vScalar;
        let cell = this._pageTopMargin;
        if (cell === undefined)
            cell = this.getParentCell('pageTopMargin');
        if (cell === undefined) return this.getDefaultCellValue(visioType);
        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.251 PageWidth
     * @see {http://localhost/MS-VSDX.pdf#page=203}
     * @param {VisioCell} pageWidth
     */
    set pageWidth(pageWidth) {
        this.attributeSet('pageWidth');
        this._pageWidth = pageWidth;
    }

    /**
     * 2.4.4.251 PageWidth
     * @see {http://localhost/MS-VSDX.pdf#page=203}
     */
    get pageWidth() {
        const visioType = VisioValueType.vLength;
        let cell = this._pageWidth;
        if (cell === undefined)
            cell = this.getParentCell('pageWidth');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.252 PaperKind
     * @see {http://localhost/MS-VSDX.pdf#page=204}
     * @param {VisioCell} paperKind
     */
    set paperKind(paperKind) {
        this.attributeSet('paperKind');
        this._paperKind = paperKind;
    }

    /**
     * 2.4.4.252 PaperKind
     * @see {http://localhost/MS-VSDX.pdf#page=204}
     */
    get paperKind() {
        const visioType = VisioValueType.PtgUnsShort;
        let cell = this._paperKind;
        if (cell === undefined)
            cell = this.getParentCell('paperKind');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.253 PaperSource
     * @see {http://localhost/MS-VSDX.pdf#page=204}
     * @param {VisioCell} paperSource
     */
    set paperSource(paperSource) {
        this.attributeSet('paperSource');
        this._paperSource = paperSource;
    }

    /**
     * 2.4.4.253 PaperSource
     * @see {http://localhost/MS-VSDX.pdf#page=204}
     */
    get paperSource() {
        const visioType = VisioValueType.PtgUnsShort;
        let cell = this._paperSource;
        if (cell === undefined)
            cell = this.getParentCell('paperSource');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.254 Perspective
     * @see {http://localhost/MS-VSDX.pdf#page=204}
     * @param {VisioCell} perspective
     */
    set perspective(perspective) {
        this.attributeSet('perspective');
        this._perspective = perspective;
    }

    /**
     * 2.4.4.254 Perspective
     * @see {http://localhost/MS-VSDX.pdf#page=204}
     */
    get perspective() {
        let cell = this._perspective;
        if (cell === undefined)
            cell = this.getParentCell('perspective');

        const visioType = VisioValueType.vAngle;
        //TODO miky
        // VisioValueType.vScalar
        debug.log('resolve cell type "perspective"');
        if (cell.units) {
            debug.log('vScalar unclear');
        }

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.255 PinX
     * @see {http://localhost/MS-VSDX.pdf#page=204}
     * @param {VisioCell} pinX
     */
    set pinX(pinX) {
        this.attributeSet('pinX');
        this._pinX = pinX;
    }

    /**
     * 2.4.4.255 PinX
     * @see {http://localhost/MS-VSDX.pdf#page=204}
     */
    get pinX() {
        const visioType = VisioValueType.vLength;
        let cell = this._pinX;
        if (cell === undefined)
            cell = this.getParentCell('pinX');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.256 PinY
     * @see {http://localhost/MS-VSDX.pdf#page=204}
     * @param {VisioCell} pinY
     */
    set pinY(pinY) {
        this.attributeSet('pinY');
        this._pinY = pinY;
    }

    /**
     * 2.4.4.256 PinY
     * @see {http://localhost/MS-VSDX.pdf#page=204}
     */
    get pinY() {
        const visioType = VisioValueType.vLength;
        let cell = this._pinY;
        if (cell === undefined)
            cell = this.getParentCell('pinY');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.257 PlaceDepth
     * @see {http://localhost/MS-VSDX.pdf#page=204}
     * @param {VisioCell} placeDepth
     */
    set placeDepth(placeDepth) {
        this.attributeSet('placeDepth');
        this._placeDepth = placeDepth;
    }

    /**
     * 2.4.4.257 PlaceDepth
     * @see {http://localhost/MS-VSDX.pdf#page=204}
     */
    get placeDepth() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._placeDepth;
        if (cell === undefined)
            cell = this.getParentCell('placeDepth');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.258 PlaceFlip
     * @see {http://localhost/MS-VSDX.pdf#page=204}
     * @param {VisioCell} placeFlip
     */
    set placeFlip(placeFlip) {
        this.attributeSet('placeFlip');
        this._placeFlip = placeFlip;
    }

    /**
     * 2.4.4.258 PlaceFlip
     * @see {http://localhost/MS-VSDX.pdf#page=204}
     */
    get placeFlip() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._placeFlip;
        if (cell === undefined)
            cell = this.getParentCell('placeFlip');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.259 PlaceStyle
     * @see {http://localhost/MS-VSDX.pdf#page=204}
     * @param {VisioCell} placeStyle
     */
    set placeStyle(placeStyle) {
        this.attributeSet('placeStyle');
        this._placeStyle = placeStyle;
    }

    /**
     * 2.4.4.259 PlaceStyle
     * @see {http://localhost/MS-VSDX.pdf#page=204}
     */
    get placeStyle() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._placeStyle;
        if (cell === undefined)
            cell = this.getParentCell('placeStyle');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.260 PlowCode
     * @see {http://localhost/MS-VSDX.pdf#page=204}
     * @param {VisioCell} plowCode
     */
    set plowCode(plowCode) {
        this.attributeSet('plowCode');
        this._plowCode = plowCode;
    }

    /**
     * 2.4.4.260 PlowCode
     * @see {http://localhost/MS-VSDX.pdf#page=204}
     */
    get plowCode() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._plowCode;
        if (cell === undefined)
            cell = this.getParentCell('plowCode');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.261 Pos
     * @see {http://localhost/MS-VSDX.pdf#page=205}
     * @param {VisioCell} pos
     */
    set pos(pos) {
        this.attributeSet('pos');
        this._pos = pos;
    }

    /**
     * 2.4.4.261 Pos
     * @see {http://localhost/MS-VSDX.pdf#page=205}
     */
    get pos() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._pos;
        if (cell === undefined)
            cell = this.getParentCell('pos');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.262 Position
     * @see {http://localhost/MS-VSDX.pdf#page=205}
     * @param {VisioCell} position
     */
    set position(position) {
        this.attributeSet('position');
        this._position = position;
    }

    /**
     * 2.4.4.262 Position
     * @see {http://localhost/MS-VSDX.pdf#page=205}
     */
    get position() {
        const visioType = VisioValueType.vLength;
        let cell = this._position;
        if (cell === undefined)
            cell = this.getParentCell('position');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.263 PreviewQuality
     * @see {http://localhost/MS-VSDX.pdf#page=205}
     * @param {VisioCell} previewQuality
     */
    set previewQuality(previewQuality) {
        this.attributeSet('previewQuality');
        this._previewQuality = previewQuality;
    }

    /**
     * 2.4.4.263 PreviewQuality
     * @see {http://localhost/MS-VSDX.pdf#page=205}
     */
    get previewQuality() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._previewQuality;
        if (cell === undefined)
            cell = this.getParentCell('previewQuality');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.264 PreviewScope
     * @see {http://localhost/MS-VSDX.pdf#page=205}
     * @param {VisioCell} previewScope
     */
    set previewScope(previewScope) {
        this.attributeSet('previewScope');
        this._previewScope = previewScope;
    }

    /**
     * 2.4.4.264 PreviewScope
     * @see {http://localhost/MS-VSDX.pdf#page=205}
     */
    get previewScope() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._previewScope;
        if (cell === undefined)
            cell = this.getParentCell('previewScope');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.265 Print
     * @see {http://localhost/MS-VSDX.pdf#page=205}
     * @param {VisioCell} print
     */
    set print(print) {
        this.attributeSet('print');
        this._print = print;
    }

    /**
     * 2.4.4.265 Print
     * @see {http://localhost/MS-VSDX.pdf#page=205}
     */
    get print() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._print;
        if (cell === undefined)
            cell = this.getParentCell('print');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.266 PrintGrid
     * @see {http://localhost/MS-VSDX.pdf#page=205}
     * @param {VisioCell} printGrid
     */
    set printGrid(printGrid) {
        this.attributeSet('printGrid');
        this._printGrid = printGrid;
    }

    /**
     * 2.4.4.266 PrintGrid
     * @see {http://localhost/MS-VSDX.pdf#page=205}
     */
    get printGrid() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._printGrid;
        if (cell === undefined)
            cell = this.getParentCell('printGrid');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.267 PrintPageOrientation
     * @see {http://localhost/MS-VSDX.pdf#page=205}
     * @param {VisioCell} printPageOrientation
     */
    set printPageOrientation(printPageOrientation) {
        this.attributeSet('printPageOrientation');
        this._printPageOrientation = printPageOrientation;
    }

    /**
     * 2.4.4.267 PrintPageOrientation
     * @see {http://localhost/MS-VSDX.pdf#page=205}
     */
    get printPageOrientation() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._printPageOrientation;
        if (cell === undefined)
            cell = this.getParentCell('printPageOrientation');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.268 Prompt
     * @see {http://localhost/MS-VSDX.pdf#page=206}
     * @param {VisioCell} prompt
     */
    set prompt(prompt) {
        this.attributeSet('prompt');
        this._prompt = prompt;
    }

    /**
     * 2.4.4.268 Prompt
     * @see {http://localhost/MS-VSDX.pdf#page=206}
     */
    get prompt() {
        const visioType = VisioValueType.PtgString;
        let cell = this._prompt;
        if (cell === undefined)
            cell = this.getParentCell('prompt');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.269 QuickStyleEffectsMatrix
     * @see {http://localhost/MS-VSDX.pdf#page=206}
     * @param {VisioCell} quickStyleEffectsMatrix
     */
    set quickStyleEffectsMatrix(quickStyleEffectsMatrix) {
        this.attributeSet('quickStyleEffectsMatrix');
        this._quickStyleEffectsMatrix = quickStyleEffectsMatrix;
    }

    /**
     * 2.4.4.269 QuickStyleEffectsMatrix
     * @see {http://localhost/MS-VSDX.pdf#page=206}
     */
    get quickStyleEffectsMatrix() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._quickStyleEffectsMatrix;
        if (cell === undefined)
            cell = this.getParentCell('quickStyleEffectsMatrix');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.270 QuickStyleFillColor
     * @see {http://localhost/MS-VSDX.pdf#page=207}
     * @param {VisioCell} quickStyleFillColor
     */
    set quickStyleFillColor(quickStyleFillColor) {
        this.attributeSet('quickStyleFillColor');
        this._quickStyleFillColor = quickStyleFillColor;
    }

    /**
     * 2.4.4.270 QuickStyleFillColor
     * @see {http://localhost/MS-VSDX.pdf#page=207}
     */
    get quickStyleFillColor() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._quickStyleFillColor;
        if (cell === undefined)
            cell = this.getParentCell('quickStyleFillColor');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.271 QuickStyleFillMatrix
     * @see {http://localhost/MS-VSDX.pdf#page=208}
     * @param {VisioCell} quickStyleFillMatrix
     */
    set quickStyleFillMatrix(quickStyleFillMatrix) {
        this.attributeSet('quickStyleFillMatrix');
        this._quickStyleFillMatrix = quickStyleFillMatrix;
    }

    /**
     * 2.4.4.271 QuickStyleFillMatrix
     * @see {http://localhost/MS-VSDX.pdf#page=208}
     */
    get quickStyleFillMatrix() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._quickStyleFillMatrix;
        if (cell === undefined)
            cell = this.getParentCell('quickStyleFillMatrix');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.272 QuickStyleFontColor
     * @see {http://localhost/MS-VSDX.pdf#page=209}
     * @param {VisioCell} quickStyleFontColor
     */
    set quickStyleFontColor(quickStyleFontColor) {
        this.attributeSet('quickStyleFontColor');
        this._quickStyleFontColor = quickStyleFontColor;
    }

    /**
     * 2.4.4.272 QuickStyleFontColor
     * @see {http://localhost/MS-VSDX.pdf#page=209}
     */
    get quickStyleFontColor() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._quickStyleFontColor;
        if (cell === undefined)
            cell = this.getParentCell('quickStyleFontColor');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.273 QuickStyleFontMatrix
     * @see {http://localhost/MS-VSDX.pdf#page=209}
     * @param {VisioCell} quickStyleFontMatrix
     */
    set quickStyleFontMatrix(quickStyleFontMatrix) {
        this.attributeSet('quickStyleFontMatrix');
        this._quickStyleFontMatrix = quickStyleFontMatrix;
    }

    /**
     * 2.4.4.273 QuickStyleFontMatrix
     * @see {http://localhost/MS-VSDX.pdf#page=209}
     */
    get quickStyleFontMatrix() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._quickStyleFontMatrix;
        if (cell === undefined)
            cell = this.getParentCell('quickStyleFontMatrix');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.274 QuickStyleLineColor
     * @see {http://localhost/MS-VSDX.pdf#page=210}
     * @param {VisioCell} quickStyleLineColor
     */
    set quickStyleLineColor(quickStyleLineColor) {
        this.attributeSet('quickStyleLineColor');
        this._quickStyleLineColor = quickStyleLineColor;
    }

    /**
     * 2.4.4.274 QuickStyleLineColor
     * @see {http://localhost/MS-VSDX.pdf#page=210}
     */
    get quickStyleLineColor() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._quickStyleLineColor;
        if (cell === undefined)
            cell = this.getParentCell('quickStyleLineColor');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.275 QuickStyleLineMatrix
     * @see {http://localhost/MS-VSDX.pdf#page=210}
     * @param {VisioCell} quickStyleLineMatrix
     */
    set quickStyleLineMatrix(quickStyleLineMatrix) {
        this.attributeSet('quickStyleLineMatrix');
        this._quickStyleLineMatrix = quickStyleLineMatrix;
    }

    /**
     * 2.4.4.275 QuickStyleLineMatrix
     * @see {http://localhost/MS-VSDX.pdf#page=210}
     */
    get quickStyleLineMatrix() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._quickStyleLineMatrix;
        if (cell === undefined)
            cell = this.getParentCell('quickStyleLineMatrix');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.276 QuickStyleShadowColor
     * @see {http://localhost/MS-VSDX.pdf#page=211}
     * @param {VisioCell} quickStyleShadowColor
     */
    set quickStyleShadowColor(quickStyleShadowColor) {
        this.attributeSet('quickStyleShadowColor');
        this._quickStyleShadowColor = quickStyleShadowColor;
    }

    /**
     * 2.4.4.276 QuickStyleShadowColor
     * @see {http://localhost/MS-VSDX.pdf#page=211}
     */
    get quickStyleShadowColor() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._quickStyleShadowColor;
        if (cell === undefined)
            cell = this.getParentCell('quickStyleShadowColor');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.277 QuickStyleType
     * @see {http://localhost/MS-VSDX.pdf#page=211}
     * @param {VisioCell} quickStyleType
     */
    set quickStyleType(quickStyleType) {
        this.attributeSet('quickStyleType');
        this._quickStyleType = quickStyleType;
    }

    /**
     * 2.4.4.277 QuickStyleType
     * @see {http://localhost/MS-VSDX.pdf#page=211}
     */
    get quickStyleType() {
        const visioType = VisioValueType.PtgInt;
        let cell = this._quickStyleType;
        if (cell === undefined)
            cell = this.getParentCell('quickStyleType');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.278 QuickStyleVariation
     * @see {http://localhost/MS-VSDX.pdf#page=211}
     * @param {VisioCell} quickStyleVariation
     */
    set quickStyleVariation(quickStyleVariation) {
        this.attributeSet('quickStyleVariation');
        this._quickStyleVariation = quickStyleVariation;
    }

    /**
     * 2.4.4.278 QuickStyleVariation
     * @see {http://localhost/MS-VSDX.pdf#page=211}
     */
    get quickStyleVariation() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._quickStyleVariation;
        if (cell === undefined)
            cell = this.getParentCell('quickStyleVariation');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.279 ReadOnly
     * @see {http://localhost/MS-VSDX.pdf#page=213}
     * @param {VisioCell} readOnly
     */
    set readOnly(readOnly) {
        this.attributeSet('readOnly');
        this._readOnly = readOnly;
    }

    /**
     * 2.4.4.279 ReadOnly
     * @see {http://localhost/MS-VSDX.pdf#page=213}
     */
    get readOnly() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._readOnly;
        if (cell === undefined)
            cell = this.getParentCell('readOnly');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.280 ReflectionBlur
     * @see {http://localhost/MS-VSDX.pdf#page=213}
     * @param {VisioCell} reflectionBlur
     */
    set reflectionBlur(reflectionBlur) {
        this.attributeSet('reflectionBlur');
        this._reflectionBlur = reflectionBlur;
    }

    /**
     * 2.4.4.280 ReflectionBlur
     * @see {http://localhost/MS-VSDX.pdf#page=213}
     */
    get reflectionBlur() {
        const visioType = VisioValueType.vLength;
        let cell = this._reflectionBlur;
        if (cell === undefined)
            cell = this.getParentCell('reflectionBlur');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.281 ReflectionDist
     * @see {http://localhost/MS-VSDX.pdf#page=213}
     * @param {VisioCell} reflectionDist
     */
    set reflectionDist(reflectionDist) {
        this.attributeSet('reflectionDist');
        this._reflectionDist = reflectionDist;
    }

    /**
     * 2.4.4.281 ReflectionDist
     * @see {http://localhost/MS-VSDX.pdf#page=213}
     */
    get reflectionDist() {
        const visioType = VisioValueType.vLength;
        let cell = this._reflectionDist;
        if (cell === undefined)
            cell = this.getParentCell('reflectionDist');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.282 ReflectionSize
     * @see {http://localhost/MS-VSDX.pdf#page=213}
     * @param {VisioCell} reflectionSize
     */
    set reflectionSize(reflectionSize) {
        this.attributeSet('reflectionSize');
        this._reflectionSize = reflectionSize;
    }

    /**
     * 2.4.4.282 ReflectionSize
     * @see {http://localhost/MS-VSDX.pdf#page=213}
     */
    get reflectionSize() {
        const visioType = VisioValueType.vScalar;
        let cell = this._reflectionSize;
        if (cell === undefined)
            cell = this.getParentCell('reflectionSize');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.283 ReflectionTrans
     * @see {http://localhost/MS-VSDX.pdf#page=213}
     * @param {VisioCell} reflectionTrans
     */
    set reflectionTrans(reflectionTrans) {
        this.attributeSet('reflectionTrans');
        this._reflectionTrans = reflectionTrans;
    }

    /**
     * 2.4.4.283 ReflectionTrans
     * @see {http://localhost/MS-VSDX.pdf#page=213}
     */
    get reflectionTrans() {
        const visioType = VisioValueType.vScalar;
        let cell = this._reflectionTrans;
        if (cell === undefined)
            cell = this.getParentCell('reflectionTrans');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.284 Relationships
     * @see {http://localhost/MS-VSDX.pdf#page=213}
     * @param {VisioCell} relationships
     */
    set relationships(relationships) {
        this.attributeSet('relationships');
        this._relationships = relationships;
    }

    /**
     * 2.4.4.284 Relationships
     * @see {http://localhost/MS-VSDX.pdf#page=213}
     */
    get relationships() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._relationships;
        if (cell === undefined)
            cell = this.getParentCell('relationships');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.285 ReplaceCopyCells
     * @see {http://localhost/MS-VSDX.pdf#page=213}
     * @param {VisioCell} replaceCopyCells
     */
    set replaceCopyCells(replaceCopyCells) {
        this.attributeSet('replaceCopyCells');
        this._replaceCopyCells = replaceCopyCells;
    }

    /**
     * 2.4.4.285 ReplaceCopyCells
     * @see {http://localhost/MS-VSDX.pdf#page=213}
     */
    get replaceCopyCells() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._replaceCopyCells;
        if (cell === undefined)
            cell = this.getParentCell('replaceCopyCells');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.286 ReplaceLockFormat
     * @see {http://localhost/MS-VSDX.pdf#page=213}
     * @param {VisioCell} replaceLockFormat
     */
    set replaceLockFormat(replaceLockFormat) {
        this.attributeSet('replaceLockFormat');
        this._replaceLockFormat = replaceLockFormat;
    }

    /**
     * 2.4.4.286 ReplaceLockFormat
     * @see {http://localhost/MS-VSDX.pdf#page=213}
     */
    get replaceLockFormat() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._replaceLockFormat;
        if (cell === undefined)
            cell = this.getParentCell('replaceLockFormat');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.287 ReplaceLockShapeData
     * @see {http://localhost/MS-VSDX.pdf#page=214}
     * @param {VisioCell} replaceLockShapeData
     */
    set replaceLockShapeData(replaceLockShapeData) {
        this.attributeSet('replaceLockShapeData');
        this._replaceLockShapeData = replaceLockShapeData;
    }

    /**
     * 2.4.4.287 ReplaceLockShapeData
     * @see {http://localhost/MS-VSDX.pdf#page=214}
     */
    get replaceLockShapeData() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._replaceLockShapeData;
        if (cell === undefined)
            cell = this.getParentCell('replaceLockShapeData');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.288 ReplaceLockText
     * @see {http://localhost/MS-VSDX.pdf#page=214}
     * @param {VisioCell} replaceLockText
     */
    set replaceLockText(replaceLockText) {
        this.attributeSet('replaceLockText');
        this._replaceLockText = replaceLockText;
    }

    /**
     * 2.4.4.288 ReplaceLockText
     * @see {http://localhost/MS-VSDX.pdf#page=214}
     */
    get replaceLockText() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._replaceLockText;
        if (cell === undefined)
            cell = this.getParentCell('replaceLockText');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.289 ResizeMode
     * @see {http://localhost/MS-VSDX.pdf#page=214}
     * @param {VisioCell} resizeMode
     */
    set resizeMode(resizeMode) {
        this.attributeSet('resizeMode');
        this._resizeMode = resizeMode;
    }

    /**
     * 2.4.4.289 ResizeMode
     * @see {http://localhost/MS-VSDX.pdf#page=214}
     */
    get resizeMode() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._resizeMode;
        if (cell === undefined)
            cell = this.getParentCell('resizeMode');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.290 ResizePage
     * @see {http://localhost/MS-VSDX.pdf#page=214}
     * @param {VisioCell} resizePage
     */
    set resizePage(resizePage) {
        this.attributeSet('resizePage');
        this._resizePage = resizePage;
    }

    /**
     * 2.4.4.290 ResizePage
     * @see {http://localhost/MS-VSDX.pdf#page=214}
     */
    get resizePage() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._resizePage;
        if (cell === undefined)
            cell = this.getParentCell('resizePage');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.291 ReviewerID
     * @see {http://localhost/MS-VSDX.pdf#page=214}
     * @param {VisioCell} reviewerID
     */
    set reviewerID(reviewerID) {
        this.attributeSet('reviewerID');
        this._reviewerID = reviewerID;
    }

    /**
     * 2.4.4.291 ReviewerID
     * @see {http://localhost/MS-VSDX.pdf#page=214}
     */
    get reviewerID() {
        const visioType = VisioValueType.PtgShort;
        let cell = this._reviewerID;
        if (cell === undefined)
            cell = this.getParentCell('reviewerID');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.292 RightMargin
     * @see {http://localhost/MS-VSDX.pdf#page=214}
     * @param {VisioCell} rightMargin
     */
    set rightMargin(rightMargin) {
        this.attributeSet('rightMargin');
        this._rightMargin = rightMargin;
    }

    /**
     * 2.4.4.292 RightMargin
     * @see {http://localhost/MS-VSDX.pdf#page=214}
     */
    get rightMargin() {
        const visioType = VisioValueType.vLength;
        let cell = this._rightMargin;
        if (cell === undefined)
            cell = this.getParentCell('rightMargin');
        if (cell === undefined)
            cell = this.getStylesheetTextStyleCell('rightMargin');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.293 RotateGradientWithShape
     * @see {http://localhost/MS-VSDX.pdf#page=214}
     * @param {VisioCell} rotateGradientWithShape
     */
    set rotateGradientWithShape(rotateGradientWithShape) {
        this.attributeSet('rotateGradientWithShape');
        this._rotateGradientWithShape = rotateGradientWithShape;
    }

    /**
     * 2.4.4.293 RotateGradientWithShape
     * @see {http://localhost/MS-VSDX.pdf#page=214}
     */
    get rotateGradientWithShape() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._rotateGradientWithShape;
        if (cell === undefined)
            cell = this.getParentCell('rotateGradientWithShape');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.294 RotationType
     * @see {http://localhost/MS-VSDX.pdf#page=214}
     * @param {VisioCell} rotationType
     */
    set rotationType(rotationType) {
        this.attributeSet('rotationType');
        this._rotationType = rotationType;
    }

    /**
     * 2.4.4.294 RotationType
     * @see {http://localhost/MS-VSDX.pdf#page=214}
     */
    get rotationType() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._rotationType;
        if (cell === undefined)
            cell = this.getParentCell('rotationType');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.295 RotationXAngle
     * @see {http://localhost/MS-VSDX.pdf#page=215}
     * @param {VisioCell} rotationXAngle
     */
    set rotationXAngle(rotationXAngle) {
        this.attributeSet('rotationXAngle');
        this._rotationXAngle = rotationXAngle;
    }

    /**
     * 2.4.4.295 RotationXAngle
     * @see {http://localhost/MS-VSDX.pdf#page=215}
     */
    get rotationXAngle() {
        const visioType = VisioValueType.vAngle;
        let cell = this._rotationXAngle;
        if (cell === undefined)
            cell = this.getParentCell('rotationXAngle');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.296 RotationYAngle
     * @see {http://localhost/MS-VSDX.pdf#page=215}
     * @param {VisioCell} rotationYAngle
     */
    set rotationYAngle(rotationYAngle) {
        this.attributeSet('rotationYAngle');
        this._rotationYAngle = rotationYAngle;
    }

    /**
     * 2.4.4.296 RotationYAngle
     * @see {http://localhost/MS-VSDX.pdf#page=215}
     */
    get rotationYAngle() {
        const visioType = VisioValueType.vAngle;
        let cell = this._rotationYAngle;
        if (cell === undefined)
            cell = this.getParentCell('rotationYAngle');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.297 RotationZAngle
     * @see {http://localhost/MS-VSDX.pdf#page=215}
     * @param {VisioCell} rotationZAngle
     */
    set rotationZAngle(rotationZAngle) {
        this.attributeSet('rotationZAngle');
        this._rotationZAngle = rotationZAngle;
    }

    /**
     * 2.4.4.297 RotationZAngle
     * @see {http://localhost/MS-VSDX.pdf#page=215}
     */
    get rotationZAngle() {
        const visioType = VisioValueType.vAngle;
        let cell = this._rotationZAngle;
        if (cell === undefined)
            cell = this.getParentCell('rotationZAngle');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.298 Rounding
     * @see {http://localhost/MS-VSDX.pdf#page=215}
     * @param {VisioCell} rounding
     */
    set rounding(rounding) {
        this.attributeSet('rounding');
        this._rounding = rounding;
    }

    /**
     * 2.4.4.298 Rounding
     * @see {http://localhost/MS-VSDX.pdf#page=215}
     */
    get rounding() {
        const visioType = VisioValueType.vLength;
        let cell = this._rounding;
        if (cell === undefined)
            cell = this.getParentCell('rounding');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.299 RouteStyle
     * @see {http://localhost/MS-VSDX.pdf#page=215}
     * @param {VisioCell} routeStyle
     */
    set routeStyle(routeStyle) {
        this.attributeSet('routeStyle');
        this._routeStyle = routeStyle;
    }

    /**
     * 2.4.4.299 RouteStyle
     * @see {http://localhost/MS-VSDX.pdf#page=215}
     */
    get routeStyle() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._routeStyle;
        if (cell === undefined)
            cell = this.getParentCell('routeStyle');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.300 ScaleX
     * @see {http://localhost/MS-VSDX.pdf#page=215}
     * @param {VisioCell} scaleX
     */
    set scaleX(scaleX) {
        this.attributeSet('scaleX');
        this._scaleX = scaleX;
    }

    /**
     * 2.4.4.300 ScaleX
     * @see {http://localhost/MS-VSDX.pdf#page=215}
     */
    get scaleX() {
        const visioType = VisioValueType.vScalar;
        let cell = this._scaleX;
        if (cell === undefined)
            cell = this.getParentCell('scaleX');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.301 ScaleY
     * @see {http://localhost/MS-VSDX.pdf#page=216}
     * @param {VisioCell} scaleY
     */
    set scaleY(scaleY) {
        this.attributeSet('scaleY');
        this._scaleY = scaleY;
    }

    /**
     * 2.4.4.301 ScaleY
     * @see {http://localhost/MS-VSDX.pdf#page=216}
     */
    get scaleY() {
        const visioType = VisioValueType.vScalar;
        let cell = this._scaleY;
        if (cell === undefined)
            cell = this.getParentCell('scaleY');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.302 SelectMode
     * @see {http://localhost/MS-VSDX.pdf#page=216}
     * @param {VisioCell} selectMode
     */
    set selectMode(selectMode) {
        this.attributeSet('selectMode');
        this._selectMode = selectMode;
    }

    /**
     * 2.4.4.302 SelectMode
     * @see {http://localhost/MS-VSDX.pdf#page=216}
     */
    get selectMode() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._selectMode;
        if (cell === undefined)
            cell = this.getParentCell('selectMode');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.303 ShapeFixedCode
     * @see {http://localhost/MS-VSDX.pdf#page=216}
     * @param {VisioCell} shapeFixedCode
     */
    set shapeFixedCode(shapeFixedCode) {
        this.attributeSet('shapeFixedCode');
        this._shapeFixedCode = shapeFixedCode;
    }

    /**
     * 2.4.4.303 ShapeFixedCode
     * @see {http://localhost/MS-VSDX.pdf#page=216}
     */
    get shapeFixedCode() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._shapeFixedCode;
        if (cell === undefined)
            cell = this.getParentCell('shapeFixedCode');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.304 ShapeKeywords
     * @see {http://localhost/MS-VSDX.pdf#page=216}
     * @param {VisioCell} shapeKeywords
     */
    set shapeKeywords(shapeKeywords) {
        this.attributeSet('shapeKeywords');
        this._shapeKeywords = shapeKeywords;
    }

    /**
     * 2.4.4.304 ShapeKeywords
     * @see {http://localhost/MS-VSDX.pdf#page=216}
     */
    get shapeKeywords() {
        const visioType = VisioValueType.PtgString;
        let cell = this._shapeKeywords;
        if (cell === undefined)
            cell = this.getParentCell('shapeKeywords');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.305 ShapePermeablePlace
     * @see {http://localhost/MS-VSDX.pdf#page=216}
     * @param {VisioCell} shapePermeablePlace
     */
    set shapePermeablePlace(shapePermeablePlace) {
        this.attributeSet('shapePermeablePlace');
        this._shapePermeablePlace = shapePermeablePlace;
    }

    /**
     * 2.4.4.305 ShapePermeablePlace
     * @see {http://localhost/MS-VSDX.pdf#page=216}
     */
    get shapePermeablePlace() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._shapePermeablePlace;
        if (cell === undefined)
            cell = this.getParentCell('shapePermeablePlace');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.306 ShapePermeableX
     * @see {http://localhost/MS-VSDX.pdf#page=216}
     * @param {VisioCell} shapePermeableX
     */
    set shapePermeableX(shapePermeableX) {
        this.attributeSet('shapePermeableX');
        this._shapePermeableX = shapePermeableX;
    }

    /**
     * 2.4.4.306 ShapePermeableX
     * @see {http://localhost/MS-VSDX.pdf#page=216}
     */
    get shapePermeableX() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._shapePermeableX;
        if (cell === undefined)
            cell = this.getParentCell('shapePermeableX');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.307 ShapePermeableY
     * @see {http://localhost/MS-VSDX.pdf#page=216}
     * @param {VisioCell} shapePermeableY
     */
    set shapePermeableY(shapePermeableY) {
        this.attributeSet('shapePermeableY');
        this._shapePermeableY = shapePermeableY;
    }

    /**
     * 2.4.4.307 ShapePermeableY
     * @see {http://localhost/MS-VSDX.pdf#page=216}
     */
    get shapePermeableY() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._shapePermeableY;
        if (cell === undefined)
            cell = this.getParentCell('shapePermeableY');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.308 ShapePlaceFlip
     * @see {http://localhost/MS-VSDX.pdf#page=216}
     * @param {VisioCell} shapePlaceFlip
     */
    set shapePlaceFlip(shapePlaceFlip) {
        this.attributeSet('shapePlaceFlip');
        this._shapePlaceFlip = shapePlaceFlip;
    }

    /**
     * 2.4.4.308 ShapePlaceFlip
     * @see {http://localhost/MS-VSDX.pdf#page=216}
     */
    get shapePlaceFlip() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._shapePlaceFlip;
        if (cell === undefined)
            cell = this.getParentCell('shapePlaceFlip');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.309 ShapePlaceStyle
     * @see {http://localhost/MS-VSDX.pdf#page=217}
     * @param {VisioCell} shapePlaceStyle
     */
    set shapePlaceStyle(shapePlaceStyle) {
        this.attributeSet('shapePlaceStyle');
        this._shapePlaceStyle = shapePlaceStyle;
    }

    /**
     * 2.4.4.309 ShapePlaceStyle
     * @see {http://localhost/MS-VSDX.pdf#page=217}
     */
    get shapePlaceStyle() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._shapePlaceStyle;
        if (cell === undefined)
            cell = this.getParentCell('shapePlaceStyle');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.310 ShapePlowCode
     * @see {http://localhost/MS-VSDX.pdf#page=217}
     * @param {VisioCell} shapePlowCode
     */
    set shapePlowCode(shapePlowCode) {
        this.attributeSet('shapePlowCode');
        this._shapePlowCode = shapePlowCode;
    }

    /**
     * 2.4.4.310 ShapePlowCode
     * @see {http://localhost/MS-VSDX.pdf#page=217}
     */
    get shapePlowCode() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._shapePlowCode;
        if (cell === undefined)
            cell = this.getParentCell('shapePlowCode');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.311 ShapeRouteStyle
     * @see {http://localhost/MS-VSDX.pdf#page=217}
     * @param {VisioCell} shapeRouteStyle
     */
    set shapeRouteStyle(shapeRouteStyle) {
        this.attributeSet('shapeRouteStyle');
        this._shapeRouteStyle = shapeRouteStyle;
    }

    /**
     * 2.4.4.311 ShapeRouteStyle
     * @see {http://localhost/MS-VSDX.pdf#page=217}
     */
    get shapeRouteStyle() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._shapeRouteStyle;
        if (cell === undefined)
            cell = this.getParentCell('shapeRouteStyle');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.312 ShapeShdwBlur
     * @see {http://localhost/MS-VSDX.pdf#page=217}
     * @param {VisioCell} shapeShdwBlur
     */
    set shapeShdwBlur(shapeShdwBlur) {
        this.attributeSet('shapeShdwBlur');
        this._shapeShdwBlur = shapeShdwBlur;
    }

    /**
     * 2.4.4.312 ShapeShdwBlur
     * @see {http://localhost/MS-VSDX.pdf#page=217}
     */
    get shapeShdwBlur() {
        const visioType = VisioValueType.vLength;
        let cell = this._shapeShdwBlur;
        if (cell === undefined)
            cell = this.getParentCell('shapeShdwBlur');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.313 ShapeShdwObliqueAngle
     * @see {http://localhost/MS-VSDX.pdf#page=217}
     * @param {VisioCell} shapeShdwObliqueAngle
     */
    set shapeShdwObliqueAngle(shapeShdwObliqueAngle) {
        this.attributeSet('shapeShdwObliqueAngle');
        this._shapeShdwObliqueAngle = shapeShdwObliqueAngle;
    }

    /**
     * 2.4.4.313 ShapeShdwObliqueAngle
     * @see {http://localhost/MS-VSDX.pdf#page=217}
     */
    get shapeShdwObliqueAngle() {
        const visioType = VisioValueType.vAngle;
        let cell = this._shapeShdwObliqueAngle;
        if (cell === undefined)
            cell = this.getParentCell('shapeShdwObliqueAngle');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.314 ShapeShdwOffsetX
     * @see {http://localhost/MS-VSDX.pdf#page=217}
     * @param {VisioCell} shapeShdwOffsetX
     */
    set shapeShdwOffsetX(shapeShdwOffsetX) {
        this.attributeSet('shapeShdwOffsetX');
        this._shapeShdwOffsetX = shapeShdwOffsetX;
    }

    /**
     * 2.4.4.314 ShapeShdwOffsetX
     * @see {http://localhost/MS-VSDX.pdf#page=217}
     */
    get shapeShdwOffsetX() {
        const visioType = VisioValueType.vLength;
        let cell = this._shapeShdwOffsetX;
        if (cell === undefined)
            cell = this.getParentCell('shapeShdwOffsetX');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.315 ShapeShdwOffsetY
     * @see {http://localhost/MS-VSDX.pdf#page=217}
     * @param {VisioCell} shapeShdwOffsetY
     */
    set shapeShdwOffsetY(shapeShdwOffsetY) {
        this.attributeSet('shapeShdwOffsetY');
        this._shapeShdwOffsetY = shapeShdwOffsetY;
    }

    /**
     * 2.4.4.315 ShapeShdwOffsetY
     * @see {http://localhost/MS-VSDX.pdf#page=217}
     */
    get shapeShdwOffsetY() {
        const visioType = VisioValueType.vLength;
        let cell = this._shapeShdwOffsetY;
        if (cell === undefined)
            cell = this.getParentCell('shapeShdwOffsetY');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.316 ShapeShdwScaleFactor
     * @see {http://localhost/MS-VSDX.pdf#page=217}
     * @param {VisioCell} shapeShdwScaleFactor
     */
    set shapeShdwScaleFactor(shapeShdwScaleFactor) {
        this.attributeSet('shapeShdwScaleFactor');
        this._shapeShdwScaleFactor = shapeShdwScaleFactor;
    }

    /**
     * 2.4.4.316 ShapeShdwScaleFactor
     * @see {http://localhost/MS-VSDX.pdf#page=217}
     */
    get shapeShdwScaleFactor() {
        const visioType = VisioValueType.vScalar;
        let cell = this._shapeShdwScaleFactor;
        if (cell === undefined)
            cell = this.getParentCell('shapeShdwScaleFactor');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.317 ShapeShdwShow
     * @see {http://localhost/MS-VSDX.pdf#page=218}
     * @param {VisioCell} shapeShdwShow
     */
    set shapeShdwShow(shapeShdwShow) {
        this.attributeSet('shapeShdwShow');
        this._shapeShdwShow = shapeShdwShow;
    }

    /**
     * 2.4.4.317 ShapeShdwShow
     * @see {http://localhost/MS-VSDX.pdf#page=218}
     */
    get shapeShdwShow() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._shapeShdwShow;
        if (cell === undefined)
            cell = this.getParentCell('shapeShdwShow');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.318 ShapeShdwType
     * @see {http://localhost/MS-VSDX.pdf#page=218}
     * @param {VisioCell} shapeShdwType
     */
    set shapeShdwType(shapeShdwType) {
        this.attributeSet('shapeShdwType');
        this._shapeShdwType = shapeShdwType;
    }

    /**
     * 2.4.4.318 ShapeShdwType
     * @see {http://localhost/MS-VSDX.pdf#page=218}
     */
    get shapeShdwType() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._shapeShdwType;
        if (cell === undefined)
            cell = this.getParentCell('shapeShdwType');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.319 ShapeSplit
     * @see {http://localhost/MS-VSDX.pdf#page=218}
     * @param {VisioCell} shapeSplit
     */
    set shapeSplit(shapeSplit) {
        this.attributeSet('shapeSplit');
        this._shapeSplit = shapeSplit;
    }

    /**
     * 2.4.4.319 ShapeSplit
     * @see {http://localhost/MS-VSDX.pdf#page=218}
     */
    get shapeSplit() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._shapeSplit;
        if (cell === undefined)
            cell = this.getParentCell('shapeSplit');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.320 ShapeSplittable
     * @see {http://localhost/MS-VSDX.pdf#page=218}
     * @param {VisioCell} shapeSplittable
     */
    set shapeSplittable(shapeSplittable) {
        this.attributeSet('shapeSplittable');
        this._shapeSplittable = shapeSplittable;
    }

    /**
     * 2.4.4.320 ShapeSplittable
     * @see {http://localhost/MS-VSDX.pdf#page=218}
     */
    get shapeSplittable() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._shapeSplittable;
        if (cell === undefined)
            cell = this.getParentCell('shapeSplittable');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.321 Sharpen
     * @see {http://localhost/MS-VSDX.pdf#page=218}
     * @param {VisioCell} sharpen
     */
    set sharpen(sharpen) {
        this.attributeSet('sharpen');
        this._sharpen = sharpen;
    }

    /**
     * 2.4.4.321 Sharpen
     * @see {http://localhost/MS-VSDX.pdf#page=218}
     */
    get sharpen() {
        const visioType = VisioValueType.vScalar;
        let cell = this._sharpen;
        if (cell === undefined)
            cell = this.getParentCell('sharpen');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.322 ShdwForegnd
     * @see {http://localhost/MS-VSDX.pdf#page=219}
     * @param {VisioCell} shdwForegnd
     */
    set shdwForegnd(shdwForegnd) {
        this.attributeSet('shdwForegnd');
        this._shdwForegnd = shdwForegnd;
    }

    /**
     * 2.4.4.322 ShdwForegnd
     * @see {http://localhost/MS-VSDX.pdf#page=219}
     */
    get shdwForegnd() {
        const visioType = VisioValueType.vColor;
        let cell = this._shdwForegnd;
        if (cell === undefined)
            cell = this.getParentCell('shdwForegnd');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.323 ShdwForegndTrans
     * @see {http://localhost/MS-VSDX.pdf#page=219}
     * @param {VisioCell} shdwForegndTrans
     */
    set shdwForegndTrans(shdwForegndTrans) {
        this.attributeSet('shdwForegndTrans');
        this._shdwForegndTrans = shdwForegndTrans;
    }

    /**
     * 2.4.4.323 ShdwForegndTrans
     * @see {http://localhost/MS-VSDX.pdf#page=219}
     */
    get shdwForegndTrans() {
        const visioType = VisioValueType.vScalar;
        let cell = this._shdwForegndTrans;
        if (cell === undefined)
            cell = this.getParentCell('shdwForegndTrans');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.324 ShdwObliqueAngle
     * @see {http://localhost/MS-VSDX.pdf#page=219}
     * @param {VisioCell} shdwObliqueAngle
     */
    set shdwObliqueAngle(shdwObliqueAngle) {
        this.attributeSet('shdwObliqueAngle');
        this._shdwObliqueAngle = shdwObliqueAngle;
    }

    /**
     * 2.4.4.324 ShdwObliqueAngle
     * @see {http://localhost/MS-VSDX.pdf#page=219}
     */
    get shdwObliqueAngle() {
        const visioType = VisioValueType.vScalar;
        let cell = this._shdwObliqueAngle;
        if (cell === undefined)
            cell = this.getParentCell('shdwObliqueAngle');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.325 ShdwOffsetX
     * @see {http://localhost/MS-VSDX.pdf#page=219}
     * @param {VisioCell} shdwOffsetX
     */
    set shdwOffsetX(shdwOffsetX) {
        this.attributeSet('shdwOffsetX');
        this._shdwOffsetX = shdwOffsetX;
    }

    /**
     * 2.4.4.325 ShdwOffsetX
     * @see {http://localhost/MS-VSDX.pdf#page=219}
     */
    get shdwOffsetX() {
        const visioType = VisioValueType.vLength;
        let cell = this._shdwOffsetX;
        if (cell === undefined)
            cell = this.getParentCell('shdwOffsetX');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.326 ShdwOffsetY
     * @see {http://localhost/MS-VSDX.pdf#page=219}
     * @param {VisioCell} shdwOffsetY
     */
    set shdwOffsetY(shdwOffsetY) {
        this.attributeSet('shdwOffsetY');
        this._shdwOffsetY = shdwOffsetY;
    }

    /**
     * 2.4.4.326 ShdwOffsetY
     * @see {http://localhost/MS-VSDX.pdf#page=219}
     */
    get shdwOffsetY() {
        const visioType = VisioValueType.vLength;
        let cell = this._shdwOffsetY;
        if (cell === undefined)
            cell = this.getParentCell('shdwOffsetY');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.327 ShdwPattern
     * @see {http://localhost/MS-VSDX.pdf#page=220}
     * @param {VisioCell} shdwPattern
     */
    set shdwPattern(shdwPattern) {
        this.attributeSet('shdwPattern');
        this._shdwPattern = shdwPattern;
    }

    /**
     * 2.4.4.327 ShdwPattern
     * @see {http://localhost/MS-VSDX.pdf#page=220}
     */
    get shdwPattern() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._shdwPattern;
        if (cell === undefined)
            cell = this.getParentCell('shdwPattern');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.328 ShdwScaleFactor
     * @see {http://localhost/MS-VSDX.pdf#page=220}
     * @param {VisioCell} shdwScaleFactor
     */
    set shdwScaleFactor(shdwScaleFactor) {
        this.attributeSet('shdwScaleFactor');
        this._shdwScaleFactor = shdwScaleFactor;
    }

    /**
     * 2.4.4.328 ShdwScaleFactor
     * @see {http://localhost/MS-VSDX.pdf#page=220}
     */
    get shdwScaleFactor() {
        const visioType = VisioValueType.vScalar;
        let cell = this._shdwScaleFactor;
        if (cell === undefined)
            cell = this.getParentCell('shdwScaleFactor');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.329 ShdwType
     * @see {http://localhost/MS-VSDX.pdf#page=220}
     * @param {VisioCell} shdwType
     */
    set shdwType(shdwType) {
        this.attributeSet('shdwType');
        this._shdwType = shdwType;
    }

    /**
     * 2.4.4.329 ShdwType
     * @see {http://localhost/MS-VSDX.pdf#page=220}
     */
    get shdwType() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._shdwType;
        if (cell === undefined)
            cell = this.getParentCell('shdwType');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.330 Size
     * @see {http://localhost/MS-VSDX.pdf#page=220}
     * @param {VisioCell} size
     */
    set size(size) {
        this.attributeSet('size');
        this._size = size;
    }

    /**
     * 2.4.4.330 Size
     * @see {http://localhost/MS-VSDX.pdf#page=220}
     */
    get size() {
        const visioType = VisioValueType.vLength;
        let cell = this._size;
        if (cell === undefined)
            cell = this.getParentCell('size');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.331 SketchAmount
     * @see {http://localhost/MS-VSDX.pdf#page=220}
     * @param {VisioCell} sketchAmount
     */
    set sketchAmount(sketchAmount) {
        this.attributeSet('sketchAmount');
        this._sketchAmount = sketchAmount;
    }

    /**
     * 2.4.4.331 SketchAmount
     * @see {http://localhost/MS-VSDX.pdf#page=220}
     */
    get sketchAmount() {
        const visioType = VisioValueType.PtgInt;
        let cell = this._sketchAmount;
        if (cell === undefined)
            cell = this.getParentCell('sketchAmount');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.332 SketchEnabled
     * @see {http://localhost/MS-VSDX.pdf#page=221}
     * @param {VisioCell} sketchEnabled
     */
    set sketchEnabled(sketchEnabled) {
        this.attributeSet('sketchEnabled');
        this._sketchEnabled = sketchEnabled;
    }

    /**
     * 2.4.4.332 SketchEnabled
     * @see {http://localhost/MS-VSDX.pdf#page=221}
     */
    get sketchEnabled() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._sketchEnabled;
        if (cell === undefined)
            cell = this.getParentCell('sketchEnabled');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.333 SketchFillChange
     * @see {http://localhost/MS-VSDX.pdf#page=221}
     * @param {VisioCell} sketchFillChange
     */
    set sketchFillChange(sketchFillChange) {
        this.attributeSet('sketchFillChange');
        this._sketchFillChange = sketchFillChange;
    }

    /**
     * 2.4.4.333 SketchFillChange
     * @see {http://localhost/MS-VSDX.pdf#page=221}
     */
    get sketchFillChange() {
        const visioType = VisioValueType.vScalar;
        let cell = this._sketchFillChange;
        if (cell === undefined)
            cell = this.getParentCell('sketchFillChange');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.334 SketchLineChange
     * @see {http://localhost/MS-VSDX.pdf#page=221}
     * @param {VisioCell} sketchLineChange
     */
    set sketchLineChange(sketchLineChange) {
        this.attributeSet('sketchLineChange');
        this._sketchLineChange = sketchLineChange;
    }

    /**
     * 2.4.4.334 SketchLineChange
     * @see {http://localhost/MS-VSDX.pdf#page=221}
     */
    get sketchLineChange() {
        const visioType = VisioValueType.vScalar;
        let cell = this._sketchLineChange;
        if (cell === undefined)
            cell = this.getParentCell('sketchLineChange');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.335 SketchLineWeight
     * @see {http://localhost/MS-VSDX.pdf#page=221}
     * @param {VisioCell} sketchLineWeight
     */
    set sketchLineWeight(sketchLineWeight) {
        this.attributeSet('sketchLineWeight');
        this._sketchLineWeight = sketchLineWeight;
    }

    /**
     * 2.4.4.335 SketchLineWeight
     * @see {http://localhost/MS-VSDX.pdf#page=221}
     */
    get sketchLineWeight() {
        const visioType = VisioValueType.vLength;
        let cell = this._sketchLineWeight;
        if (cell === undefined)
            cell = this.getParentCell('sketchLineWeight');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.336 SketchSeed
     * @see {http://localhost/MS-VSDX.pdf#page=221}
     * @param {VisioCell} sketchSeed
     */
    set sketchSeed(sketchSeed) {
        this.attributeSet('sketchSeed');
        this._sketchSeed = sketchSeed;
    }

    /**
     * 2.4.4.336 SketchSeed
     * @see {http://localhost/MS-VSDX.pdf#page=221}
     */
    get sketchSeed() {
        const visioType = VisioValueType.PtgInt;
        let cell = this._sketchSeed;
        if (cell === undefined)
            cell = this.getParentCell('sketchSeed');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.337 Snap
     * @see {http://localhost/MS-VSDX.pdf#page=221}
     * @param {VisioCell} snap
     */
    set snap(snap) {
        this.attributeSet('snap');
        this._snap = snap;
    }

    /**
     * 2.4.4.337 Snap
     * @see {http://localhost/MS-VSDX.pdf#page=221}
     */
    get snap() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._snap;
        if (cell === undefined)
            cell = this.getParentCell('snap');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.338 SoftEdgesSize
     * @see {http://localhost/MS-VSDX.pdf#page=221}
     * @param {VisioCell} softEdgesSize
     */
    set softEdgesSize(softEdgesSize) {
        this.attributeSet('softEdgesSize');
        this._softEdgesSize = softEdgesSize;
    }

    /**
     * 2.4.4.338 SoftEdgesSize
     * @see {http://localhost/MS-VSDX.pdf#page=221}
     */
    get softEdgesSize() {
        const visioType = VisioValueType.vLength;
        let cell = this._softEdgesSize;
        if (cell === undefined)
            cell = this.getParentCell('softEdgesSize');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.339 SortKey
     * @see {http://localhost/MS-VSDX.pdf#page=222}
     * @param {VisioCell} sortKey
     */
    set sortKey(sortKey) {
        this.attributeSet('sortKey');
        this._sortKey = sortKey;
    }

    /**
     * 2.4.4.339 SortKey
     * @see {http://localhost/MS-VSDX.pdf#page=222}
     */
    get sortKey() {
        const visioType = VisioValueType.PtgString;
        let cell = this._sortKey;
        if (cell === undefined)
            cell = this.getParentCell('sortKey');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.340 SpAfter
     * @see {http://localhost/MS-VSDX.pdf#page=222}
     * @param {VisioCell} spAfter
     */
    set spAfter(spAfter) {
        this.attributeSet('spAfter');
        this._spAfter = spAfter;
    }

    /**
     * 2.4.4.340 SpAfter
     * @see {http://localhost/MS-VSDX.pdf#page=222}
     */
    get spAfter() {
        const visioType = VisioValueType.vLength;
        let cell = this._spAfter;
        if (cell === undefined)
            cell = this.getParentCell('spAfter');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.341 SpBefore
     * @see {http://localhost/MS-VSDX.pdf#page=222}
     * @param {VisioCell} spBefore
     */
    set spBefore(spBefore) {
        this.attributeSet('spBefore');
        this._spBefore = spBefore;
    }

    /**
     * 2.4.4.341 SpBefore
     * @see {http://localhost/MS-VSDX.pdf#page=222}
     */
    get spBefore() {
        const visioType = VisioValueType.vLength;
        let cell = this._spBefore;
        if (cell === undefined)
            cell = this.getParentCell('spBefore');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.342 SpLine
     * @see {http://localhost/MS-VSDX.pdf#page=222}
     * @param {VisioCell} spLine
     */
    set spLine(spLine) {
        this.attributeSet('spLine');
        this._spLine = spLine;
    }

    /**
     * 2.4.4.342 SpLine
     * @see {http://localhost/MS-VSDX.pdf#page=222}
     */
    get spLine() {
        const visioType = VisioValueType.vLength;
        let cell = this._spLine;
        if (cell === undefined)
            cell = this.getParentCell('spLine');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.343 Status
     * @see {http://localhost/MS-VSDX.pdf#page=222}
     * @param {VisioCell} status
     */
    set status(status) {
        this.attributeSet('status');
        this._status = status;
    }

    /**
     * 2.4.4.343 Status
     * @see {http://localhost/MS-VSDX.pdf#page=222}
     */
    get status() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._status;
        if (cell === undefined)
            cell = this.getParentCell('status');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.344 Strikethru
     * @see {http://localhost/MS-VSDX.pdf#page=222}
     * @param {VisioCell} strikethru
     */
    set strikethru(strikethru) {
        this.attributeSet('strikethru');
        this._strikethru = strikethru;
    }

    /**
     * 2.4.4.344 Strikethru
     * @see {http://localhost/MS-VSDX.pdf#page=222}
     */
    get strikethru() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._strikethru;
        if (cell === undefined)
            cell = this.getParentCell('strikethru');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.345 Style
     * @see {http://localhost/MS-VSDX.pdf#page=222}
     * @param {VisioCell} style
     */
    set style(style) {
        this.attributeSet('style');
        this._style = style;
    }

    /**
     * 2.4.4.345 Style
     * @see {http://localhost/MS-VSDX.pdf#page=222}
     *
     * 0x00 Specifies that the text run is unformatted.
     * 0x01 Specifies that the text run has a bold character property.
     * 0x02 Specifies that the text run has an italic character property.
     * 0x04 Specifies that the text run has an underline character property.
     * 0x08 Specifies that the text run has a small caps character property.
     */
    get style() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._style;
        if (cell === undefined)
            cell = this.getParentCell('style');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.346 SubAddress
     * @see {http://localhost/MS-VSDX.pdf#page=223}
     * @param {VisioCell} subAddress
     */
    set subAddress(subAddress) {
        this.attributeSet('subAddress');
        this._subAddress = subAddress;
    }

    /**
     * 2.4.4.346 SubAddress
     * @see {http://localhost/MS-VSDX.pdf#page=223}
     */
    get subAddress() {
        const visioType = VisioValueType.PtgString;
        let cell = this._subAddress;
        if (cell === undefined)
            cell = this.getParentCell('subAddress');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.347 TagName
     * @see {http://localhost/MS-VSDX.pdf#page=223}
     * @param {VisioCell} tagName
     */
    set tagName(tagName) {
        this.attributeSet('tagName');
        this._tagName = tagName;
    }

    /**
     * 2.4.4.347 TagName
     * @see {http://localhost/MS-VSDX.pdf#page=223}
     */
    get tagName() {
        const visioType = VisioValueType.PtgString;
        let cell = this._tagName;
        if (cell === undefined)
            cell = this.getParentCell('tagName');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.348 TextBkgnd
     * @see {http://localhost/MS-VSDX.pdf#page=223}
     * @param {VisioCell} textBkgnd
     */
    set textBkgnd(textBkgnd) {
        this.attributeSet('textBkgnd');
        this._textBkgnd = textBkgnd;
    }

    /**
     * 2.4.4.348 TextBkgnd
     * @see {http://localhost/MS-VSDX.pdf#page=223}
     */
    get textBkgnd() {
        const visioType = VisioValueType.PtgColorRGB;
        let cell = this._textBkgnd;
        if (cell === undefined)
            cell = this.getParentCell('textBkgnd');
        if (cell === undefined)
            cell = this.getStylesheetTextStyleCell('textBkgnd');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.349 TextBkgndTrans
     * @see {http://localhost/MS-VSDX.pdf#page=223}
     * @param {VisioCell} textBkgndTrans
     */
    set textBkgndTrans(textBkgndTrans) {
        this.attributeSet('textBkgndTrans');
        this._textBkgndTrans = textBkgndTrans;
    }

    /**
     * 2.4.4.349 TextBkgndTrans
     * @see {http://localhost/MS-VSDX.pdf#page=223}
     */
    get textBkgndTrans() {
        const visioType = VisioValueType.vScalar;
        let cell = this._textBkgndTrans;
        if (cell === undefined)
            cell = this.getParentCell('textBkgndTrans');
        if (cell === undefined)
            cell = this.getStylesheetTextStyleCell('textBkgndTrans');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.350 TextDirection
     * @see {http://localhost/MS-VSDX.pdf#page=224}
     * @param {VisioCell} textDirection
     */
    set textDirection(textDirection) {
        this.attributeSet('textDirection');
        this._textDirection = textDirection;
    }

    /**
     * 2.4.4.350 TextDirection
     * @see {http://localhost/MS-VSDX.pdf#page=224}
     */
    get textDirection() {
        const visioType = VisioValueType.vScalar;
        let cell = this._textDirection;
        if (cell === undefined)
            cell = this.getParentCell('textDirection');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.351 TextPosAfterBullet
     * @see {http://localhost/MS-VSDX.pdf#page=224}
     * @param {VisioCell} textPosAfterBullet
     */
    set textPosAfterBullet(textPosAfterBullet) {
        this.attributeSet('textPosAfterBullet');
        this._textPosAfterBullet = textPosAfterBullet;
    }

    /**
     * 2.4.4.351 TextPosAfterBullet
     * @see {http://localhost/MS-VSDX.pdf#page=224}
     */
    get textPosAfterBullet() {
        const visioType = VisioValueType.vLength;
        let cell = this._textPosAfterBullet;
        if (cell === undefined)
            cell = this.getParentCell('textPosAfterBullet');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.352 TheData
     * @see {http://localhost/MS-VSDX.pdf#page=224}
     * @param {VisioCell} theData
     */
    set theData(theData) {
        this.attributeSet('theData');
        this._theData = theData;
    }

    /**
     * 2.4.4.352 TheData
     * @see {http://localhost/MS-VSDX.pdf#page=224}
     */
    get theData() {
        const visioType = VisioValueType.vScalar;
        let cell = this._theData;
        if (cell === undefined)
            cell = this.getParentCell('theData');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.353 ThemeIndex
     * @see {http://localhost/MS-VSDX.pdf#page=224}
     * @param {VisioCell} themeIndex
     */
    set themeIndex(themeIndex) {
        this.attributeSet('themeIndex');
        this._themeIndex = themeIndex;
    }

    /**
     * 2.4.4.353 ThemeIndex
     * @see {http://localhost/MS-VSDX.pdf#page=224}
     */
    get themeIndex() {
        const visioType = VisioValueType.PtgInt;
        let cell = this._themeIndex;
        if (cell === undefined)
            cell = this.getParentCell('themeIndex');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.354 TheText
     * @see {http://localhost/MS-VSDX.pdf#page=224}
     * @param {VisioCell} theText
     */
    set theText(theText) {
        this.attributeSet('theText');
        this._theText = theText;
    }

    /**
     * 2.4.4.354 TheText
     * @see {http://localhost/MS-VSDX.pdf#page=224}
     */
    get theText() {
        const visioType = VisioValueType.vScalar;
        let cell = this._theText;
        if (cell === undefined)
            cell = this.getParentCell('theText');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.355 TopMargin
     * @see {http://localhost/MS-VSDX.pdf#page=224}
     * @param {VisioCell} topMargin
     */
    set topMargin(topMargin) {
        this.attributeSet('topMargin');
        this._topMargin = topMargin;
    }

    /**
     * 2.4.4.355 TopMargin
     * @see {http://localhost/MS-VSDX.pdf#page=224}
     */
    get topMargin() {
        const visioType = VisioValueType.vLength;
        let cell = this._topMargin;
        if (cell === undefined)
            cell = this.getParentCell('topMargin');
        if (cell === undefined)
            cell = this.getStylesheetTextStyleCell('topMargin');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.356 Transparency
     * @see {http://localhost/MS-VSDX.pdf#page=224}
     * @param {VisioCell} transparency
     */
    set transparency(transparency) {
        this.attributeSet('transparency');
        this._transparency = transparency;
    }

    /**
     * 2.4.4.356 Transparency
     * @see {http://localhost/MS-VSDX.pdf#page=224}
     */
    get transparency() {
        const visioType = VisioValueType.vScalar;
        let cell = this._transparency;
        if (cell === undefined)
            cell = this.getParentCell('transparency');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.357 TxtAngle
     * @see {http://localhost/MS-VSDX.pdf#page=225}
     * @param {VisioCell} txtAngle
     */
    set txtAngle(txtAngle) {
        this.attributeSet('txtAngle');
        this._txtAngle = txtAngle;
    }

    /**
     * 2.4.4.357 TxtAngle
     * @see {http://localhost/MS-VSDX.pdf#page=225}
     */
    get txtAngle() {
        let cell = this._txtAngle;
        if (cell === undefined)
            cell = this.getParentCell('txtAngle');

        const visioType = VisioValueType.vAngle;
        //TODO miky
        // VisioValueType.vScalar
        debug.log('resolve cell type "txtAngle"');
        if (cell && cell.value !== '0' && cell.units && cell.units !== VisioUnitType.DEG) {
            debug.log('txtAngle unclear');
        }

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.358 TxtHeight
     * @see {http://localhost/MS-VSDX.pdf#page=225}
     * @param {VisioCell} txtHeight
     */
    set txtHeight(txtHeight) {
        this.attributeSet('txtHeight');
        this._txtHeight = txtHeight;
    }

    /**
     * 2.4.4.358 TxtHeight
     * @see {http://localhost/MS-VSDX.pdf#page=225}
     */
    get txtHeight() {
        const visioType = VisioValueType.vLength;
        let cell = this._txtHeight;
        if (cell === undefined)
            cell = this.getParentCell('txtHeight');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.359 TxtLocPinX
     * @see {http://localhost/MS-VSDX.pdf#page=225}
     * @param {VisioCell} txtLocPinX
     */
    set txtLocPinX(txtLocPinX) {
        this.attributeSet('txtLocPinX');
        this._txtLocPinX = txtLocPinX;
    }

    /**
     * 2.4.4.359 TxtLocPinX
     * @see {http://localhost/MS-VSDX.pdf#page=225}
     */
    get txtLocPinX() {
        const visioType = VisioValueType.vLength;
        let cell = this._txtLocPinX;
        if (cell === undefined)
            cell = this.getParentCell('txtLocPinX');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.360 TxtLocPinY
     * @see {http://localhost/MS-VSDX.pdf#page=225}
     * @param {VisioCell} txtLocPinY
     */
    set txtLocPinY(txtLocPinY) {
        this.attributeSet('txtLocPinY');
        this._txtLocPinY = txtLocPinY;
    }

    /**
     * 2.4.4.360 TxtLocPinY
     * @see {http://localhost/MS-VSDX.pdf#page=225}
     */
    get txtLocPinY() {
        const visioType = VisioValueType.vLength;
        let cell = this._txtLocPinY;
        if (cell === undefined)
            cell = this.getParentCell('txtLocPinY');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.361 TxtPinX
     * @see {http://localhost/MS-VSDX.pdf#page=225}
     * @param {VisioCell} txtPinX
     */
    set txtPinX(txtPinX) {
        this.attributeSet('txtPinX');
        this._txtPinX = txtPinX;
    }

    /**
     * 2.4.4.361 TxtPinX
     * @see {http://localhost/MS-VSDX.pdf#page=225}
     */
    get txtPinX() {
        const visioType = VisioValueType.vLength;
        let cell = this._txtPinX;
        if (cell === undefined)
            cell = this.getParentCell('txtPinX');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.362 TxtPinY
     * @see {http://localhost/MS-VSDX.pdf#page=225}
     * @param {VisioCell} txtPinY
     */
    set txtPinY(txtPinY) {
        this.attributeSet('txtPinY');
        this._txtPinY = txtPinY;
    }

    /**
     * 2.4.4.362 TxtPinY
     * @see {http://localhost/MS-VSDX.pdf#page=225}
     */
    get txtPinY() {
        const visioType = VisioValueType.vLength;
        let cell = this._txtPinY;
        if (cell === undefined)
            cell = this.getParentCell('txtPinY');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.363 TxtWidth
     * @see {http://localhost/MS-VSDX.pdf#page=225}
     * @param {VisioCell} txtWidth
     */
    set txtWidth(txtWidth) {
        this.attributeSet('txtWidth');
        this._txtWidth = txtWidth;
    }

    /**
     * 2.4.4.363 TxtWidth
     * @see {http://localhost/MS-VSDX.pdf#page=225}
     */
    get txtWidth() {
        const visioType = VisioValueType.vLength;
        let cell = this._txtWidth;
        if (cell === undefined)
            cell = this.getParentCell('txtWidth');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.364 Type
     * @see {http://localhost/MS-VSDX.pdf#page=225}
     * @param {VisioCell} type
     */
    set type(type) {
        this.attributeSet('type');
        this._type = type;
    }

    /**
     * 2.4.4.364 Type
     * @see {http://localhost/MS-VSDX.pdf#page=225}
     */
    get type() {
        const visioType = VisioValueType.vScalar;
        let cell = this._type;
        if (cell === undefined)
            cell = this.getParentCell('type');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.365 UICat
     * @see {http://localhost/MS-VSDX.pdf#page=226}
     * @param {VisioCell} uICat
     */
    set uICat(uICat) {
        this.attributeSet('uICat');
        this._uICat = uICat;
    }

    /**
     * 2.4.4.365 UICat
     * @see {http://localhost/MS-VSDX.pdf#page=226}
     */
    get uICat() {
        const visioType = VisioValueType.vScalar;
        let cell = this._uICat;
        if (cell === undefined)
            cell = this.getParentCell('uICat');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.366 UICod
     * @see {http://localhost/MS-VSDX.pdf#page=226}
     * @param {VisioCell} uICod
     */
    set uICod(uICod) {
        this.attributeSet('uICod');
        this._uICod = uICod;
    }

    /**
     * 2.4.4.366 UICod
     * @see {http://localhost/MS-VSDX.pdf#page=226}
     */
    get uICod() {
        const visioType = VisioValueType.vScalar;
        let cell = this._uICod;
        if (cell === undefined)
            cell = this.getParentCell('uICod');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.367 UIFmt
     * @see {http://localhost/MS-VSDX.pdf#page=226}
     * @param {VisioCell} uIFmt
     */
    set uIFmt(uIFmt) {
        this.attributeSet('uIFmt');
        this._uIFmt = uIFmt;
    }

    /**
     * 2.4.4.367 UIFmt
     * @see {http://localhost/MS-VSDX.pdf#page=226}
     */
    get uIFmt() {
        const visioType = VisioValueType.vScalar;
        let cell = this._uIFmt;
        if (cell === undefined)
            cell = this.getParentCell('uIFmt');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.368 UIVisibility
     * @see {http://localhost/MS-VSDX.pdf#page=226}
     * @param {VisioCell} uIVisibility
     */
    set uIVisibility(uIVisibility) {
        this.attributeSet('uIVisibility');
        this._uIVisibility = uIVisibility;
    }

    /**
     * 2.4.4.368 UIVisibility
     * @see {http://localhost/MS-VSDX.pdf#page=226}
     */
    get uIVisibility() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._uIVisibility;
        if (cell === undefined)
            cell = this.getParentCell('uIVisibility');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.369 UpdateAlignBox
     * @see {http://localhost/MS-VSDX.pdf#page=226}
     * @param {VisioCell} updateAlignBox
     */
    set updateAlignBox(updateAlignBox) {
        this.attributeSet('updateAlignBox');
        this._updateAlignBox = updateAlignBox;
    }

    /**
     * 2.4.4.369 UpdateAlignBox
     * @see {http://localhost/MS-VSDX.pdf#page=226}
     */
    get updateAlignBox() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._updateAlignBox;
        if (cell === undefined)
            cell = this.getParentCell('updateAlignBox');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.370 UseGroupGradient
     * @see {http://localhost/MS-VSDX.pdf#page=226}
     * @param {VisioCell} useGroupGradient
     */
    set useGroupGradient(useGroupGradient) {
        this.attributeSet('useGroupGradient');
        this._useGroupGradient = useGroupGradient;
    }

    /**
     * 2.4.4.370 UseGroupGradient
     * @see {http://localhost/MS-VSDX.pdf#page=226}
     */
    get useGroupGradient() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._useGroupGradient;
        if (cell === undefined)
            cell = this.getParentCell('useGroupGradient');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.371 Value
     * @see {http://localhost/MS-VSDX.pdf#page=226}
     * @param {VisioCell} value
     */
    set value(value) {
        this.attributeSet('value');
        this._value = value;
    }

    /**
     * 2.4.4.371 Value
     * @see {http://localhost/MS-VSDX.pdf#page=226}
     */
    get value() {
        const visioType = VisioValueType.vAny;
        let cell = this._value;
        if (cell === undefined)
            cell = this.getParentCell('value');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.372 VariationColorIndex
     * @see {http://localhost/MS-VSDX.pdf#page=226}
     * @param {VisioCell} variationColorIndex
     */
    set variationColorIndex(variationColorIndex) {
        this.attributeSet('variationColorIndex');
        this._variationColorIndex = variationColorIndex;
    }

    /**
     * 2.4.4.372 VariationColorIndex
     * @see {http://localhost/MS-VSDX.pdf#page=226}
     */
    get variationColorIndex() {
        const visioType = VisioValueType.PtgInt;
        let cell = this._variationColorIndex;
        if (cell === undefined)
            cell = this.getParentCell('variationColorIndex');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.373 VariationStyleIndex
     * @see {http://localhost/MS-VSDX.pdf#page=227}
     * @param {VisioCell} variationStyleIndex
     */
    set variationStyleIndex(variationStyleIndex) {
        this.attributeSet('variationStyleIndex');
        this._variationStyleIndex = variationStyleIndex;
    }

    /**
     * 2.4.4.373 VariationStyleIndex
     * @see {http://localhost/MS-VSDX.pdf#page=227}
     */
    get variationStyleIndex() {
        const visioType = VisioValueType.PtgInt;
        let cell = this._variationStyleIndex;
        if (cell === undefined)
            cell = this.getParentCell('variationStyleIndex');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.374 Verify
     * @see {http://localhost/MS-VSDX.pdf#page=228}
     * @param {VisioCell} verify
     */
    set verify(verify) {
        this.attributeSet('verify');
        this._verify = verify;
    }

    /**
     * 2.4.4.374 Verify
     * @see {http://localhost/MS-VSDX.pdf#page=228}
     */
    get verify() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._verify;
        if (cell === undefined)
            cell = this.getParentCell('verify');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.375 VerticalAlign
     * @see {http://localhost/MS-VSDX.pdf#page=228}
     * @param {VisioCell} verticalAlign
     */
    set verticalAlign(verticalAlign) {
        this.attributeSet('verticalAlign');
        this._verticalAlign = verticalAlign;
    }

    /**
     * 2.4.4.375 VerticalAlign
     * @see {http://localhost/MS-VSDX.pdf#page=228}
     */
    get verticalAlign() {
        const visioType = VisioValueType.vScalar;
        let cell = this._verticalAlign;
        if (cell === undefined)
            cell = this.getParentCell('verticalAlign');
        if (cell === undefined)
            cell = this.getStylesheetTextStyleCell('verticalAlign');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.376 ViewMarkup
     * @see {http://localhost/MS-VSDX.pdf#page=228}
     * @param {VisioCell} viewMarkup
     */
    set viewMarkup(viewMarkup) {
        this.attributeSet('viewMarkup');
        this._viewMarkup = viewMarkup;
    }

    /**
     * 2.4.4.376 ViewMarkup
     * @see {http://localhost/MS-VSDX.pdf#page=228}
     */
    get viewMarkup() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._viewMarkup;
        if (cell === undefined)
            cell = this.getParentCell('viewMarkup');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.377 Visible
     * @see {http://localhost/MS-VSDX.pdf#page=228}
     * @param {VisioCell} visible
     */
    set visible(visible) {
        this.attributeSet('visible');
        this._visible = visible;
    }

    /**
     * 2.4.4.377 Visible
     * @see {http://localhost/MS-VSDX.pdf#page=228}
     */
    get visible() {
        const visioType = VisioValueType.PtgBool;
        let cell = this._visible;
        if (cell === undefined)
            cell = this.getParentCell('visible');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.378 WalkPreference
     * @see {http://localhost/MS-VSDX.pdf#page=228}
     * @param {VisioCell} walkPreference
     */
    set walkPreference(walkPreference) {
        this.attributeSet('walkPreference');
        this._walkPreference = walkPreference;
    }

    /**
     * 2.4.4.378 WalkPreference
     * @see {http://localhost/MS-VSDX.pdf#page=228}
     */
    get walkPreference() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._walkPreference;
        if (cell === undefined)
            cell = this.getParentCell('walkPreference');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.379 Width
     * @see {http://localhost/MS-VSDX.pdf#page=229}
     * @param {VisioCell} width
     */
    set width(width) {
        this.attributeSet('width');
        this._width = width;
    }

    /**
     * 2.4.4.379 Width
     * @see {http://localhost/MS-VSDX.pdf#page=229}
     */
    get width() {
        const visioType = VisioValueType.vLength;
        let cell = this._width;
        if (cell === undefined)
            cell = this.getParentCell('width');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.380 X
     * @see {http://localhost/MS-VSDX.pdf#page=229}
     * @param {VisioCell} x
     */
    set x(x) {
        this.attributeSet('x');
        this._x = x;
    }

    /**
     * 2.4.4.380 X
     * @see {http://localhost/MS-VSDX.pdf#page=229}
     */
    get x() {
        let visioType;
        if (this.isDescendantOfSectionType([
            VisioSectionType.Control,
            VisioSectionType.Scratch,
            VisioSectionType.ActionTag,
            VisioSectionType.Connection,
        ]))
            visioType = VisioValueType.vLength; // for the formula eval
        else
            switch (this.getRowType()) {
                case VisioRowType.ArcTo:
                case VisioRowType.Ellipse:
                case VisioRowType.EllipticalArcTo:
                case VisioRowType.InfiniteLine:
                case VisioRowType.LineTo:
                case VisioRowType.MoveTo:
                case VisioRowType.NURBSTo:
                case VisioRowType.PolylineTo:
                case VisioRowType.SplineKnot:
                case VisioRowType.SplineStart:
                    visioType = VisioValueType.vLength;
                    break;
                case VisioRowType.RelCubBezTo:
                case VisioRowType.RelEllipticalArcTo:
                case VisioRowType.RelLineTo:
                case VisioRowType.RelMoveTo:
                case VisioRowType.RelQuadBezTo:
                    visioType = VisioValueType.vScalar;
                    break;
                default:
                    debug.log('Incorrect cell type',
                        { attributeName: 'x', cells: this, rowType: this.getRowType() });
            }

        let cell = this._x;
        if (cell === undefined)
            cell = this.getParentCell('x');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.381 XCon
     * @see {http://localhost/MS-VSDX.pdf#page=229}
     * @param {VisioCell} xCon
     */
    set xCon(xCon) {
        this.attributeSet('xCon');
        this._xCon = xCon;
    }

    /**
     * 2.4.4.381 XCon
     * @see {http://localhost/MS-VSDX.pdf#page=229}
     */
    get xCon() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._xCon;
        if (cell === undefined)
            cell = this.getParentCell('xCon');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.382 XDyn
     * @see {http://localhost/MS-VSDX.pdf#page=229}
     * @param {VisioCell} xDyn
     */
    set xDyn(xDyn) {
        this.attributeSet('xDyn');
        this._xDyn = xDyn;
    }

    /**
     * 2.4.4.382 XDyn
     * @see {http://localhost/MS-VSDX.pdf#page=229}
     */
    get xDyn() {
        const visioType = VisioValueType.vLength;
        let cell = this._xDyn;
        if (cell === undefined)
            cell = this.getParentCell('xDyn');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.383 XGridDensity
     * @see {http://localhost/MS-VSDX.pdf#page=229}
     * @param {VisioCell} xGridDensity
     */
    set xGridDensity(xGridDensity) {
        this.attributeSet('xGridDensity');
        this._xGridDensity = xGridDensity;
    }

    /**
     * 2.4.4.383 XGridDensity
     * @see {http://localhost/MS-VSDX.pdf#page=229}
     */
    get xGridDensity() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._xGridDensity;
        if (cell === undefined)
            cell = this.getParentCell('xGridDensity');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.384 XGridOrigin
     * @see {http://localhost/MS-VSDX.pdf#page=229}
     * @param {VisioCell} xGridOrigin
     */
    set xGridOrigin(xGridOrigin) {
        this.attributeSet('xGridOrigin');
        this._xGridOrigin = xGridOrigin;
    }

    /**
     * 2.4.4.384 XGridOrigin
     * @see {http://localhost/MS-VSDX.pdf#page=229}
     */
    get xGridOrigin() {
        const visioType = VisioValueType.vLength;
        let cell = this._xGridOrigin;
        if (cell === undefined)
            cell = this.getParentCell('xGridOrigin');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.385 XGridSpacing
     * @see {http://localhost/MS-VSDX.pdf#page=229}
     * @param {VisioCell} xGridSpacing
     */
    set xGridSpacing(xGridSpacing) {
        this.attributeSet('xGridSpacing');
        this._xGridSpacing = xGridSpacing;
    }

    /**
     * 2.4.4.385 XGridSpacing
     * @see {http://localhost/MS-VSDX.pdf#page=229}
     */
    get xGridSpacing() {
        const visioType = VisioValueType.vLength;
        let cell = this._xGridSpacing;
        if (cell === undefined)
            cell = this.getParentCell('xGridSpacing');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.386 XJustify
     * @see {http://localhost/MS-VSDX.pdf#page=229}
     * @param {VisioCell} xJustify
     */
    set xJustify(xJustify) {
        this.attributeSet('xJustify');
        this._xJustify = xJustify;
    }

    /**
     * 2.4.4.386 XJustify
     * @see {http://localhost/MS-VSDX.pdf#page=229}
     */
    get xJustify() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._xJustify;
        if (cell === undefined)
            cell = this.getParentCell('xJustify');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.387 XRulerDensity
     * @see {http://localhost/MS-VSDX.pdf#page=229}
     * @param {VisioCell} xRulerDensity
     */
    set xRulerDensity(xRulerDensity) {
        this.attributeSet('xRulerDensity');
        this._xRulerDensity = xRulerDensity;
    }

    /**
     * 2.4.4.387 XRulerDensity
     * @see {http://localhost/MS-VSDX.pdf#page=229}
     */
    get xRulerDensity() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._xRulerDensity;
        if (cell === undefined)
            cell = this.getParentCell('xRulerDensity');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.388 XRulerOrigin
     * @see {http://localhost/MS-VSDX.pdf#page=230}
     * @param {VisioCell} xRulerOrigin
     */
    set xRulerOrigin(xRulerOrigin) {
        this.attributeSet('xRulerOrigin');
        this._xRulerOrigin = xRulerOrigin;
    }

    /**
     * 2.4.4.388 XRulerOrigin
     * @see {http://localhost/MS-VSDX.pdf#page=230}
     */
    get xRulerOrigin() {
        const visioType = VisioValueType.vLength;
        let cell = this._xRulerOrigin;
        if (cell === undefined)
            cell = this.getParentCell('xRulerOrigin');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.389 Y
     * @see {http://localhost/MS-VSDX.pdf#page=230}
     * @param {VisioCell} y
     */
    set y(y) {
        this.attributeSet('y');
        this._y = y;
    }

    /**
     * 2.4.4.389 Y
     * @see {http://localhost/MS-VSDX.pdf#page=230}
     */
    get y() {
        let visioType;
        if (this.isDescendantOfSectionType([
            VisioSectionType.Control,
            VisioSectionType.Scratch,
            VisioSectionType.ActionTag,
            VisioSectionType.Connection,
        ]))
            visioType = VisioValueType.vLength; // for the formula eval
        else
            switch (this.getRowType()) {
                case VisioRowType.ArcTo:
                case VisioRowType.Ellipse:
                case VisioRowType.EllipticalArcTo:
                case VisioRowType.InfiniteLine:
                case VisioRowType.LineTo:
                case VisioRowType.MoveTo:
                case VisioRowType.NURBSTo:
                case VisioRowType.PolylineTo:
                case VisioRowType.SplineKnot:
                case VisioRowType.SplineStart:
                    visioType = VisioValueType.vLength;
                    break;
                case VisioRowType.RelCubBezTo:
                case VisioRowType.RelEllipticalArcTo:
                case VisioRowType.RelLineTo:
                case VisioRowType.RelMoveTo:
                case VisioRowType.RelQuadBezTo:
                    visioType = VisioValueType.vScalar;
                    break;
                default:
                    debug.log('Incorrect cell type',
                        { attributeName: 'a', cells: this });
            }

        let cell = this._y;
        if (cell === undefined)
            cell = this.getParentCell('y');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.390 YCon
     * @see {http://localhost/MS-VSDX.pdf#page=230}
     * @param {VisioCell} yCon
     */
    set yCon(yCon) {
        this.attributeSet('yCon');
        this._yCon = yCon;
    }

    /**
     * 2.4.4.390 YCon
     * @see {http://localhost/MS-VSDX.pdf#page=230}
     */
    get yCon() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._yCon;
        if (cell === undefined)
            cell = this.getParentCell('yCon');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.391 YDyn
     * @see {http://localhost/MS-VSDX.pdf#page=230}
     * @param {VisioCell} yDyn
     */
    set yDyn(yDyn) {
        this.attributeSet('yDyn');
        this._yDyn = yDyn;
    }

    /**
     * 2.4.4.391 YDyn
     * @see {http://localhost/MS-VSDX.pdf#page=230}
     */
    get yDyn() {
        const visioType = VisioValueType.vLength;
        let cell = this._yDyn;
        if (cell === undefined)
            cell = this.getParentCell('yDyn');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.392 YGridDensity
     * @see {http://localhost/MS-VSDX.pdf#page=230}
     * @param {VisioCell} yGridDensity
     */
    set yGridDensity(yGridDensity) {
        this.attributeSet('yGridDensity');
        this._yGridDensity = yGridDensity;
    }

    /**
     * 2.4.4.392 YGridDensity
     * @see {http://localhost/MS-VSDX.pdf#page=230}
     */
    get yGridDensity() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._yGridDensity;
        if (cell === undefined)
            cell = this.getParentCell('yGridDensity');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.393 YGridOrigin
     * @see {http://localhost/MS-VSDX.pdf#page=230}
     * @param {VisioCell} yGridOrigin
     */
    set yGridOrigin(yGridOrigin) {
        this.attributeSet('yGridOrigin');
        this._yGridOrigin = yGridOrigin;
    }

    /**
     * 2.4.4.393 YGridOrigin
     * @see {http://localhost/MS-VSDX.pdf#page=230}
     */
    get yGridOrigin() {
        const visioType = VisioValueType.vLength;
        let cell = this._yGridOrigin;
        if (cell === undefined)
            cell = this.getParentCell('yGridOrigin');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.394 YGridSpacing
     * @see {http://localhost/MS-VSDX.pdf#page=230}
     * @param {VisioCell} yGridSpacing
     */
    set yGridSpacing(yGridSpacing) {
        this.attributeSet('yGridSpacing');
        this._yGridSpacing = yGridSpacing;
    }

    /**
     * 2.4.4.394 YGridSpacing
     * @see {http://localhost/MS-VSDX.pdf#page=230}
     */
    get yGridSpacing() {
        const visioType = VisioValueType.vLength;
        let cell = this._yGridSpacing;
        if (cell === undefined)
            cell = this.getParentCell('yGridSpacing');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.395 YJustify
     * @see {http://localhost/MS-VSDX.pdf#page=230}
     * @param {VisioCell} yJustify
     */
    set yJustify(yJustify) {
        this.attributeSet('yJustify');
        this._yJustify = yJustify;
    }

    /**
     * 2.4.4.395 YJustify
     * @see {http://localhost/MS-VSDX.pdf#page=230}
     */
    get yJustify() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._yJustify;
        if (cell === undefined)
            cell = this.getParentCell('yJustify');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.396 YRulerDensity
     * @see {http://localhost/MS-VSDX.pdf#page=230}
     * @param {VisioCell} yRulerDensity
     */
    set yRulerDensity(yRulerDensity) {
        this.attributeSet('yRulerDensity');
        this._yRulerDensity = yRulerDensity;
    }

    /**
     * 2.4.4.396 YRulerDensity
     * @see {http://localhost/MS-VSDX.pdf#page=230}
     */
    get yRulerDensity() {
        const visioType = VisioValueType.PtgByte;
        let cell = this._yRulerDensity;
        if (cell === undefined)
            cell = this.getParentCell('yRulerDensity');

        return this.resolveCellValue(cell, visioType);
    }

    /**
     * 2.4.4.397 YRulerOrigin
     * @see {http://localhost/MS-VSDX.pdf#page=231}
     * @param {VisioCell} yRulerOrigin
     */
    set yRulerOrigin(yRulerOrigin) {
        this.attributeSet('yRulerOrigin');
        this._yRulerOrigin = yRulerOrigin;
    }

    /**
     * 2.4.4.397 YRulerOrigin
     * @see {http://localhost/MS-VSDX.pdf#page=231}
     */
    get yRulerOrigin() {
        const visioType = VisioValueType.vLength;
        let cell = this._yRulerOrigin;
        if (cell === undefined)
            cell = this.getParentCell('yRulerOrigin');

        return this.resolveCellValue(cell, visioType);
    }
}
